# Kali Linux Bleeding Edge base
FROM kalilinux/kali-rolling

WORKDIR /root

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive


## 🛠️ FINAL FIX: Force apt to ignore SSL certificate verification failure
# This overrides the stubborn mirror redirects that cause the SSL error until
# 'ca-certificates' is installed.
## 🛠️ FIX: Use a direct HTTP mirror to install certificates first
# This avoids the SSL verification failure when installing ca-certificates.
RUN echo "deb http://kali.download/kali kali-rolling main contrib non-free" > /etc/apt/sources.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends ca-certificates apt-transport-https \
    && rm -rf /var/lib/apt/lists/*

# Set TZ and install tzdata non-interactively
ENV TZ=Europe/Amsterdam
RUN apt-get update && apt-get install -y tzdata \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \
    && echo $TZ > /etc/timezone \
    && dpkg-reconfigure -f noninteractive tzdata

RUN date

# Install core packages
RUN apt-get update && apt full-upgrade -y && apt upgrade -y && apt-get install -y --no-install-recommends \
      curl wget vim nano htop \
      build-essential cmake git \
      procps psmisc lsof strace \
      net-tools iproute2 iputils-ping traceroute \
      python3 python3-pip python3-dev \
      nodejs npm \
      libffi-dev libssl-dev \
      sqlite3 \
      imagemagick sox ffmpeg \
    && rm -rf /var/lib/apt/lists/*

RUN apt update && apt install -y \
  build-essential \
  libssl-dev \
  zlib1g-dev \
  libbz2-dev \
  libreadline-dev \
  libsqlite3-dev \
  libncurses5-dev \
  libncursesw5-dev \
  xz-utils \
  tk-dev \
  libffi-dev \
  liblzma-dev \
  uuid-dev \
  libgdbm-dev \
  libnss3-dev \
  wget \
  curl \
  ca-certificates


# Create sandbox user
RUN useradd -m -s /bin/bash sandbox && \
    echo "sandbox:sandbox" | chpasswd && \
    usermod -aG sudo sandbox

# Create workspace directories
RUN mkdir -p /workspace /training_data && \
    chown -R sandbox:sandbox /workspace /training_data

ENV HOME /root
ENV PYENV_ROOT $HOME/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN curl https://pyenv.run | bash && \
    # Initialize pyenv within this shell context for pyenv install to work
    eval "$(pyenv init --path)" && \
    # Install Python 3.10 (use the latest version available, e.g., 3.10.13)
    # pyenv install 3.10 installs the latest patch version of 3.10
    pyenv install 3.10 && \
    # Set Python 3.10 as the global default for this environment
    pyenv global 3.10 && \
    # Rehash shims so the new python executable is available
    pyenv rehash && \
    # Verify the installation and version (optional)
    /bin/bash -c "python --version"

# Do some python version trickery
RUN python -m ensurepip --upgrade
RUN python -m pip install --upgrade pip setuptools wheel
RUN python -m pip install SpeechRecognition

# Install Python packages for AI/ML
RUN python -m pip install --break-system-packages \
    requests aiohttp websockets \
    psutil docker \
    opencv-python-headless \
    numpy pandas scipy \
    scikit-learn \
    pillow \
    pytesseract \
    SpeechRecognition \
    pyttsx3 \
    beautifulsoup4 \
    selenium \
    playwright \
    supervisor

# Install Node.js packages for web automation
RUN npm install -g \
    puppeteer \
    cheerio \
    axios \
    ws

# Supervisor setup
RUN mkdir -p /etc/supervisor/conf.d
COPY docker/sandbox/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy training scripts
COPY docker/training/train_linux_operations.py /usr/local/bin/
RUN chmod +x /usr/local/bin/train_linux_operations.py

# Working directory
WORKDIR /workspace

# Switch to sandbox user
USER sandbox

# Environment variables
ENV HOME=/home/sandbox
ENV PATH="/home/sandbox/.local/bin:${PATH}"
ENV SANDBOX_TYPE=kalibg

# Default command
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
