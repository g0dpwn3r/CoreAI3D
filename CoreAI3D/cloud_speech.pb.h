// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cloud_speech.proto
// Protobuf C++ Version: 5.29.5

#ifndef cloud_5fspeech_2eproto_2epb_2eh
#define cloud_5fspeech_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/cloud/speech/v1/resource.pb.h"
#include "google/longrunning/operations.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/wrappers.pb.h"
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cloud_5fspeech_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cloud_5fspeech_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cloud_5fspeech_2eproto;
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
class LongRunningRecognizeMetadata;
struct LongRunningRecognizeMetadataDefaultTypeInternal;
extern LongRunningRecognizeMetadataDefaultTypeInternal _LongRunningRecognizeMetadata_default_instance_;
class LongRunningRecognizeRequest;
struct LongRunningRecognizeRequestDefaultTypeInternal;
extern LongRunningRecognizeRequestDefaultTypeInternal _LongRunningRecognizeRequest_default_instance_;
class LongRunningRecognizeResponse;
struct LongRunningRecognizeResponseDefaultTypeInternal;
extern LongRunningRecognizeResponseDefaultTypeInternal _LongRunningRecognizeResponse_default_instance_;
class RecognitionAudio;
struct RecognitionAudioDefaultTypeInternal;
extern RecognitionAudioDefaultTypeInternal _RecognitionAudio_default_instance_;
class RecognitionConfig;
struct RecognitionConfigDefaultTypeInternal;
extern RecognitionConfigDefaultTypeInternal _RecognitionConfig_default_instance_;
class RecognitionMetadata;
struct RecognitionMetadataDefaultTypeInternal;
extern RecognitionMetadataDefaultTypeInternal _RecognitionMetadata_default_instance_;
class RecognizeRequest;
struct RecognizeRequestDefaultTypeInternal;
extern RecognizeRequestDefaultTypeInternal _RecognizeRequest_default_instance_;
class RecognizeResponse;
struct RecognizeResponseDefaultTypeInternal;
extern RecognizeResponseDefaultTypeInternal _RecognizeResponse_default_instance_;
class SpeakerDiarizationConfig;
struct SpeakerDiarizationConfigDefaultTypeInternal;
extern SpeakerDiarizationConfigDefaultTypeInternal _SpeakerDiarizationConfig_default_instance_;
class SpeechAdaptationInfo;
struct SpeechAdaptationInfoDefaultTypeInternal;
extern SpeechAdaptationInfoDefaultTypeInternal _SpeechAdaptationInfo_default_instance_;
class SpeechContext;
struct SpeechContextDefaultTypeInternal;
extern SpeechContextDefaultTypeInternal _SpeechContext_default_instance_;
class SpeechRecognitionAlternative;
struct SpeechRecognitionAlternativeDefaultTypeInternal;
extern SpeechRecognitionAlternativeDefaultTypeInternal _SpeechRecognitionAlternative_default_instance_;
class SpeechRecognitionResult;
struct SpeechRecognitionResultDefaultTypeInternal;
extern SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
class StreamingRecognitionConfig;
struct StreamingRecognitionConfigDefaultTypeInternal;
extern StreamingRecognitionConfigDefaultTypeInternal _StreamingRecognitionConfig_default_instance_;
class StreamingRecognitionConfig_VoiceActivityTimeout;
struct StreamingRecognitionConfig_VoiceActivityTimeoutDefaultTypeInternal;
extern StreamingRecognitionConfig_VoiceActivityTimeoutDefaultTypeInternal _StreamingRecognitionConfig_VoiceActivityTimeout_default_instance_;
class StreamingRecognitionResult;
struct StreamingRecognitionResultDefaultTypeInternal;
extern StreamingRecognitionResultDefaultTypeInternal _StreamingRecognitionResult_default_instance_;
class StreamingRecognizeRequest;
struct StreamingRecognizeRequestDefaultTypeInternal;
extern StreamingRecognizeRequestDefaultTypeInternal _StreamingRecognizeRequest_default_instance_;
class StreamingRecognizeResponse;
struct StreamingRecognizeResponseDefaultTypeInternal;
extern StreamingRecognizeResponseDefaultTypeInternal _StreamingRecognizeResponse_default_instance_;
class TranscriptOutputConfig;
struct TranscriptOutputConfigDefaultTypeInternal;
extern TranscriptOutputConfigDefaultTypeInternal _TranscriptOutputConfig_default_instance_;
class WordInfo;
struct WordInfoDefaultTypeInternal;
extern WordInfoDefaultTypeInternal _WordInfo_default_instance_;
}  // namespace v1
}  // namespace speech
}  // namespace cloud
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace google {
namespace cloud {
namespace speech {
namespace v1 {
enum RecognitionConfig_AudioEncoding : int {
  RecognitionConfig_AudioEncoding_ENCODING_UNSPECIFIED = 0,
  RecognitionConfig_AudioEncoding_LINEAR16 = 1,
  RecognitionConfig_AudioEncoding_FLAC = 2,
  RecognitionConfig_AudioEncoding_MULAW = 3,
  RecognitionConfig_AudioEncoding_AMR = 4,
  RecognitionConfig_AudioEncoding_AMR_WB = 5,
  RecognitionConfig_AudioEncoding_OGG_OPUS = 6,
  RecognitionConfig_AudioEncoding_SPEEX_WITH_HEADER_BYTE = 7,
  RecognitionConfig_AudioEncoding_MP3 = 8,
  RecognitionConfig_AudioEncoding_WEBM_OPUS = 9,
  RecognitionConfig_AudioEncoding_RecognitionConfig_AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RecognitionConfig_AudioEncoding_RecognitionConfig_AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RecognitionConfig_AudioEncoding_IsValid(int value);
extern const uint32_t RecognitionConfig_AudioEncoding_internal_data_[];
constexpr RecognitionConfig_AudioEncoding RecognitionConfig_AudioEncoding_AudioEncoding_MIN = static_cast<RecognitionConfig_AudioEncoding>(0);
constexpr RecognitionConfig_AudioEncoding RecognitionConfig_AudioEncoding_AudioEncoding_MAX = static_cast<RecognitionConfig_AudioEncoding>(9);
constexpr int RecognitionConfig_AudioEncoding_AudioEncoding_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
RecognitionConfig_AudioEncoding_descriptor();
template <typename T>
const std::string& RecognitionConfig_AudioEncoding_Name(T value) {
  static_assert(std::is_same<T, RecognitionConfig_AudioEncoding>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AudioEncoding_Name().");
  return RecognitionConfig_AudioEncoding_Name(static_cast<RecognitionConfig_AudioEncoding>(value));
}
template <>
inline const std::string& RecognitionConfig_AudioEncoding_Name(RecognitionConfig_AudioEncoding value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RecognitionConfig_AudioEncoding_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool RecognitionConfig_AudioEncoding_Parse(absl::string_view name, RecognitionConfig_AudioEncoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecognitionConfig_AudioEncoding>(
      RecognitionConfig_AudioEncoding_descriptor(), name, value);
}
enum RecognitionMetadata_InteractionType : int {
  RecognitionMetadata_InteractionType_INTERACTION_TYPE_UNSPECIFIED = 0,
  RecognitionMetadata_InteractionType_DISCUSSION = 1,
  RecognitionMetadata_InteractionType_PRESENTATION = 2,
  RecognitionMetadata_InteractionType_PHONE_CALL = 3,
  RecognitionMetadata_InteractionType_VOICEMAIL = 4,
  RecognitionMetadata_InteractionType_PROFESSIONALLY_PRODUCED = 5,
  RecognitionMetadata_InteractionType_VOICE_SEARCH = 6,
  RecognitionMetadata_InteractionType_VOICE_COMMAND = 7,
  RecognitionMetadata_InteractionType_DICTATION = 8,
  RecognitionMetadata_InteractionType_RecognitionMetadata_InteractionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RecognitionMetadata_InteractionType_RecognitionMetadata_InteractionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RecognitionMetadata_InteractionType_IsValid(int value);
extern const uint32_t RecognitionMetadata_InteractionType_internal_data_[];
constexpr RecognitionMetadata_InteractionType RecognitionMetadata_InteractionType_InteractionType_MIN = static_cast<RecognitionMetadata_InteractionType>(0);
constexpr RecognitionMetadata_InteractionType RecognitionMetadata_InteractionType_InteractionType_MAX = static_cast<RecognitionMetadata_InteractionType>(8);
constexpr int RecognitionMetadata_InteractionType_InteractionType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
RecognitionMetadata_InteractionType_descriptor();
template <typename T>
const std::string& RecognitionMetadata_InteractionType_Name(T value) {
  static_assert(std::is_same<T, RecognitionMetadata_InteractionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InteractionType_Name().");
  return RecognitionMetadata_InteractionType_Name(static_cast<RecognitionMetadata_InteractionType>(value));
}
template <>
inline const std::string& RecognitionMetadata_InteractionType_Name(RecognitionMetadata_InteractionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RecognitionMetadata_InteractionType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool RecognitionMetadata_InteractionType_Parse(absl::string_view name, RecognitionMetadata_InteractionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecognitionMetadata_InteractionType>(
      RecognitionMetadata_InteractionType_descriptor(), name, value);
}
enum RecognitionMetadata_MicrophoneDistance : int {
  RecognitionMetadata_MicrophoneDistance_MICROPHONE_DISTANCE_UNSPECIFIED = 0,
  RecognitionMetadata_MicrophoneDistance_NEARFIELD = 1,
  RecognitionMetadata_MicrophoneDistance_MIDFIELD = 2,
  RecognitionMetadata_MicrophoneDistance_FARFIELD = 3,
  RecognitionMetadata_MicrophoneDistance_RecognitionMetadata_MicrophoneDistance_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RecognitionMetadata_MicrophoneDistance_RecognitionMetadata_MicrophoneDistance_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RecognitionMetadata_MicrophoneDistance_IsValid(int value);
extern const uint32_t RecognitionMetadata_MicrophoneDistance_internal_data_[];
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MIN = static_cast<RecognitionMetadata_MicrophoneDistance>(0);
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MAX = static_cast<RecognitionMetadata_MicrophoneDistance>(3);
constexpr int RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RecognitionMetadata_MicrophoneDistance_descriptor();
template <typename T>
const std::string& RecognitionMetadata_MicrophoneDistance_Name(T value) {
  static_assert(std::is_same<T, RecognitionMetadata_MicrophoneDistance>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MicrophoneDistance_Name().");
  return RecognitionMetadata_MicrophoneDistance_Name(static_cast<RecognitionMetadata_MicrophoneDistance>(value));
}
template <>
inline const std::string& RecognitionMetadata_MicrophoneDistance_Name(RecognitionMetadata_MicrophoneDistance value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RecognitionMetadata_MicrophoneDistance_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RecognitionMetadata_MicrophoneDistance_Parse(absl::string_view name, RecognitionMetadata_MicrophoneDistance* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecognitionMetadata_MicrophoneDistance>(
      RecognitionMetadata_MicrophoneDistance_descriptor(), name, value);
}
enum RecognitionMetadata_OriginalMediaType : int {
  RecognitionMetadata_OriginalMediaType_ORIGINAL_MEDIA_TYPE_UNSPECIFIED = 0,
  RecognitionMetadata_OriginalMediaType_AUDIO = 1,
  RecognitionMetadata_OriginalMediaType_VIDEO = 2,
  RecognitionMetadata_OriginalMediaType_RecognitionMetadata_OriginalMediaType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RecognitionMetadata_OriginalMediaType_RecognitionMetadata_OriginalMediaType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RecognitionMetadata_OriginalMediaType_IsValid(int value);
extern const uint32_t RecognitionMetadata_OriginalMediaType_internal_data_[];
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata_OriginalMediaType_OriginalMediaType_MIN = static_cast<RecognitionMetadata_OriginalMediaType>(0);
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata_OriginalMediaType_OriginalMediaType_MAX = static_cast<RecognitionMetadata_OriginalMediaType>(2);
constexpr int RecognitionMetadata_OriginalMediaType_OriginalMediaType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
RecognitionMetadata_OriginalMediaType_descriptor();
template <typename T>
const std::string& RecognitionMetadata_OriginalMediaType_Name(T value) {
  static_assert(std::is_same<T, RecognitionMetadata_OriginalMediaType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OriginalMediaType_Name().");
  return RecognitionMetadata_OriginalMediaType_Name(static_cast<RecognitionMetadata_OriginalMediaType>(value));
}
template <>
inline const std::string& RecognitionMetadata_OriginalMediaType_Name(RecognitionMetadata_OriginalMediaType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RecognitionMetadata_OriginalMediaType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RecognitionMetadata_OriginalMediaType_Parse(absl::string_view name, RecognitionMetadata_OriginalMediaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecognitionMetadata_OriginalMediaType>(
      RecognitionMetadata_OriginalMediaType_descriptor(), name, value);
}
enum RecognitionMetadata_RecordingDeviceType : int {
  RecognitionMetadata_RecordingDeviceType_RECORDING_DEVICE_TYPE_UNSPECIFIED = 0,
  RecognitionMetadata_RecordingDeviceType_SMARTPHONE = 1,
  RecognitionMetadata_RecordingDeviceType_PC = 2,
  RecognitionMetadata_RecordingDeviceType_PHONE_LINE = 3,
  RecognitionMetadata_RecordingDeviceType_VEHICLE = 4,
  RecognitionMetadata_RecordingDeviceType_OTHER_OUTDOOR_DEVICE = 5,
  RecognitionMetadata_RecordingDeviceType_OTHER_INDOOR_DEVICE = 6,
  RecognitionMetadata_RecordingDeviceType_RecognitionMetadata_RecordingDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RecognitionMetadata_RecordingDeviceType_RecognitionMetadata_RecordingDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RecognitionMetadata_RecordingDeviceType_IsValid(int value);
extern const uint32_t RecognitionMetadata_RecordingDeviceType_internal_data_[];
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MIN = static_cast<RecognitionMetadata_RecordingDeviceType>(0);
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MAX = static_cast<RecognitionMetadata_RecordingDeviceType>(6);
constexpr int RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
RecognitionMetadata_RecordingDeviceType_descriptor();
template <typename T>
const std::string& RecognitionMetadata_RecordingDeviceType_Name(T value) {
  static_assert(std::is_same<T, RecognitionMetadata_RecordingDeviceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RecordingDeviceType_Name().");
  return RecognitionMetadata_RecordingDeviceType_Name(static_cast<RecognitionMetadata_RecordingDeviceType>(value));
}
template <>
inline const std::string& RecognitionMetadata_RecordingDeviceType_Name(RecognitionMetadata_RecordingDeviceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RecognitionMetadata_RecordingDeviceType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool RecognitionMetadata_RecordingDeviceType_Parse(absl::string_view name, RecognitionMetadata_RecordingDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecognitionMetadata_RecordingDeviceType>(
      RecognitionMetadata_RecordingDeviceType_descriptor(), name, value);
}
enum StreamingRecognizeResponse_SpeechEventType : int {
  StreamingRecognizeResponse_SpeechEventType_SPEECH_EVENT_UNSPECIFIED = 0,
  StreamingRecognizeResponse_SpeechEventType_END_OF_SINGLE_UTTERANCE = 1,
  StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_BEGIN = 2,
  StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_END = 3,
  StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_TIMEOUT = 4,
  StreamingRecognizeResponse_SpeechEventType_StreamingRecognizeResponse_SpeechEventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StreamingRecognizeResponse_SpeechEventType_StreamingRecognizeResponse_SpeechEventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StreamingRecognizeResponse_SpeechEventType_IsValid(int value);
extern const uint32_t StreamingRecognizeResponse_SpeechEventType_internal_data_[];
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MIN = static_cast<StreamingRecognizeResponse_SpeechEventType>(0);
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MAX = static_cast<StreamingRecognizeResponse_SpeechEventType>(4);
constexpr int StreamingRecognizeResponse_SpeechEventType_SpeechEventType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
StreamingRecognizeResponse_SpeechEventType_descriptor();
template <typename T>
const std::string& StreamingRecognizeResponse_SpeechEventType_Name(T value) {
  static_assert(std::is_same<T, StreamingRecognizeResponse_SpeechEventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SpeechEventType_Name().");
  return StreamingRecognizeResponse_SpeechEventType_Name(static_cast<StreamingRecognizeResponse_SpeechEventType>(value));
}
template <>
inline const std::string& StreamingRecognizeResponse_SpeechEventType_Name(StreamingRecognizeResponse_SpeechEventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StreamingRecognizeResponse_SpeechEventType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool StreamingRecognizeResponse_SpeechEventType_Parse(absl::string_view name, StreamingRecognizeResponse_SpeechEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamingRecognizeResponse_SpeechEventType>(
      StreamingRecognizeResponse_SpeechEventType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TranscriptOutputConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.TranscriptOutputConfig) */ {
 public:
  inline TranscriptOutputConfig() : TranscriptOutputConfig(nullptr) {}
  ~TranscriptOutputConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TranscriptOutputConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TranscriptOutputConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TranscriptOutputConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline TranscriptOutputConfig(const TranscriptOutputConfig& from) : TranscriptOutputConfig(nullptr, from) {}
  inline TranscriptOutputConfig(TranscriptOutputConfig&& from) noexcept
      : TranscriptOutputConfig(nullptr, std::move(from)) {}
  inline TranscriptOutputConfig& operator=(const TranscriptOutputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranscriptOutputConfig& operator=(TranscriptOutputConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranscriptOutputConfig& default_instance() {
    return *internal_default_instance();
  }
  enum OutputTypeCase {
    kGcsUri = 1,
    OUTPUT_TYPE_NOT_SET = 0,
  };
  static inline const TranscriptOutputConfig* internal_default_instance() {
    return reinterpret_cast<const TranscriptOutputConfig*>(
        &_TranscriptOutputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TranscriptOutputConfig& a, TranscriptOutputConfig& b) { a.Swap(&b); }
  inline void Swap(TranscriptOutputConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranscriptOutputConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranscriptOutputConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TranscriptOutputConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TranscriptOutputConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TranscriptOutputConfig& from) { TranscriptOutputConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TranscriptOutputConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.TranscriptOutputConfig"; }

 protected:
  explicit TranscriptOutputConfig(::google::protobuf::Arena* arena);
  TranscriptOutputConfig(::google::protobuf::Arena* arena, const TranscriptOutputConfig& from);
  TranscriptOutputConfig(::google::protobuf::Arena* arena, TranscriptOutputConfig&& from) noexcept
      : TranscriptOutputConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGcsUriFieldNumber = 1,
  };
  // string gcs_uri = 1;
  bool has_gcs_uri() const;
  void clear_gcs_uri() ;
  const std::string& gcs_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gcs_uri(Arg_&& arg, Args_... args);
  std::string* mutable_gcs_uri();
  PROTOBUF_NODISCARD std::string* release_gcs_uri();
  void set_allocated_gcs_uri(std::string* value);

  private:
  const std::string& _internal_gcs_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcs_uri(
      const std::string& value);
  std::string* _internal_mutable_gcs_uri();

  public:
  void clear_output_type();
  OutputTypeCase output_type_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.TranscriptOutputConfig)
 private:
  class _Internal;
  void set_has_gcs_uri();
  inline bool has_output_type() const;
  inline void clear_has_output_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TranscriptOutputConfig& from_msg);
    union OutputTypeUnion {
      constexpr OutputTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr gcs_uri_;
    } output_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechContext final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeechContext) */ {
 public:
  inline SpeechContext() : SpeechContext(nullptr) {}
  ~SpeechContext() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpeechContext* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpeechContext));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeechContext(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpeechContext(const SpeechContext& from) : SpeechContext(nullptr, from) {}
  inline SpeechContext(SpeechContext&& from) noexcept
      : SpeechContext(nullptr, std::move(from)) {}
  inline SpeechContext& operator=(const SpeechContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechContext& operator=(SpeechContext&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechContext* internal_default_instance() {
    return reinterpret_cast<const SpeechContext*>(
        &_SpeechContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SpeechContext& a, SpeechContext& b) { a.Swap(&b); }
  inline void Swap(SpeechContext* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechContext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechContext* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpeechContext>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeechContext& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpeechContext& from) { SpeechContext::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpeechContext* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.SpeechContext"; }

 protected:
  explicit SpeechContext(::google::protobuf::Arena* arena);
  SpeechContext(::google::protobuf::Arena* arena, const SpeechContext& from);
  SpeechContext(::google::protobuf::Arena* arena, SpeechContext&& from) noexcept
      : SpeechContext(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPhrasesFieldNumber = 1,
    kBoostFieldNumber = 4,
  };
  // repeated string phrases = 1;
  int phrases_size() const;
  private:
  int _internal_phrases_size() const;

  public:
  void clear_phrases() ;
  const std::string& phrases(int index) const;
  std::string* mutable_phrases(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phrases(int index, Arg_&& value, Args_... args);
  std::string* add_phrases();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_phrases(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& phrases() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_phrases();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_phrases() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_phrases();

  public:
  // float boost = 4;
  void clear_boost() ;
  float boost() const;
  void set_boost(float value);

  private:
  float _internal_boost() const;
  void _internal_set_boost(float value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechContext)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpeechContext& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> phrases_;
    float boost_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechAdaptationInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeechAdaptationInfo) */ {
 public:
  inline SpeechAdaptationInfo() : SpeechAdaptationInfo(nullptr) {}
  ~SpeechAdaptationInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpeechAdaptationInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpeechAdaptationInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeechAdaptationInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpeechAdaptationInfo(const SpeechAdaptationInfo& from) : SpeechAdaptationInfo(nullptr, from) {}
  inline SpeechAdaptationInfo(SpeechAdaptationInfo&& from) noexcept
      : SpeechAdaptationInfo(nullptr, std::move(from)) {}
  inline SpeechAdaptationInfo& operator=(const SpeechAdaptationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechAdaptationInfo& operator=(SpeechAdaptationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechAdaptationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechAdaptationInfo* internal_default_instance() {
    return reinterpret_cast<const SpeechAdaptationInfo*>(
        &_SpeechAdaptationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(SpeechAdaptationInfo& a, SpeechAdaptationInfo& b) { a.Swap(&b); }
  inline void Swap(SpeechAdaptationInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechAdaptationInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechAdaptationInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpeechAdaptationInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeechAdaptationInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpeechAdaptationInfo& from) { SpeechAdaptationInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpeechAdaptationInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.SpeechAdaptationInfo"; }

 protected:
  explicit SpeechAdaptationInfo(::google::protobuf::Arena* arena);
  SpeechAdaptationInfo(::google::protobuf::Arena* arena, const SpeechAdaptationInfo& from);
  SpeechAdaptationInfo(::google::protobuf::Arena* arena, SpeechAdaptationInfo&& from) noexcept
      : SpeechAdaptationInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeoutMessageFieldNumber = 4,
    kAdaptationTimeoutFieldNumber = 1,
  };
  // string timeout_message = 4;
  void clear_timeout_message() ;
  const std::string& timeout_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeout_message(Arg_&& arg, Args_... args);
  std::string* mutable_timeout_message();
  PROTOBUF_NODISCARD std::string* release_timeout_message();
  void set_allocated_timeout_message(std::string* value);

  private:
  const std::string& _internal_timeout_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeout_message(
      const std::string& value);
  std::string* _internal_mutable_timeout_message();

  public:
  // bool adaptation_timeout = 1;
  void clear_adaptation_timeout() ;
  bool adaptation_timeout() const;
  void set_adaptation_timeout(bool value);

  private:
  bool _internal_adaptation_timeout() const;
  void _internal_set_adaptation_timeout(bool value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechAdaptationInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpeechAdaptationInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr timeout_message_;
    bool adaptation_timeout_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeakerDiarizationConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeakerDiarizationConfig) */ {
 public:
  inline SpeakerDiarizationConfig() : SpeakerDiarizationConfig(nullptr) {}
  ~SpeakerDiarizationConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpeakerDiarizationConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpeakerDiarizationConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeakerDiarizationConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpeakerDiarizationConfig(const SpeakerDiarizationConfig& from) : SpeakerDiarizationConfig(nullptr, from) {}
  inline SpeakerDiarizationConfig(SpeakerDiarizationConfig&& from) noexcept
      : SpeakerDiarizationConfig(nullptr, std::move(from)) {}
  inline SpeakerDiarizationConfig& operator=(const SpeakerDiarizationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeakerDiarizationConfig& operator=(SpeakerDiarizationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeakerDiarizationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeakerDiarizationConfig* internal_default_instance() {
    return reinterpret_cast<const SpeakerDiarizationConfig*>(
        &_SpeakerDiarizationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SpeakerDiarizationConfig& a, SpeakerDiarizationConfig& b) { a.Swap(&b); }
  inline void Swap(SpeakerDiarizationConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeakerDiarizationConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeakerDiarizationConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpeakerDiarizationConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeakerDiarizationConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpeakerDiarizationConfig& from) { SpeakerDiarizationConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpeakerDiarizationConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.SpeakerDiarizationConfig"; }

 protected:
  explicit SpeakerDiarizationConfig(::google::protobuf::Arena* arena);
  SpeakerDiarizationConfig(::google::protobuf::Arena* arena, const SpeakerDiarizationConfig& from);
  SpeakerDiarizationConfig(::google::protobuf::Arena* arena, SpeakerDiarizationConfig&& from) noexcept
      : SpeakerDiarizationConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnableSpeakerDiarizationFieldNumber = 1,
    kMinSpeakerCountFieldNumber = 2,
    kMaxSpeakerCountFieldNumber = 3,
    kSpeakerTagFieldNumber = 5,
  };
  // bool enable_speaker_diarization = 1;
  void clear_enable_speaker_diarization() ;
  bool enable_speaker_diarization() const;
  void set_enable_speaker_diarization(bool value);

  private:
  bool _internal_enable_speaker_diarization() const;
  void _internal_set_enable_speaker_diarization(bool value);

  public:
  // int32 min_speaker_count = 2;
  void clear_min_speaker_count() ;
  ::int32_t min_speaker_count() const;
  void set_min_speaker_count(::int32_t value);

  private:
  ::int32_t _internal_min_speaker_count() const;
  void _internal_set_min_speaker_count(::int32_t value);

  public:
  // int32 max_speaker_count = 3;
  void clear_max_speaker_count() ;
  ::int32_t max_speaker_count() const;
  void set_max_speaker_count(::int32_t value);

  private:
  ::int32_t _internal_max_speaker_count() const;
  void _internal_set_max_speaker_count(::int32_t value);

  public:
  // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  [[deprecated]]  void clear_speaker_tag() ;
  [[deprecated]] ::int32_t speaker_tag() const;
  [[deprecated]] void set_speaker_tag(::int32_t value);

  private:
  ::int32_t _internal_speaker_tag() const;
  void _internal_set_speaker_tag(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeakerDiarizationConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpeakerDiarizationConfig& from_msg);
    bool enable_speaker_diarization_;
    ::int32_t min_speaker_count_;
    ::int32_t max_speaker_count_;
    ::int32_t speaker_tag_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognitionMetadata) */ {
 public:
  inline RecognitionMetadata() : RecognitionMetadata(nullptr) {}
  ~RecognitionMetadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognitionMetadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognitionMetadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognitionMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognitionMetadata(const RecognitionMetadata& from) : RecognitionMetadata(nullptr, from) {}
  inline RecognitionMetadata(RecognitionMetadata&& from) noexcept
      : RecognitionMetadata(nullptr, std::move(from)) {}
  inline RecognitionMetadata& operator=(const RecognitionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionMetadata& operator=(RecognitionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognitionMetadata* internal_default_instance() {
    return reinterpret_cast<const RecognitionMetadata*>(
        &_RecognitionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(RecognitionMetadata& a, RecognitionMetadata& b) { a.Swap(&b); }
  inline void Swap(RecognitionMetadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionMetadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognitionMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognitionMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognitionMetadata& from) { RecognitionMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognitionMetadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.RecognitionMetadata"; }

 protected:
  explicit RecognitionMetadata(::google::protobuf::Arena* arena);
  RecognitionMetadata(::google::protobuf::Arena* arena, const RecognitionMetadata& from);
  RecognitionMetadata(::google::protobuf::Arena* arena, RecognitionMetadata&& from) noexcept
      : RecognitionMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using InteractionType = RecognitionMetadata_InteractionType;
  static constexpr InteractionType INTERACTION_TYPE_UNSPECIFIED = RecognitionMetadata_InteractionType_INTERACTION_TYPE_UNSPECIFIED;
  static constexpr InteractionType DISCUSSION = RecognitionMetadata_InteractionType_DISCUSSION;
  static constexpr InteractionType PRESENTATION = RecognitionMetadata_InteractionType_PRESENTATION;
  static constexpr InteractionType PHONE_CALL = RecognitionMetadata_InteractionType_PHONE_CALL;
  static constexpr InteractionType VOICEMAIL = RecognitionMetadata_InteractionType_VOICEMAIL;
  static constexpr InteractionType PROFESSIONALLY_PRODUCED = RecognitionMetadata_InteractionType_PROFESSIONALLY_PRODUCED;
  static constexpr InteractionType VOICE_SEARCH = RecognitionMetadata_InteractionType_VOICE_SEARCH;
  static constexpr InteractionType VOICE_COMMAND = RecognitionMetadata_InteractionType_VOICE_COMMAND;
  static constexpr InteractionType DICTATION = RecognitionMetadata_InteractionType_DICTATION;
  static inline bool InteractionType_IsValid(int value) {
    return RecognitionMetadata_InteractionType_IsValid(value);
  }
  static constexpr InteractionType InteractionType_MIN = RecognitionMetadata_InteractionType_InteractionType_MIN;
  static constexpr InteractionType InteractionType_MAX = RecognitionMetadata_InteractionType_InteractionType_MAX;
  static constexpr int InteractionType_ARRAYSIZE = RecognitionMetadata_InteractionType_InteractionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* InteractionType_descriptor() {
    return RecognitionMetadata_InteractionType_descriptor();
  }
  template <typename T>
  static inline const std::string& InteractionType_Name(T value) {
    return RecognitionMetadata_InteractionType_Name(value);
  }
  static inline bool InteractionType_Parse(absl::string_view name, InteractionType* value) {
    return RecognitionMetadata_InteractionType_Parse(name, value);
  }
  using MicrophoneDistance = RecognitionMetadata_MicrophoneDistance;
  static constexpr MicrophoneDistance MICROPHONE_DISTANCE_UNSPECIFIED = RecognitionMetadata_MicrophoneDistance_MICROPHONE_DISTANCE_UNSPECIFIED;
  static constexpr MicrophoneDistance NEARFIELD = RecognitionMetadata_MicrophoneDistance_NEARFIELD;
  static constexpr MicrophoneDistance MIDFIELD = RecognitionMetadata_MicrophoneDistance_MIDFIELD;
  static constexpr MicrophoneDistance FARFIELD = RecognitionMetadata_MicrophoneDistance_FARFIELD;
  static inline bool MicrophoneDistance_IsValid(int value) {
    return RecognitionMetadata_MicrophoneDistance_IsValid(value);
  }
  static constexpr MicrophoneDistance MicrophoneDistance_MIN = RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MIN;
  static constexpr MicrophoneDistance MicrophoneDistance_MAX = RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_MAX;
  static constexpr int MicrophoneDistance_ARRAYSIZE = RecognitionMetadata_MicrophoneDistance_MicrophoneDistance_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MicrophoneDistance_descriptor() {
    return RecognitionMetadata_MicrophoneDistance_descriptor();
  }
  template <typename T>
  static inline const std::string& MicrophoneDistance_Name(T value) {
    return RecognitionMetadata_MicrophoneDistance_Name(value);
  }
  static inline bool MicrophoneDistance_Parse(absl::string_view name, MicrophoneDistance* value) {
    return RecognitionMetadata_MicrophoneDistance_Parse(name, value);
  }
  using OriginalMediaType = RecognitionMetadata_OriginalMediaType;
  static constexpr OriginalMediaType ORIGINAL_MEDIA_TYPE_UNSPECIFIED = RecognitionMetadata_OriginalMediaType_ORIGINAL_MEDIA_TYPE_UNSPECIFIED;
  static constexpr OriginalMediaType AUDIO = RecognitionMetadata_OriginalMediaType_AUDIO;
  static constexpr OriginalMediaType VIDEO = RecognitionMetadata_OriginalMediaType_VIDEO;
  static inline bool OriginalMediaType_IsValid(int value) {
    return RecognitionMetadata_OriginalMediaType_IsValid(value);
  }
  static constexpr OriginalMediaType OriginalMediaType_MIN = RecognitionMetadata_OriginalMediaType_OriginalMediaType_MIN;
  static constexpr OriginalMediaType OriginalMediaType_MAX = RecognitionMetadata_OriginalMediaType_OriginalMediaType_MAX;
  static constexpr int OriginalMediaType_ARRAYSIZE = RecognitionMetadata_OriginalMediaType_OriginalMediaType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* OriginalMediaType_descriptor() {
    return RecognitionMetadata_OriginalMediaType_descriptor();
  }
  template <typename T>
  static inline const std::string& OriginalMediaType_Name(T value) {
    return RecognitionMetadata_OriginalMediaType_Name(value);
  }
  static inline bool OriginalMediaType_Parse(absl::string_view name, OriginalMediaType* value) {
    return RecognitionMetadata_OriginalMediaType_Parse(name, value);
  }
  using RecordingDeviceType = RecognitionMetadata_RecordingDeviceType;
  static constexpr RecordingDeviceType RECORDING_DEVICE_TYPE_UNSPECIFIED = RecognitionMetadata_RecordingDeviceType_RECORDING_DEVICE_TYPE_UNSPECIFIED;
  static constexpr RecordingDeviceType SMARTPHONE = RecognitionMetadata_RecordingDeviceType_SMARTPHONE;
  static constexpr RecordingDeviceType PC = RecognitionMetadata_RecordingDeviceType_PC;
  static constexpr RecordingDeviceType PHONE_LINE = RecognitionMetadata_RecordingDeviceType_PHONE_LINE;
  static constexpr RecordingDeviceType VEHICLE = RecognitionMetadata_RecordingDeviceType_VEHICLE;
  static constexpr RecordingDeviceType OTHER_OUTDOOR_DEVICE = RecognitionMetadata_RecordingDeviceType_OTHER_OUTDOOR_DEVICE;
  static constexpr RecordingDeviceType OTHER_INDOOR_DEVICE = RecognitionMetadata_RecordingDeviceType_OTHER_INDOOR_DEVICE;
  static inline bool RecordingDeviceType_IsValid(int value) {
    return RecognitionMetadata_RecordingDeviceType_IsValid(value);
  }
  static constexpr RecordingDeviceType RecordingDeviceType_MIN = RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MIN;
  static constexpr RecordingDeviceType RecordingDeviceType_MAX = RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_MAX;
  static constexpr int RecordingDeviceType_ARRAYSIZE = RecognitionMetadata_RecordingDeviceType_RecordingDeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* RecordingDeviceType_descriptor() {
    return RecognitionMetadata_RecordingDeviceType_descriptor();
  }
  template <typename T>
  static inline const std::string& RecordingDeviceType_Name(T value) {
    return RecognitionMetadata_RecordingDeviceType_Name(value);
  }
  static inline bool RecordingDeviceType_Parse(absl::string_view name, RecordingDeviceType* value) {
    return RecognitionMetadata_RecordingDeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRecordingDeviceNameFieldNumber = 7,
    kOriginalMimeTypeFieldNumber = 8,
    kAudioTopicFieldNumber = 10,
    kInteractionTypeFieldNumber = 1,
    kIndustryNaicsCodeOfAudioFieldNumber = 3,
    kMicrophoneDistanceFieldNumber = 4,
    kOriginalMediaTypeFieldNumber = 5,
    kRecordingDeviceTypeFieldNumber = 6,
  };
  // string recording_device_name = 7;
  void clear_recording_device_name() ;
  const std::string& recording_device_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recording_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_recording_device_name();
  PROTOBUF_NODISCARD std::string* release_recording_device_name();
  void set_allocated_recording_device_name(std::string* value);

  private:
  const std::string& _internal_recording_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recording_device_name(
      const std::string& value);
  std::string* _internal_mutable_recording_device_name();

  public:
  // string original_mime_type = 8;
  void clear_original_mime_type() ;
  const std::string& original_mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_original_mime_type(Arg_&& arg, Args_... args);
  std::string* mutable_original_mime_type();
  PROTOBUF_NODISCARD std::string* release_original_mime_type();
  void set_allocated_original_mime_type(std::string* value);

  private:
  const std::string& _internal_original_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_original_mime_type(
      const std::string& value);
  std::string* _internal_mutable_original_mime_type();

  public:
  // string audio_topic = 10;
  void clear_audio_topic() ;
  const std::string& audio_topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_topic(Arg_&& arg, Args_... args);
  std::string* mutable_audio_topic();
  PROTOBUF_NODISCARD std::string* release_audio_topic();
  void set_allocated_audio_topic(std::string* value);

  private:
  const std::string& _internal_audio_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_topic(
      const std::string& value);
  std::string* _internal_mutable_audio_topic();

  public:
  // .google.cloud.speech.v1.RecognitionMetadata.InteractionType interaction_type = 1;
  void clear_interaction_type() ;
  ::google::cloud::speech::v1::RecognitionMetadata_InteractionType interaction_type() const;
  void set_interaction_type(::google::cloud::speech::v1::RecognitionMetadata_InteractionType value);

  private:
  ::google::cloud::speech::v1::RecognitionMetadata_InteractionType _internal_interaction_type() const;
  void _internal_set_interaction_type(::google::cloud::speech::v1::RecognitionMetadata_InteractionType value);

  public:
  // uint32 industry_naics_code_of_audio = 3;
  void clear_industry_naics_code_of_audio() ;
  ::uint32_t industry_naics_code_of_audio() const;
  void set_industry_naics_code_of_audio(::uint32_t value);

  private:
  ::uint32_t _internal_industry_naics_code_of_audio() const;
  void _internal_set_industry_naics_code_of_audio(::uint32_t value);

  public:
  // .google.cloud.speech.v1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
  void clear_microphone_distance() ;
  ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance microphone_distance() const;
  void set_microphone_distance(::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance value);

  private:
  ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance _internal_microphone_distance() const;
  void _internal_set_microphone_distance(::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance value);

  public:
  // .google.cloud.speech.v1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
  void clear_original_media_type() ;
  ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType original_media_type() const;
  void set_original_media_type(::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType value);

  private:
  ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType _internal_original_media_type() const;
  void _internal_set_original_media_type(::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType value);

  public:
  // .google.cloud.speech.v1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
  void clear_recording_device_type() ;
  ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType recording_device_type() const;
  void set_recording_device_type(::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType value);

  private:
  ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType _internal_recording_device_type() const;
  void _internal_set_recording_device_type(::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognitionMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      109, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognitionMetadata& from_msg);
    ::google::protobuf::internal::ArenaStringPtr recording_device_name_;
    ::google::protobuf::internal::ArenaStringPtr original_mime_type_;
    ::google::protobuf::internal::ArenaStringPtr audio_topic_;
    int interaction_type_;
    ::uint32_t industry_naics_code_of_audio_;
    int microphone_distance_;
    int original_media_type_;
    int recording_device_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionAudio final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognitionAudio) */ {
 public:
  inline RecognitionAudio() : RecognitionAudio(nullptr) {}
  ~RecognitionAudio() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognitionAudio* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognitionAudio));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognitionAudio(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognitionAudio(const RecognitionAudio& from) : RecognitionAudio(nullptr, from) {}
  inline RecognitionAudio(RecognitionAudio&& from) noexcept
      : RecognitionAudio(nullptr, std::move(from)) {}
  inline RecognitionAudio& operator=(const RecognitionAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionAudio& operator=(RecognitionAudio&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionAudio& default_instance() {
    return *internal_default_instance();
  }
  enum AudioSourceCase {
    kContent = 1,
    kUri = 2,
    AUDIO_SOURCE_NOT_SET = 0,
  };
  static inline const RecognitionAudio* internal_default_instance() {
    return reinterpret_cast<const RecognitionAudio*>(
        &_RecognitionAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(RecognitionAudio& a, RecognitionAudio& b) { a.Swap(&b); }
  inline void Swap(RecognitionAudio* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionAudio* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionAudio* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognitionAudio>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognitionAudio& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognitionAudio& from) { RecognitionAudio::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognitionAudio* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.RecognitionAudio"; }

 protected:
  explicit RecognitionAudio(::google::protobuf::Arena* arena);
  RecognitionAudio(::google::protobuf::Arena* arena, const RecognitionAudio& from);
  RecognitionAudio(::google::protobuf::Arena* arena, RecognitionAudio&& from) noexcept
      : RecognitionAudio(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kUriFieldNumber = 2,
  };
  // bytes content = 1;
  bool has_content() const;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string uri = 2;
  bool has_uri() const;
  void clear_uri() ;
  const std::string& uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* value);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  void clear_audio_source();
  AudioSourceCase audio_source_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognitionAudio)
 private:
  class _Internal;
  void set_has_content();
  void set_has_uri();
  inline bool has_audio_source() const;
  inline void clear_has_audio_source();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognitionAudio& from_msg);
    union AudioSourceUnion {
      constexpr AudioSourceUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr content_;
      ::google::protobuf::internal::ArenaStringPtr uri_;
    } audio_source_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class WordInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.WordInfo) */ {
 public:
  inline WordInfo() : WordInfo(nullptr) {}
  ~WordInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WordInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WordInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WordInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline WordInfo(const WordInfo& from) : WordInfo(nullptr, from) {}
  inline WordInfo(WordInfo&& from) noexcept
      : WordInfo(nullptr, std::move(from)) {}
  inline WordInfo& operator=(const WordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WordInfo& operator=(WordInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WordInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WordInfo* internal_default_instance() {
    return reinterpret_cast<const WordInfo*>(
        &_WordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(WordInfo& a, WordInfo& b) { a.Swap(&b); }
  inline void Swap(WordInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WordInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WordInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WordInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WordInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WordInfo& from) { WordInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WordInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.WordInfo"; }

 protected:
  explicit WordInfo(::google::protobuf::Arena* arena);
  WordInfo(::google::protobuf::Arena* arena, const WordInfo& from);
  WordInfo(::google::protobuf::Arena* arena, WordInfo&& from) noexcept
      : WordInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWordFieldNumber = 3,
    kSpeakerLabelFieldNumber = 6,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kConfidenceFieldNumber = 4,
    kSpeakerTagFieldNumber = 5,
  };
  // string word = 3;
  void clear_word() ;
  const std::string& word() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_word(Arg_&& arg, Args_... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* value);

  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(
      const std::string& value);
  std::string* _internal_mutable_word();

  public:
  // string speaker_label = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_speaker_label() ;
  const std::string& speaker_label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_speaker_label(Arg_&& arg, Args_... args);
  std::string* mutable_speaker_label();
  PROTOBUF_NODISCARD std::string* release_speaker_label();
  void set_allocated_speaker_label(std::string* value);

  private:
  const std::string& _internal_speaker_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speaker_label(
      const std::string& value);
  std::string* _internal_mutable_speaker_label();

  public:
  // .google.protobuf.Duration start_time = 1;
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Duration& start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_start_time();
  ::google::protobuf::Duration* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Duration& _internal_start_time() const;
  ::google::protobuf::Duration* _internal_mutable_start_time();

  public:
  // .google.protobuf.Duration end_time = 2;
  bool has_end_time() const;
  void clear_end_time() ;
  const ::google::protobuf::Duration& end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_end_time();
  ::google::protobuf::Duration* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_end_time(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_end_time();

  private:
  const ::google::protobuf::Duration& _internal_end_time() const;
  ::google::protobuf::Duration* _internal_mutable_end_time();

  public:
  // float confidence = 4;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  [[deprecated]]  void clear_speaker_tag() ;
  [[deprecated]] ::int32_t speaker_tag() const;
  [[deprecated]] void set_speaker_tag(::int32_t value);

  private:
  ::int32_t _internal_speaker_tag() const;
  void _internal_set_speaker_tag(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.WordInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WordInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr word_;
    ::google::protobuf::internal::ArenaStringPtr speaker_label_;
    ::google::protobuf::Duration* start_time_;
    ::google::protobuf::Duration* end_time_;
    float confidence_;
    ::int32_t speaker_tag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionConfig_VoiceActivityTimeout final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout) */ {
 public:
  inline StreamingRecognitionConfig_VoiceActivityTimeout() : StreamingRecognitionConfig_VoiceActivityTimeout(nullptr) {}
  ~StreamingRecognitionConfig_VoiceActivityTimeout() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamingRecognitionConfig_VoiceActivityTimeout* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamingRecognitionConfig_VoiceActivityTimeout));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionConfig_VoiceActivityTimeout(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamingRecognitionConfig_VoiceActivityTimeout(const StreamingRecognitionConfig_VoiceActivityTimeout& from) : StreamingRecognitionConfig_VoiceActivityTimeout(nullptr, from) {}
  inline StreamingRecognitionConfig_VoiceActivityTimeout(StreamingRecognitionConfig_VoiceActivityTimeout&& from) noexcept
      : StreamingRecognitionConfig_VoiceActivityTimeout(nullptr, std::move(from)) {}
  inline StreamingRecognitionConfig_VoiceActivityTimeout& operator=(const StreamingRecognitionConfig_VoiceActivityTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionConfig_VoiceActivityTimeout& operator=(StreamingRecognitionConfig_VoiceActivityTimeout&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionConfig_VoiceActivityTimeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionConfig_VoiceActivityTimeout* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionConfig_VoiceActivityTimeout*>(
        &_StreamingRecognitionConfig_VoiceActivityTimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(StreamingRecognitionConfig_VoiceActivityTimeout& a, StreamingRecognitionConfig_VoiceActivityTimeout& b) { a.Swap(&b); }
  inline void Swap(StreamingRecognitionConfig_VoiceActivityTimeout* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionConfig_VoiceActivityTimeout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionConfig_VoiceActivityTimeout* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamingRecognitionConfig_VoiceActivityTimeout>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionConfig_VoiceActivityTimeout& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamingRecognitionConfig_VoiceActivityTimeout& from) { StreamingRecognitionConfig_VoiceActivityTimeout::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamingRecognitionConfig_VoiceActivityTimeout* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout"; }

 protected:
  explicit StreamingRecognitionConfig_VoiceActivityTimeout(::google::protobuf::Arena* arena);
  StreamingRecognitionConfig_VoiceActivityTimeout(::google::protobuf::Arena* arena, const StreamingRecognitionConfig_VoiceActivityTimeout& from);
  StreamingRecognitionConfig_VoiceActivityTimeout(::google::protobuf::Arena* arena, StreamingRecognitionConfig_VoiceActivityTimeout&& from) noexcept
      : StreamingRecognitionConfig_VoiceActivityTimeout(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSpeechStartTimeoutFieldNumber = 1,
    kSpeechEndTimeoutFieldNumber = 2,
  };
  // .google.protobuf.Duration speech_start_timeout = 1;
  bool has_speech_start_timeout() const;
  void clear_speech_start_timeout() ;
  const ::google::protobuf::Duration& speech_start_timeout() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_speech_start_timeout();
  ::google::protobuf::Duration* mutable_speech_start_timeout();
  void set_allocated_speech_start_timeout(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_speech_start_timeout(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_speech_start_timeout();

  private:
  const ::google::protobuf::Duration& _internal_speech_start_timeout() const;
  ::google::protobuf::Duration* _internal_mutable_speech_start_timeout();

  public:
  // .google.protobuf.Duration speech_end_timeout = 2;
  bool has_speech_end_timeout() const;
  void clear_speech_end_timeout() ;
  const ::google::protobuf::Duration& speech_end_timeout() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_speech_end_timeout();
  ::google::protobuf::Duration* mutable_speech_end_timeout();
  void set_allocated_speech_end_timeout(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_speech_end_timeout(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_speech_end_timeout();

  private:
  const ::google::protobuf::Duration& _internal_speech_end_timeout() const;
  ::google::protobuf::Duration* _internal_mutable_speech_end_timeout();

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamingRecognitionConfig_VoiceActivityTimeout& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Duration* speech_start_timeout_;
    ::google::protobuf::Duration* speech_end_timeout_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class LongRunningRecognizeMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.LongRunningRecognizeMetadata) */ {
 public:
  inline LongRunningRecognizeMetadata() : LongRunningRecognizeMetadata(nullptr) {}
  ~LongRunningRecognizeMetadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LongRunningRecognizeMetadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LongRunningRecognizeMetadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LongRunningRecognizeMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline LongRunningRecognizeMetadata(const LongRunningRecognizeMetadata& from) : LongRunningRecognizeMetadata(nullptr, from) {}
  inline LongRunningRecognizeMetadata(LongRunningRecognizeMetadata&& from) noexcept
      : LongRunningRecognizeMetadata(nullptr, std::move(from)) {}
  inline LongRunningRecognizeMetadata& operator=(const LongRunningRecognizeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongRunningRecognizeMetadata& operator=(LongRunningRecognizeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LongRunningRecognizeMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongRunningRecognizeMetadata* internal_default_instance() {
    return reinterpret_cast<const LongRunningRecognizeMetadata*>(
        &_LongRunningRecognizeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(LongRunningRecognizeMetadata& a, LongRunningRecognizeMetadata& b) { a.Swap(&b); }
  inline void Swap(LongRunningRecognizeMetadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongRunningRecognizeMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LongRunningRecognizeMetadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LongRunningRecognizeMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LongRunningRecognizeMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LongRunningRecognizeMetadata& from) { LongRunningRecognizeMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LongRunningRecognizeMetadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.LongRunningRecognizeMetadata"; }

 protected:
  explicit LongRunningRecognizeMetadata(::google::protobuf::Arena* arena);
  LongRunningRecognizeMetadata(::google::protobuf::Arena* arena, const LongRunningRecognizeMetadata& from);
  LongRunningRecognizeMetadata(::google::protobuf::Arena* arena, LongRunningRecognizeMetadata&& from) noexcept
      : LongRunningRecognizeMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUriFieldNumber = 4,
    kStartTimeFieldNumber = 2,
    kLastUpdateTimeFieldNumber = 3,
    kProgressPercentFieldNumber = 1,
  };
  // string uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_uri() ;
  const std::string& uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* value);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_start_time();

  public:
  // .google.protobuf.Timestamp last_update_time = 3;
  bool has_last_update_time() const;
  void clear_last_update_time() ;
  const ::google::protobuf::Timestamp& last_update_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_update_time();
  ::google::protobuf::Timestamp* mutable_last_update_time();
  void set_allocated_last_update_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_update_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_update_time();

  private:
  const ::google::protobuf::Timestamp& _internal_last_update_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_update_time();

  public:
  // int32 progress_percent = 1;
  void clear_progress_percent() ;
  ::int32_t progress_percent() const;
  void set_progress_percent(::int32_t value);

  private:
  ::int32_t _internal_progress_percent() const;
  void _internal_set_progress_percent(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LongRunningRecognizeMetadata& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
    ::google::protobuf::Timestamp* start_time_;
    ::google::protobuf::Timestamp* last_update_time_;
    ::int32_t progress_percent_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionAlternative final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeechRecognitionAlternative) */ {
 public:
  inline SpeechRecognitionAlternative() : SpeechRecognitionAlternative(nullptr) {}
  ~SpeechRecognitionAlternative() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpeechRecognitionAlternative* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpeechRecognitionAlternative));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeechRecognitionAlternative(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from) : SpeechRecognitionAlternative(nullptr, from) {}
  inline SpeechRecognitionAlternative(SpeechRecognitionAlternative&& from) noexcept
      : SpeechRecognitionAlternative(nullptr, std::move(from)) {}
  inline SpeechRecognitionAlternative& operator=(const SpeechRecognitionAlternative& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionAlternative& operator=(SpeechRecognitionAlternative&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionAlternative& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionAlternative* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionAlternative*>(
        &_SpeechRecognitionAlternative_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(SpeechRecognitionAlternative& a, SpeechRecognitionAlternative& b) { a.Swap(&b); }
  inline void Swap(SpeechRecognitionAlternative* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionAlternative* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechRecognitionAlternative* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpeechRecognitionAlternative>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionAlternative& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpeechRecognitionAlternative& from) { SpeechRecognitionAlternative::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpeechRecognitionAlternative* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.SpeechRecognitionAlternative"; }

 protected:
  explicit SpeechRecognitionAlternative(::google::protobuf::Arena* arena);
  SpeechRecognitionAlternative(::google::protobuf::Arena* arena, const SpeechRecognitionAlternative& from);
  SpeechRecognitionAlternative(::google::protobuf::Arena* arena, SpeechRecognitionAlternative&& from) noexcept
      : SpeechRecognitionAlternative(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWordsFieldNumber = 3,
    kTranscriptFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  int words_size() const;
  private:
  int _internal_words_size() const;

  public:
  void clear_words() ;
  ::google::cloud::speech::v1::WordInfo* mutable_words(int index);
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::WordInfo>* mutable_words();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::WordInfo>& _internal_words() const;
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::WordInfo>* _internal_mutable_words();
  public:
  const ::google::cloud::speech::v1::WordInfo& words(int index) const;
  ::google::cloud::speech::v1::WordInfo* add_words();
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::WordInfo>& words() const;
  // string transcript = 1;
  void clear_transcript() ;
  const std::string& transcript() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transcript(Arg_&& arg, Args_... args);
  std::string* mutable_transcript();
  PROTOBUF_NODISCARD std::string* release_transcript();
  void set_allocated_transcript(std::string* value);

  private:
  const std::string& _internal_transcript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transcript(
      const std::string& value);
  std::string* _internal_mutable_transcript();

  public:
  // float confidence = 2;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechRecognitionAlternative)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpeechRecognitionAlternative& from_msg);
    ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::WordInfo > words_;
    ::google::protobuf::internal::ArenaStringPtr transcript_;
    float confidence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognitionResult) */ {
 public:
  inline StreamingRecognitionResult() : StreamingRecognitionResult(nullptr) {}
  ~StreamingRecognitionResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamingRecognitionResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamingRecognitionResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamingRecognitionResult(const StreamingRecognitionResult& from) : StreamingRecognitionResult(nullptr, from) {}
  inline StreamingRecognitionResult(StreamingRecognitionResult&& from) noexcept
      : StreamingRecognitionResult(nullptr, std::move(from)) {}
  inline StreamingRecognitionResult& operator=(const StreamingRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionResult& operator=(StreamingRecognitionResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionResult*>(
        &_StreamingRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(StreamingRecognitionResult& a, StreamingRecognitionResult& b) { a.Swap(&b); }
  inline void Swap(StreamingRecognitionResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamingRecognitionResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamingRecognitionResult& from) { StreamingRecognitionResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamingRecognitionResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.StreamingRecognitionResult"; }

 protected:
  explicit StreamingRecognitionResult(::google::protobuf::Arena* arena);
  StreamingRecognitionResult(::google::protobuf::Arena* arena, const StreamingRecognitionResult& from);
  StreamingRecognitionResult(::google::protobuf::Arena* arena, StreamingRecognitionResult&& from) noexcept
      : StreamingRecognitionResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAlternativesFieldNumber = 1,
    kLanguageCodeFieldNumber = 6,
    kResultEndTimeFieldNumber = 4,
    kIsFinalFieldNumber = 2,
    kStabilityFieldNumber = 3,
    kChannelTagFieldNumber = 5,
  };
  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  int alternatives_size() const;
  private:
  int _internal_alternatives_size() const;

  public:
  void clear_alternatives() ;
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* mutable_alternatives(int index);
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>* mutable_alternatives();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>& _internal_alternatives() const;
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>* _internal_mutable_alternatives();
  public:
  const ::google::cloud::speech::v1::SpeechRecognitionAlternative& alternatives(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* add_alternatives();
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>& alternatives() const;
  // string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_language_code() ;
  const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language_code(Arg_&& arg, Args_... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* value);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // .google.protobuf.Duration result_end_time = 4;
  bool has_result_end_time() const;
  void clear_result_end_time() ;
  const ::google::protobuf::Duration& result_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_result_end_time();
  ::google::protobuf::Duration* mutable_result_end_time();
  void set_allocated_result_end_time(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_result_end_time(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_result_end_time();

  private:
  const ::google::protobuf::Duration& _internal_result_end_time() const;
  ::google::protobuf::Duration* _internal_mutable_result_end_time();

  public:
  // bool is_final = 2;
  void clear_is_final() ;
  bool is_final() const;
  void set_is_final(bool value);

  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);

  public:
  // float stability = 3;
  void clear_stability() ;
  float stability() const;
  void set_stability(float value);

  private:
  float _internal_stability() const;
  void _internal_set_stability(float value);

  public:
  // int32 channel_tag = 5;
  void clear_channel_tag() ;
  ::int32_t channel_tag() const;
  void set_channel_tag(::int32_t value);

  private:
  ::int32_t _internal_channel_tag() const;
  void _internal_set_channel_tag(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognitionResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamingRecognitionResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative > alternatives_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    ::google::protobuf::Duration* result_end_time_;
    bool is_final_;
    float stability_;
    ::int32_t channel_tag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class SpeechRecognitionResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.SpeechRecognitionResult) */ {
 public:
  inline SpeechRecognitionResult() : SpeechRecognitionResult(nullptr) {}
  ~SpeechRecognitionResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpeechRecognitionResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpeechRecognitionResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeechRecognitionResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpeechRecognitionResult(const SpeechRecognitionResult& from) : SpeechRecognitionResult(nullptr, from) {}
  inline SpeechRecognitionResult(SpeechRecognitionResult&& from) noexcept
      : SpeechRecognitionResult(nullptr, std::move(from)) {}
  inline SpeechRecognitionResult& operator=(const SpeechRecognitionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechRecognitionResult& operator=(SpeechRecognitionResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeechRecognitionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeechRecognitionResult* internal_default_instance() {
    return reinterpret_cast<const SpeechRecognitionResult*>(
        &_SpeechRecognitionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(SpeechRecognitionResult& a, SpeechRecognitionResult& b) { a.Swap(&b); }
  inline void Swap(SpeechRecognitionResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechRecognitionResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeechRecognitionResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpeechRecognitionResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeechRecognitionResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpeechRecognitionResult& from) { SpeechRecognitionResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpeechRecognitionResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.SpeechRecognitionResult"; }

 protected:
  explicit SpeechRecognitionResult(::google::protobuf::Arena* arena);
  SpeechRecognitionResult(::google::protobuf::Arena* arena, const SpeechRecognitionResult& from);
  SpeechRecognitionResult(::google::protobuf::Arena* arena, SpeechRecognitionResult&& from) noexcept
      : SpeechRecognitionResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAlternativesFieldNumber = 1,
    kLanguageCodeFieldNumber = 5,
    kResultEndTimeFieldNumber = 4,
    kChannelTagFieldNumber = 2,
  };
  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  int alternatives_size() const;
  private:
  int _internal_alternatives_size() const;

  public:
  void clear_alternatives() ;
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* mutable_alternatives(int index);
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>* mutable_alternatives();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>& _internal_alternatives() const;
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>* _internal_mutable_alternatives();
  public:
  const ::google::cloud::speech::v1::SpeechRecognitionAlternative& alternatives(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* add_alternatives();
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>& alternatives() const;
  // string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_language_code() ;
  const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language_code(Arg_&& arg, Args_... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* value);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // .google.protobuf.Duration result_end_time = 4;
  bool has_result_end_time() const;
  void clear_result_end_time() ;
  const ::google::protobuf::Duration& result_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_result_end_time();
  ::google::protobuf::Duration* mutable_result_end_time();
  void set_allocated_result_end_time(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_result_end_time(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_result_end_time();

  private:
  const ::google::protobuf::Duration& _internal_result_end_time() const;
  ::google::protobuf::Duration* _internal_mutable_result_end_time();

  public:
  // int32 channel_tag = 2;
  void clear_channel_tag() ;
  ::int32_t channel_tag() const;
  void set_channel_tag(::int32_t value);

  private:
  ::int32_t _internal_channel_tag() const;
  void _internal_set_channel_tag(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechRecognitionResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 2,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpeechRecognitionResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionAlternative > alternatives_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    ::google::protobuf::Duration* result_end_time_;
    ::int32_t channel_tag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognitionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognitionConfig) */ {
 public:
  inline RecognitionConfig() : RecognitionConfig(nullptr) {}
  ~RecognitionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognitionConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognitionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognitionConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognitionConfig(const RecognitionConfig& from) : RecognitionConfig(nullptr, from) {}
  inline RecognitionConfig(RecognitionConfig&& from) noexcept
      : RecognitionConfig(nullptr, std::move(from)) {}
  inline RecognitionConfig& operator=(const RecognitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognitionConfig& operator=(RecognitionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognitionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognitionConfig* internal_default_instance() {
    return reinterpret_cast<const RecognitionConfig*>(
        &_RecognitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RecognitionConfig& a, RecognitionConfig& b) { a.Swap(&b); }
  inline void Swap(RecognitionConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognitionConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognitionConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognitionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognitionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognitionConfig& from) { RecognitionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognitionConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.RecognitionConfig"; }

 protected:
  explicit RecognitionConfig(::google::protobuf::Arena* arena);
  RecognitionConfig(::google::protobuf::Arena* arena, const RecognitionConfig& from);
  RecognitionConfig(::google::protobuf::Arena* arena, RecognitionConfig&& from) noexcept
      : RecognitionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using AudioEncoding = RecognitionConfig_AudioEncoding;
  static constexpr AudioEncoding ENCODING_UNSPECIFIED = RecognitionConfig_AudioEncoding_ENCODING_UNSPECIFIED;
  static constexpr AudioEncoding LINEAR16 = RecognitionConfig_AudioEncoding_LINEAR16;
  static constexpr AudioEncoding FLAC = RecognitionConfig_AudioEncoding_FLAC;
  static constexpr AudioEncoding MULAW = RecognitionConfig_AudioEncoding_MULAW;
  static constexpr AudioEncoding AMR = RecognitionConfig_AudioEncoding_AMR;
  static constexpr AudioEncoding AMR_WB = RecognitionConfig_AudioEncoding_AMR_WB;
  static constexpr AudioEncoding OGG_OPUS = RecognitionConfig_AudioEncoding_OGG_OPUS;
  static constexpr AudioEncoding SPEEX_WITH_HEADER_BYTE = RecognitionConfig_AudioEncoding_SPEEX_WITH_HEADER_BYTE;
  static constexpr AudioEncoding MP3 = RecognitionConfig_AudioEncoding_MP3;
  static constexpr AudioEncoding WEBM_OPUS = RecognitionConfig_AudioEncoding_WEBM_OPUS;
  static inline bool AudioEncoding_IsValid(int value) {
    return RecognitionConfig_AudioEncoding_IsValid(value);
  }
  static constexpr AudioEncoding AudioEncoding_MIN = RecognitionConfig_AudioEncoding_AudioEncoding_MIN;
  static constexpr AudioEncoding AudioEncoding_MAX = RecognitionConfig_AudioEncoding_AudioEncoding_MAX;
  static constexpr int AudioEncoding_ARRAYSIZE = RecognitionConfig_AudioEncoding_AudioEncoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AudioEncoding_descriptor() {
    return RecognitionConfig_AudioEncoding_descriptor();
  }
  template <typename T>
  static inline const std::string& AudioEncoding_Name(T value) {
    return RecognitionConfig_AudioEncoding_Name(value);
  }
  static inline bool AudioEncoding_Parse(absl::string_view name, AudioEncoding* value) {
    return RecognitionConfig_AudioEncoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSpeechContextsFieldNumber = 6,
    kAlternativeLanguageCodesFieldNumber = 18,
    kLanguageCodeFieldNumber = 3,
    kModelFieldNumber = 13,
    kMetadataFieldNumber = 9,
    kDiarizationConfigFieldNumber = 19,
    kAdaptationFieldNumber = 20,
    kEnableSpokenPunctuationFieldNumber = 22,
    kEnableSpokenEmojisFieldNumber = 23,
    kTranscriptNormalizationFieldNumber = 24,
    kEncodingFieldNumber = 1,
    kSampleRateHertzFieldNumber = 2,
    kMaxAlternativesFieldNumber = 4,
    kAudioChannelCountFieldNumber = 7,
    kEnableSeparateRecognitionPerChannelFieldNumber = 12,
    kProfanityFilterFieldNumber = 5,
    kEnableWordTimeOffsetsFieldNumber = 8,
    kEnableWordConfidenceFieldNumber = 15,
    kEnableAutomaticPunctuationFieldNumber = 11,
    kUseEnhancedFieldNumber = 14,
  };
  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  int speech_contexts_size() const;
  private:
  int _internal_speech_contexts_size() const;

  public:
  void clear_speech_contexts() ;
  ::google::cloud::speech::v1::SpeechContext* mutable_speech_contexts(int index);
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechContext>* mutable_speech_contexts();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechContext>& _internal_speech_contexts() const;
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechContext>* _internal_mutable_speech_contexts();
  public:
  const ::google::cloud::speech::v1::SpeechContext& speech_contexts(int index) const;
  ::google::cloud::speech::v1::SpeechContext* add_speech_contexts();
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechContext>& speech_contexts() const;
  // repeated string alternative_language_codes = 18;
  int alternative_language_codes_size() const;
  private:
  int _internal_alternative_language_codes_size() const;

  public:
  void clear_alternative_language_codes() ;
  const std::string& alternative_language_codes(int index) const;
  std::string* mutable_alternative_language_codes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alternative_language_codes(int index, Arg_&& value, Args_... args);
  std::string* add_alternative_language_codes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_alternative_language_codes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& alternative_language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_alternative_language_codes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_alternative_language_codes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_alternative_language_codes();

  public:
  // string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_language_code() ;
  const std::string& language_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language_code(Arg_&& arg, Args_... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* value);

  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(
      const std::string& value);
  std::string* _internal_mutable_language_code();

  public:
  // string model = 13;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* value);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // .google.cloud.speech.v1.RecognitionMetadata metadata = 9;
  bool has_metadata() const;
  void clear_metadata() ;
  const ::google::cloud::speech::v1::RecognitionMetadata& metadata() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionMetadata* release_metadata();
  ::google::cloud::speech::v1::RecognitionMetadata* mutable_metadata();
  void set_allocated_metadata(::google::cloud::speech::v1::RecognitionMetadata* value);
  void unsafe_arena_set_allocated_metadata(::google::cloud::speech::v1::RecognitionMetadata* value);
  ::google::cloud::speech::v1::RecognitionMetadata* unsafe_arena_release_metadata();

  private:
  const ::google::cloud::speech::v1::RecognitionMetadata& _internal_metadata() const;
  ::google::cloud::speech::v1::RecognitionMetadata* _internal_mutable_metadata();

  public:
  // .google.cloud.speech.v1.SpeakerDiarizationConfig diarization_config = 19;
  bool has_diarization_config() const;
  void clear_diarization_config() ;
  const ::google::cloud::speech::v1::SpeakerDiarizationConfig& diarization_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::SpeakerDiarizationConfig* release_diarization_config();
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* mutable_diarization_config();
  void set_allocated_diarization_config(::google::cloud::speech::v1::SpeakerDiarizationConfig* value);
  void unsafe_arena_set_allocated_diarization_config(::google::cloud::speech::v1::SpeakerDiarizationConfig* value);
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* unsafe_arena_release_diarization_config();

  private:
  const ::google::cloud::speech::v1::SpeakerDiarizationConfig& _internal_diarization_config() const;
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* _internal_mutable_diarization_config();

  public:
  // .google.cloud.speech.v1.SpeechAdaptation adaptation = 20;
  bool has_adaptation() const;
  void clear_adaptation() ;
  const ::google::cloud::speech::v1::SpeechAdaptation& adaptation() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::SpeechAdaptation* release_adaptation();
  ::google::cloud::speech::v1::SpeechAdaptation* mutable_adaptation();
  void set_allocated_adaptation(::google::cloud::speech::v1::SpeechAdaptation* value);
  void unsafe_arena_set_allocated_adaptation(::google::cloud::speech::v1::SpeechAdaptation* value);
  ::google::cloud::speech::v1::SpeechAdaptation* unsafe_arena_release_adaptation();

  private:
  const ::google::cloud::speech::v1::SpeechAdaptation& _internal_adaptation() const;
  ::google::cloud::speech::v1::SpeechAdaptation* _internal_mutable_adaptation();

  public:
  // .google.protobuf.BoolValue enable_spoken_punctuation = 22;
  bool has_enable_spoken_punctuation() const;
  void clear_enable_spoken_punctuation() ;
  const ::google::protobuf::BoolValue& enable_spoken_punctuation() const;
  PROTOBUF_NODISCARD ::google::protobuf::BoolValue* release_enable_spoken_punctuation();
  ::google::protobuf::BoolValue* mutable_enable_spoken_punctuation();
  void set_allocated_enable_spoken_punctuation(::google::protobuf::BoolValue* value);
  void unsafe_arena_set_allocated_enable_spoken_punctuation(::google::protobuf::BoolValue* value);
  ::google::protobuf::BoolValue* unsafe_arena_release_enable_spoken_punctuation();

  private:
  const ::google::protobuf::BoolValue& _internal_enable_spoken_punctuation() const;
  ::google::protobuf::BoolValue* _internal_mutable_enable_spoken_punctuation();

  public:
  // .google.protobuf.BoolValue enable_spoken_emojis = 23;
  bool has_enable_spoken_emojis() const;
  void clear_enable_spoken_emojis() ;
  const ::google::protobuf::BoolValue& enable_spoken_emojis() const;
  PROTOBUF_NODISCARD ::google::protobuf::BoolValue* release_enable_spoken_emojis();
  ::google::protobuf::BoolValue* mutable_enable_spoken_emojis();
  void set_allocated_enable_spoken_emojis(::google::protobuf::BoolValue* value);
  void unsafe_arena_set_allocated_enable_spoken_emojis(::google::protobuf::BoolValue* value);
  ::google::protobuf::BoolValue* unsafe_arena_release_enable_spoken_emojis();

  private:
  const ::google::protobuf::BoolValue& _internal_enable_spoken_emojis() const;
  ::google::protobuf::BoolValue* _internal_mutable_enable_spoken_emojis();

  public:
  // .google.cloud.speech.v1.TranscriptNormalization transcript_normalization = 24 [(.google.api.field_behavior) = OPTIONAL];
  bool has_transcript_normalization() const;
  void clear_transcript_normalization() ;
  const ::google::cloud::speech::v1::TranscriptNormalization& transcript_normalization() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::TranscriptNormalization* release_transcript_normalization();
  ::google::cloud::speech::v1::TranscriptNormalization* mutable_transcript_normalization();
  void set_allocated_transcript_normalization(::google::cloud::speech::v1::TranscriptNormalization* value);
  void unsafe_arena_set_allocated_transcript_normalization(::google::cloud::speech::v1::TranscriptNormalization* value);
  ::google::cloud::speech::v1::TranscriptNormalization* unsafe_arena_release_transcript_normalization();

  private:
  const ::google::cloud::speech::v1::TranscriptNormalization& _internal_transcript_normalization() const;
  ::google::cloud::speech::v1::TranscriptNormalization* _internal_mutable_transcript_normalization();

  public:
  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  void clear_encoding() ;
  ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding encoding() const;
  void set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value);

  private:
  ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding _internal_encoding() const;
  void _internal_set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value);

  public:
  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz() ;
  ::int32_t sample_rate_hertz() const;
  void set_sample_rate_hertz(::int32_t value);

  private:
  ::int32_t _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::int32_t value);

  public:
  // int32 max_alternatives = 4;
  void clear_max_alternatives() ;
  ::int32_t max_alternatives() const;
  void set_max_alternatives(::int32_t value);

  private:
  ::int32_t _internal_max_alternatives() const;
  void _internal_set_max_alternatives(::int32_t value);

  public:
  // int32 audio_channel_count = 7;
  void clear_audio_channel_count() ;
  ::int32_t audio_channel_count() const;
  void set_audio_channel_count(::int32_t value);

  private:
  ::int32_t _internal_audio_channel_count() const;
  void _internal_set_audio_channel_count(::int32_t value);

  public:
  // bool enable_separate_recognition_per_channel = 12;
  void clear_enable_separate_recognition_per_channel() ;
  bool enable_separate_recognition_per_channel() const;
  void set_enable_separate_recognition_per_channel(bool value);

  private:
  bool _internal_enable_separate_recognition_per_channel() const;
  void _internal_set_enable_separate_recognition_per_channel(bool value);

  public:
  // bool profanity_filter = 5;
  void clear_profanity_filter() ;
  bool profanity_filter() const;
  void set_profanity_filter(bool value);

  private:
  bool _internal_profanity_filter() const;
  void _internal_set_profanity_filter(bool value);

  public:
  // bool enable_word_time_offsets = 8;
  void clear_enable_word_time_offsets() ;
  bool enable_word_time_offsets() const;
  void set_enable_word_time_offsets(bool value);

  private:
  bool _internal_enable_word_time_offsets() const;
  void _internal_set_enable_word_time_offsets(bool value);

  public:
  // bool enable_word_confidence = 15;
  void clear_enable_word_confidence() ;
  bool enable_word_confidence() const;
  void set_enable_word_confidence(bool value);

  private:
  bool _internal_enable_word_confidence() const;
  void _internal_set_enable_word_confidence(bool value);

  public:
  // bool enable_automatic_punctuation = 11;
  void clear_enable_automatic_punctuation() ;
  bool enable_automatic_punctuation() const;
  void set_enable_automatic_punctuation(bool value);

  private:
  bool _internal_enable_automatic_punctuation() const;
  void _internal_set_enable_automatic_punctuation(bool value);

  public:
  // bool use_enhanced = 14;
  void clear_use_enhanced() ;
  bool use_enhanced() const;
  void set_use_enhanced(bool value);

  private:
  bool _internal_use_enhanced() const;
  void _internal_set_use_enhanced(bool value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognitionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 20, 7,
      109, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognitionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechContext > speech_contexts_;
    ::google::protobuf::RepeatedPtrField<std::string> alternative_language_codes_;
    ::google::protobuf::internal::ArenaStringPtr language_code_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    ::google::cloud::speech::v1::RecognitionMetadata* metadata_;
    ::google::cloud::speech::v1::SpeakerDiarizationConfig* diarization_config_;
    ::google::cloud::speech::v1::SpeechAdaptation* adaptation_;
    ::google::protobuf::BoolValue* enable_spoken_punctuation_;
    ::google::protobuf::BoolValue* enable_spoken_emojis_;
    ::google::cloud::speech::v1::TranscriptNormalization* transcript_normalization_;
    int encoding_;
    ::int32_t sample_rate_hertz_;
    ::int32_t max_alternatives_;
    ::int32_t audio_channel_count_;
    bool enable_separate_recognition_per_channel_;
    bool profanity_filter_;
    bool enable_word_time_offsets_;
    bool enable_word_confidence_;
    bool enable_automatic_punctuation_;
    bool use_enhanced_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognizeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognizeResponse) */ {
 public:
  inline StreamingRecognizeResponse() : StreamingRecognizeResponse(nullptr) {}
  ~StreamingRecognizeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamingRecognizeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamingRecognizeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingRecognizeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamingRecognizeResponse(const StreamingRecognizeResponse& from) : StreamingRecognizeResponse(nullptr, from) {}
  inline StreamingRecognizeResponse(StreamingRecognizeResponse&& from) noexcept
      : StreamingRecognizeResponse(nullptr, std::move(from)) {}
  inline StreamingRecognizeResponse& operator=(const StreamingRecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognizeResponse& operator=(StreamingRecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognizeResponse*>(
        &_StreamingRecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(StreamingRecognizeResponse& a, StreamingRecognizeResponse& b) { a.Swap(&b); }
  inline void Swap(StreamingRecognizeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognizeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognizeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamingRecognizeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingRecognizeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamingRecognizeResponse& from) { StreamingRecognizeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamingRecognizeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.StreamingRecognizeResponse"; }

 protected:
  explicit StreamingRecognizeResponse(::google::protobuf::Arena* arena);
  StreamingRecognizeResponse(::google::protobuf::Arena* arena, const StreamingRecognizeResponse& from);
  StreamingRecognizeResponse(::google::protobuf::Arena* arena, StreamingRecognizeResponse&& from) noexcept
      : StreamingRecognizeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using SpeechEventType = StreamingRecognizeResponse_SpeechEventType;
  static constexpr SpeechEventType SPEECH_EVENT_UNSPECIFIED = StreamingRecognizeResponse_SpeechEventType_SPEECH_EVENT_UNSPECIFIED;
  static constexpr SpeechEventType END_OF_SINGLE_UTTERANCE = StreamingRecognizeResponse_SpeechEventType_END_OF_SINGLE_UTTERANCE;
  static constexpr SpeechEventType SPEECH_ACTIVITY_BEGIN = StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_BEGIN;
  static constexpr SpeechEventType SPEECH_ACTIVITY_END = StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_END;
  static constexpr SpeechEventType SPEECH_ACTIVITY_TIMEOUT = StreamingRecognizeResponse_SpeechEventType_SPEECH_ACTIVITY_TIMEOUT;
  static inline bool SpeechEventType_IsValid(int value) {
    return StreamingRecognizeResponse_SpeechEventType_IsValid(value);
  }
  static constexpr SpeechEventType SpeechEventType_MIN = StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MIN;
  static constexpr SpeechEventType SpeechEventType_MAX = StreamingRecognizeResponse_SpeechEventType_SpeechEventType_MAX;
  static constexpr int SpeechEventType_ARRAYSIZE = StreamingRecognizeResponse_SpeechEventType_SpeechEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SpeechEventType_descriptor() {
    return StreamingRecognizeResponse_SpeechEventType_descriptor();
  }
  template <typename T>
  static inline const std::string& SpeechEventType_Name(T value) {
    return StreamingRecognizeResponse_SpeechEventType_Name(value);
  }
  static inline bool SpeechEventType_Parse(absl::string_view name, SpeechEventType* value) {
    return StreamingRecognizeResponse_SpeechEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultsFieldNumber = 2,
    kErrorFieldNumber = 1,
    kTotalBilledTimeFieldNumber = 5,
    kSpeechEventTimeFieldNumber = 8,
    kSpeechAdaptationInfoFieldNumber = 9,
    kRequestIdFieldNumber = 10,
    kSpeechEventTypeFieldNumber = 4,
  };
  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  ::google::cloud::speech::v1::StreamingRecognitionResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::StreamingRecognitionResult>* mutable_results();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::StreamingRecognitionResult>& _internal_results() const;
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::StreamingRecognitionResult>* _internal_mutable_results();
  public:
  const ::google::cloud::speech::v1::StreamingRecognitionResult& results(int index) const;
  ::google::cloud::speech::v1::StreamingRecognitionResult* add_results();
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::StreamingRecognitionResult>& results() const;
  // .google.rpc.Status error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::google::rpc::Status& error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* value);
  void unsafe_arena_set_allocated_error(::google::rpc::Status* value);
  ::google::rpc::Status* unsafe_arena_release_error();

  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();

  public:
  // .google.protobuf.Duration total_billed_time = 5;
  bool has_total_billed_time() const;
  void clear_total_billed_time() ;
  const ::google::protobuf::Duration& total_billed_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_total_billed_time();
  ::google::protobuf::Duration* mutable_total_billed_time();
  void set_allocated_total_billed_time(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_total_billed_time(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_total_billed_time();

  private:
  const ::google::protobuf::Duration& _internal_total_billed_time() const;
  ::google::protobuf::Duration* _internal_mutable_total_billed_time();

  public:
  // .google.protobuf.Duration speech_event_time = 8;
  bool has_speech_event_time() const;
  void clear_speech_event_time() ;
  const ::google::protobuf::Duration& speech_event_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_speech_event_time();
  ::google::protobuf::Duration* mutable_speech_event_time();
  void set_allocated_speech_event_time(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_speech_event_time(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_speech_event_time();

  private:
  const ::google::protobuf::Duration& _internal_speech_event_time() const;
  ::google::protobuf::Duration* _internal_mutable_speech_event_time();

  public:
  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 9;
  bool has_speech_adaptation_info() const;
  void clear_speech_adaptation_info() ;
  const ::google::cloud::speech::v1::SpeechAdaptationInfo& speech_adaptation_info() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::SpeechAdaptationInfo* release_speech_adaptation_info();
  ::google::cloud::speech::v1::SpeechAdaptationInfo* mutable_speech_adaptation_info();
  void set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value);
  void unsafe_arena_set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value);
  ::google::cloud::speech::v1::SpeechAdaptationInfo* unsafe_arena_release_speech_adaptation_info();

  private:
  const ::google::cloud::speech::v1::SpeechAdaptationInfo& _internal_speech_adaptation_info() const;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* _internal_mutable_speech_adaptation_info();

  public:
  // int64 request_id = 10;
  void clear_request_id() ;
  ::int64_t request_id() const;
  void set_request_id(::int64_t value);

  private:
  ::int64_t _internal_request_id() const;
  void _internal_set_request_id(::int64_t value);

  public:
  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  void clear_speech_event_type() ;
  ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType speech_event_type() const;
  void set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value);

  private:
  ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType _internal_speech_event_type() const;
  void _internal_set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognizeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamingRecognizeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::StreamingRecognitionResult > results_;
    ::google::rpc::Status* error_;
    ::google::protobuf::Duration* total_billed_time_;
    ::google::protobuf::Duration* speech_event_time_;
    ::google::cloud::speech::v1::SpeechAdaptationInfo* speech_adaptation_info_;
    ::int64_t request_id_;
    int speech_event_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognitionConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognitionConfig) */ {
 public:
  inline StreamingRecognitionConfig() : StreamingRecognitionConfig(nullptr) {}
  ~StreamingRecognitionConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamingRecognitionConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamingRecognitionConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingRecognitionConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamingRecognitionConfig(const StreamingRecognitionConfig& from) : StreamingRecognitionConfig(nullptr, from) {}
  inline StreamingRecognitionConfig(StreamingRecognitionConfig&& from) noexcept
      : StreamingRecognitionConfig(nullptr, std::move(from)) {}
  inline StreamingRecognitionConfig& operator=(const StreamingRecognitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognitionConfig& operator=(StreamingRecognitionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognitionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingRecognitionConfig* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognitionConfig*>(
        &_StreamingRecognitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(StreamingRecognitionConfig& a, StreamingRecognitionConfig& b) { a.Swap(&b); }
  inline void Swap(StreamingRecognitionConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognitionConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognitionConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamingRecognitionConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingRecognitionConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamingRecognitionConfig& from) { StreamingRecognitionConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamingRecognitionConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.StreamingRecognitionConfig"; }

 protected:
  explicit StreamingRecognitionConfig(::google::protobuf::Arena* arena);
  StreamingRecognitionConfig(::google::protobuf::Arena* arena, const StreamingRecognitionConfig& from);
  StreamingRecognitionConfig(::google::protobuf::Arena* arena, StreamingRecognitionConfig&& from) noexcept
      : StreamingRecognitionConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using VoiceActivityTimeout = StreamingRecognitionConfig_VoiceActivityTimeout;

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
    kVoiceActivityTimeoutFieldNumber = 6,
    kSingleUtteranceFieldNumber = 2,
    kInterimResultsFieldNumber = 3,
    kEnableVoiceActivityEventsFieldNumber = 5,
  };
  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_config() const;
  void clear_config() ;
  const ::google::cloud::speech::v1::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionConfig* release_config();
  ::google::cloud::speech::v1::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value);
  void unsafe_arena_set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value);
  ::google::cloud::speech::v1::RecognitionConfig* unsafe_arena_release_config();

  private:
  const ::google::cloud::speech::v1::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* _internal_mutable_config();

  public:
  // .google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout voice_activity_timeout = 6;
  bool has_voice_activity_timeout() const;
  void clear_voice_activity_timeout() ;
  const ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout& voice_activity_timeout() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* release_voice_activity_timeout();
  ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* mutable_voice_activity_timeout();
  void set_allocated_voice_activity_timeout(::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* value);
  void unsafe_arena_set_allocated_voice_activity_timeout(::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* value);
  ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* unsafe_arena_release_voice_activity_timeout();

  private:
  const ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout& _internal_voice_activity_timeout() const;
  ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* _internal_mutable_voice_activity_timeout();

  public:
  // bool single_utterance = 2;
  void clear_single_utterance() ;
  bool single_utterance() const;
  void set_single_utterance(bool value);

  private:
  bool _internal_single_utterance() const;
  void _internal_set_single_utterance(bool value);

  public:
  // bool interim_results = 3;
  void clear_interim_results() ;
  bool interim_results() const;
  void set_interim_results(bool value);

  private:
  bool _internal_interim_results() const;
  void _internal_set_interim_results(bool value);

  public:
  // bool enable_voice_activity_events = 5;
  void clear_enable_voice_activity_events() ;
  bool enable_voice_activity_events() const;
  void set_enable_voice_activity_events(bool value);

  private:
  bool _internal_enable_voice_activity_events() const;
  void _internal_set_enable_voice_activity_events(bool value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognitionConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamingRecognitionConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::cloud::speech::v1::RecognitionConfig* config_;
    ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* voice_activity_timeout_;
    bool single_utterance_;
    bool interim_results_;
    bool enable_voice_activity_events_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognizeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognizeResponse) */ {
 public:
  inline RecognizeResponse() : RecognizeResponse(nullptr) {}
  ~RecognizeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognizeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognizeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognizeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognizeResponse(const RecognizeResponse& from) : RecognizeResponse(nullptr, from) {}
  inline RecognizeResponse(RecognizeResponse&& from) noexcept
      : RecognizeResponse(nullptr, std::move(from)) {}
  inline RecognizeResponse& operator=(const RecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeResponse& operator=(RecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const RecognizeResponse*>(
        &_RecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(RecognizeResponse& a, RecognizeResponse& b) { a.Swap(&b); }
  inline void Swap(RecognizeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognizeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognizeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognizeResponse& from) { RecognizeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognizeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.RecognizeResponse"; }

 protected:
  explicit RecognizeResponse(::google::protobuf::Arena* arena);
  RecognizeResponse(::google::protobuf::Arena* arena, const RecognizeResponse& from);
  RecognizeResponse(::google::protobuf::Arena* arena, RecognizeResponse&& from) noexcept
      : RecognizeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultsFieldNumber = 2,
    kTotalBilledTimeFieldNumber = 3,
    kSpeechAdaptationInfoFieldNumber = 7,
    kRequestIdFieldNumber = 8,
  };
  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  ::google::cloud::speech::v1::SpeechRecognitionResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>* mutable_results();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>& _internal_results() const;
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>* _internal_mutable_results();
  public:
  const ::google::cloud::speech::v1::SpeechRecognitionResult& results(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionResult* add_results();
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>& results() const;
  // .google.protobuf.Duration total_billed_time = 3;
  bool has_total_billed_time() const;
  void clear_total_billed_time() ;
  const ::google::protobuf::Duration& total_billed_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_total_billed_time();
  ::google::protobuf::Duration* mutable_total_billed_time();
  void set_allocated_total_billed_time(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_total_billed_time(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_total_billed_time();

  private:
  const ::google::protobuf::Duration& _internal_total_billed_time() const;
  ::google::protobuf::Duration* _internal_mutable_total_billed_time();

  public:
  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 7;
  bool has_speech_adaptation_info() const;
  void clear_speech_adaptation_info() ;
  const ::google::cloud::speech::v1::SpeechAdaptationInfo& speech_adaptation_info() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::SpeechAdaptationInfo* release_speech_adaptation_info();
  ::google::cloud::speech::v1::SpeechAdaptationInfo* mutable_speech_adaptation_info();
  void set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value);
  void unsafe_arena_set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value);
  ::google::cloud::speech::v1::SpeechAdaptationInfo* unsafe_arena_release_speech_adaptation_info();

  private:
  const ::google::cloud::speech::v1::SpeechAdaptationInfo& _internal_speech_adaptation_info() const;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* _internal_mutable_speech_adaptation_info();

  public:
  // int64 request_id = 8;
  void clear_request_id() ;
  ::int64_t request_id() const;
  void set_request_id(::int64_t value);

  private:
  ::int64_t _internal_request_id() const;
  void _internal_set_request_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognizeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognizeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult > results_;
    ::google::protobuf::Duration* total_billed_time_;
    ::google::cloud::speech::v1::SpeechAdaptationInfo* speech_adaptation_info_;
    ::int64_t request_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class RecognizeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.RecognizeRequest) */ {
 public:
  inline RecognizeRequest() : RecognizeRequest(nullptr) {}
  ~RecognizeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognizeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognizeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognizeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognizeRequest(const RecognizeRequest& from) : RecognizeRequest(nullptr, from) {}
  inline RecognizeRequest(RecognizeRequest&& from) noexcept
      : RecognizeRequest(nullptr, std::move(from)) {}
  inline RecognizeRequest& operator=(const RecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeRequest& operator=(RecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const RecognizeRequest*>(
        &_RecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RecognizeRequest& a, RecognizeRequest& b) { a.Swap(&b); }
  inline void Swap(RecognizeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognizeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognizeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognizeRequest& from) { RecognizeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognizeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.RecognizeRequest"; }

 protected:
  explicit RecognizeRequest(::google::protobuf::Arena* arena);
  RecognizeRequest(::google::protobuf::Arena* arena, const RecognizeRequest& from);
  RecognizeRequest(::google::protobuf::Arena* arena, RecognizeRequest&& from) noexcept
      : RecognizeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
    kAudioFieldNumber = 2,
  };
  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_config() const;
  void clear_config() ;
  const ::google::cloud::speech::v1::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionConfig* release_config();
  ::google::cloud::speech::v1::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value);
  void unsafe_arena_set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value);
  ::google::cloud::speech::v1::RecognitionConfig* unsafe_arena_release_config();

  private:
  const ::google::cloud::speech::v1::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* _internal_mutable_config();

  public:
  // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_audio() const;
  void clear_audio() ;
  const ::google::cloud::speech::v1::RecognitionAudio& audio() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionAudio* release_audio();
  ::google::cloud::speech::v1::RecognitionAudio* mutable_audio();
  void set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* value);
  void unsafe_arena_set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* value);
  ::google::cloud::speech::v1::RecognitionAudio* unsafe_arena_release_audio();

  private:
  const ::google::cloud::speech::v1::RecognitionAudio& _internal_audio() const;
  ::google::cloud::speech::v1::RecognitionAudio* _internal_mutable_audio();

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.RecognizeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognizeRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::cloud::speech::v1::RecognitionConfig* config_;
    ::google::cloud::speech::v1::RecognitionAudio* audio_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class LongRunningRecognizeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.LongRunningRecognizeResponse) */ {
 public:
  inline LongRunningRecognizeResponse() : LongRunningRecognizeResponse(nullptr) {}
  ~LongRunningRecognizeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LongRunningRecognizeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LongRunningRecognizeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LongRunningRecognizeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LongRunningRecognizeResponse(const LongRunningRecognizeResponse& from) : LongRunningRecognizeResponse(nullptr, from) {}
  inline LongRunningRecognizeResponse(LongRunningRecognizeResponse&& from) noexcept
      : LongRunningRecognizeResponse(nullptr, std::move(from)) {}
  inline LongRunningRecognizeResponse& operator=(const LongRunningRecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongRunningRecognizeResponse& operator=(LongRunningRecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LongRunningRecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongRunningRecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const LongRunningRecognizeResponse*>(
        &_LongRunningRecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(LongRunningRecognizeResponse& a, LongRunningRecognizeResponse& b) { a.Swap(&b); }
  inline void Swap(LongRunningRecognizeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongRunningRecognizeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LongRunningRecognizeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LongRunningRecognizeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LongRunningRecognizeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LongRunningRecognizeResponse& from) { LongRunningRecognizeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LongRunningRecognizeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.LongRunningRecognizeResponse"; }

 protected:
  explicit LongRunningRecognizeResponse(::google::protobuf::Arena* arena);
  LongRunningRecognizeResponse(::google::protobuf::Arena* arena, const LongRunningRecognizeResponse& from);
  LongRunningRecognizeResponse(::google::protobuf::Arena* arena, LongRunningRecognizeResponse&& from) noexcept
      : LongRunningRecognizeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultsFieldNumber = 2,
    kTotalBilledTimeFieldNumber = 3,
    kOutputConfigFieldNumber = 6,
    kOutputErrorFieldNumber = 7,
    kSpeechAdaptationInfoFieldNumber = 8,
    kRequestIdFieldNumber = 9,
  };
  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  ::google::cloud::speech::v1::SpeechRecognitionResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>* mutable_results();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>& _internal_results() const;
  ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>* _internal_mutable_results();
  public:
  const ::google::cloud::speech::v1::SpeechRecognitionResult& results(int index) const;
  ::google::cloud::speech::v1::SpeechRecognitionResult* add_results();
  const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>& results() const;
  // .google.protobuf.Duration total_billed_time = 3;
  bool has_total_billed_time() const;
  void clear_total_billed_time() ;
  const ::google::protobuf::Duration& total_billed_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_total_billed_time();
  ::google::protobuf::Duration* mutable_total_billed_time();
  void set_allocated_total_billed_time(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_total_billed_time(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_total_billed_time();

  private:
  const ::google::protobuf::Duration& _internal_total_billed_time() const;
  ::google::protobuf::Duration* _internal_mutable_total_billed_time();

  public:
  // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 6;
  bool has_output_config() const;
  void clear_output_config() ;
  const ::google::cloud::speech::v1::TranscriptOutputConfig& output_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::TranscriptOutputConfig* release_output_config();
  ::google::cloud::speech::v1::TranscriptOutputConfig* mutable_output_config();
  void set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* value);
  void unsafe_arena_set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* value);
  ::google::cloud::speech::v1::TranscriptOutputConfig* unsafe_arena_release_output_config();

  private:
  const ::google::cloud::speech::v1::TranscriptOutputConfig& _internal_output_config() const;
  ::google::cloud::speech::v1::TranscriptOutputConfig* _internal_mutable_output_config();

  public:
  // .google.rpc.Status output_error = 7;
  bool has_output_error() const;
  void clear_output_error() ;
  const ::google::rpc::Status& output_error() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_output_error();
  ::google::rpc::Status* mutable_output_error();
  void set_allocated_output_error(::google::rpc::Status* value);
  void unsafe_arena_set_allocated_output_error(::google::rpc::Status* value);
  ::google::rpc::Status* unsafe_arena_release_output_error();

  private:
  const ::google::rpc::Status& _internal_output_error() const;
  ::google::rpc::Status* _internal_mutable_output_error();

  public:
  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 8;
  bool has_speech_adaptation_info() const;
  void clear_speech_adaptation_info() ;
  const ::google::cloud::speech::v1::SpeechAdaptationInfo& speech_adaptation_info() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::SpeechAdaptationInfo* release_speech_adaptation_info();
  ::google::cloud::speech::v1::SpeechAdaptationInfo* mutable_speech_adaptation_info();
  void set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value);
  void unsafe_arena_set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value);
  ::google::cloud::speech::v1::SpeechAdaptationInfo* unsafe_arena_release_speech_adaptation_info();

  private:
  const ::google::cloud::speech::v1::SpeechAdaptationInfo& _internal_speech_adaptation_info() const;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* _internal_mutable_speech_adaptation_info();

  public:
  // int64 request_id = 9;
  void clear_request_id() ;
  ::int64_t request_id() const;
  void set_request_id(::int64_t value);

  private:
  ::int64_t _internal_request_id() const;
  void _internal_set_request_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 5,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LongRunningRecognizeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::cloud::speech::v1::SpeechRecognitionResult > results_;
    ::google::protobuf::Duration* total_billed_time_;
    ::google::cloud::speech::v1::TranscriptOutputConfig* output_config_;
    ::google::rpc::Status* output_error_;
    ::google::cloud::speech::v1::SpeechAdaptationInfo* speech_adaptation_info_;
    ::int64_t request_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class LongRunningRecognizeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.LongRunningRecognizeRequest) */ {
 public:
  inline LongRunningRecognizeRequest() : LongRunningRecognizeRequest(nullptr) {}
  ~LongRunningRecognizeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LongRunningRecognizeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LongRunningRecognizeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LongRunningRecognizeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LongRunningRecognizeRequest(const LongRunningRecognizeRequest& from) : LongRunningRecognizeRequest(nullptr, from) {}
  inline LongRunningRecognizeRequest(LongRunningRecognizeRequest&& from) noexcept
      : LongRunningRecognizeRequest(nullptr, std::move(from)) {}
  inline LongRunningRecognizeRequest& operator=(const LongRunningRecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongRunningRecognizeRequest& operator=(LongRunningRecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LongRunningRecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongRunningRecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const LongRunningRecognizeRequest*>(
        &_LongRunningRecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(LongRunningRecognizeRequest& a, LongRunningRecognizeRequest& b) { a.Swap(&b); }
  inline void Swap(LongRunningRecognizeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongRunningRecognizeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LongRunningRecognizeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LongRunningRecognizeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LongRunningRecognizeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LongRunningRecognizeRequest& from) { LongRunningRecognizeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LongRunningRecognizeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.LongRunningRecognizeRequest"; }

 protected:
  explicit LongRunningRecognizeRequest(::google::protobuf::Arena* arena);
  LongRunningRecognizeRequest(::google::protobuf::Arena* arena, const LongRunningRecognizeRequest& from);
  LongRunningRecognizeRequest(::google::protobuf::Arena* arena, LongRunningRecognizeRequest&& from) noexcept
      : LongRunningRecognizeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
    kAudioFieldNumber = 2,
    kOutputConfigFieldNumber = 4,
  };
  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_config() const;
  void clear_config() ;
  const ::google::cloud::speech::v1::RecognitionConfig& config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionConfig* release_config();
  ::google::cloud::speech::v1::RecognitionConfig* mutable_config();
  void set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value);
  void unsafe_arena_set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value);
  ::google::cloud::speech::v1::RecognitionConfig* unsafe_arena_release_config();

  private:
  const ::google::cloud::speech::v1::RecognitionConfig& _internal_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* _internal_mutable_config();

  public:
  // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_audio() const;
  void clear_audio() ;
  const ::google::cloud::speech::v1::RecognitionAudio& audio() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::RecognitionAudio* release_audio();
  ::google::cloud::speech::v1::RecognitionAudio* mutable_audio();
  void set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* value);
  void unsafe_arena_set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* value);
  ::google::cloud::speech::v1::RecognitionAudio* unsafe_arena_release_audio();

  private:
  const ::google::cloud::speech::v1::RecognitionAudio& _internal_audio() const;
  ::google::cloud::speech::v1::RecognitionAudio* _internal_mutable_audio();

  public:
  // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 4 [(.google.api.field_behavior) = OPTIONAL];
  bool has_output_config() const;
  void clear_output_config() ;
  const ::google::cloud::speech::v1::TranscriptOutputConfig& output_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::TranscriptOutputConfig* release_output_config();
  ::google::cloud::speech::v1::TranscriptOutputConfig* mutable_output_config();
  void set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* value);
  void unsafe_arena_set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* value);
  ::google::cloud::speech::v1::TranscriptOutputConfig* unsafe_arena_release_output_config();

  private:
  const ::google::cloud::speech::v1::TranscriptOutputConfig& _internal_output_config() const;
  ::google::cloud::speech::v1::TranscriptOutputConfig* _internal_mutable_output_config();

  public:
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.LongRunningRecognizeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LongRunningRecognizeRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::cloud::speech::v1::RecognitionConfig* config_;
    ::google::cloud::speech::v1::RecognitionAudio* audio_;
    ::google::cloud::speech::v1::TranscriptOutputConfig* output_config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};
// -------------------------------------------------------------------

class StreamingRecognizeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.cloud.speech.v1.StreamingRecognizeRequest) */ {
 public:
  inline StreamingRecognizeRequest() : StreamingRecognizeRequest(nullptr) {}
  ~StreamingRecognizeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamingRecognizeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamingRecognizeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingRecognizeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamingRecognizeRequest(const StreamingRecognizeRequest& from) : StreamingRecognizeRequest(nullptr, from) {}
  inline StreamingRecognizeRequest(StreamingRecognizeRequest&& from) noexcept
      : StreamingRecognizeRequest(nullptr, std::move(from)) {}
  inline StreamingRecognizeRequest& operator=(const StreamingRecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingRecognizeRequest& operator=(StreamingRecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingRecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  enum StreamingRequestCase {
    kStreamingConfig = 1,
    kAudioContent = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };
  static inline const StreamingRecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingRecognizeRequest*>(
        &_StreamingRecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(StreamingRecognizeRequest& a, StreamingRecognizeRequest& b) { a.Swap(&b); }
  inline void Swap(StreamingRecognizeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingRecognizeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingRecognizeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamingRecognizeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingRecognizeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamingRecognizeRequest& from) { StreamingRecognizeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamingRecognizeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "google.cloud.speech.v1.StreamingRecognizeRequest"; }

 protected:
  explicit StreamingRecognizeRequest(::google::protobuf::Arena* arena);
  StreamingRecognizeRequest(::google::protobuf::Arena* arena, const StreamingRecognizeRequest& from);
  StreamingRecognizeRequest(::google::protobuf::Arena* arena, StreamingRecognizeRequest&& from) noexcept
      : StreamingRecognizeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStreamingConfigFieldNumber = 1,
    kAudioContentFieldNumber = 2,
  };
  // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
  bool has_streaming_config() const;
  private:
  bool _internal_has_streaming_config() const;

  public:
  void clear_streaming_config() ;
  const ::google::cloud::speech::v1::StreamingRecognitionConfig& streaming_config() const;
  PROTOBUF_NODISCARD ::google::cloud::speech::v1::StreamingRecognitionConfig* release_streaming_config();
  ::google::cloud::speech::v1::StreamingRecognitionConfig* mutable_streaming_config();
  void set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* value);
  void unsafe_arena_set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* value);
  ::google::cloud::speech::v1::StreamingRecognitionConfig* unsafe_arena_release_streaming_config();

  private:
  const ::google::cloud::speech::v1::StreamingRecognitionConfig& _internal_streaming_config() const;
  ::google::cloud::speech::v1::StreamingRecognitionConfig* _internal_mutable_streaming_config();

  public:
  // bytes audio_content = 2;
  bool has_audio_content() const;
  void clear_audio_content() ;
  const std::string& audio_content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_content(Arg_&& arg, Args_... args);
  std::string* mutable_audio_content();
  PROTOBUF_NODISCARD std::string* release_audio_content();
  void set_allocated_audio_content(std::string* value);

  private:
  const std::string& _internal_audio_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_content(
      const std::string& value);
  std::string* _internal_mutable_audio_content();

  public:
  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognizeRequest)
 private:
  class _Internal;
  void set_has_streaming_config();
  void set_has_audio_content();
  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamingRecognizeRequest& from_msg);
    union StreamingRequestUnion {
      constexpr StreamingRequestUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config_;
      ::google::protobuf::internal::ArenaStringPtr audio_content_;
    } streaming_request_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cloud_5fspeech_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RecognizeRequest

// .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool RecognizeRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void RecognizeRequest::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::google::cloud::speech::v1::RecognitionConfig& RecognizeRequest::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig&>(::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionConfig& RecognizeRequest::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeRequest.config)
  return _internal_config();
}
inline void RecognizeRequest::unsafe_arena_set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeRequest.config)
}
inline ::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeRequest.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::RecognitionConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(p);
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v1::RecognitionConfig* RecognizeRequest::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeRequest.config)
  return _msg;
}
inline void RecognizeRequest::set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeRequest.config)
}

// .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool RecognizeRequest::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_ != nullptr);
  return value;
}
inline void RecognizeRequest::clear_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::google::cloud::speech::v1::RecognitionAudio& RecognizeRequest::_internal_audio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::RecognitionAudio* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionAudio&>(::google::cloud::speech::v1::_RecognitionAudio_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionAudio& RecognizeRequest::audio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeRequest.audio)
  return _internal_audio();
}
inline void RecognizeRequest::unsafe_arena_set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionAudio*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeRequest.audio)
}
inline ::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::RecognitionAudio* released = _impl_.audio_;
  _impl_.audio_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::unsafe_arena_release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeRequest.audio)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::RecognitionAudio* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::_internal_mutable_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::RecognitionAudio>(GetArena());
    _impl_.audio_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionAudio*>(p);
  }
  return _impl_.audio_;
}
inline ::google::cloud::speech::v1::RecognitionAudio* RecognizeRequest::mutable_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::cloud::speech::v1::RecognitionAudio* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeRequest.audio)
  return _msg;
}
inline void RecognizeRequest::set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.audio_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.audio_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionAudio*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeRequest.audio)
}

// -------------------------------------------------------------------

// LongRunningRecognizeRequest

// .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool LongRunningRecognizeRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void LongRunningRecognizeRequest::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::google::cloud::speech::v1::RecognitionConfig& LongRunningRecognizeRequest::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig&>(::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionConfig& LongRunningRecognizeRequest::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
  return _internal_config();
}
inline void LongRunningRecognizeRequest::unsafe_arena_set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
}
inline ::google::cloud::speech::v1::RecognitionConfig* LongRunningRecognizeRequest::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::RecognitionConfig* LongRunningRecognizeRequest::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeRequest.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* LongRunningRecognizeRequest::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::RecognitionConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(p);
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v1::RecognitionConfig* LongRunningRecognizeRequest::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
  return _msg;
}
inline void LongRunningRecognizeRequest::set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
}

// .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool LongRunningRecognizeRequest::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_ != nullptr);
  return value;
}
inline void LongRunningRecognizeRequest::clear_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::google::cloud::speech::v1::RecognitionAudio& LongRunningRecognizeRequest::_internal_audio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::RecognitionAudio* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionAudio&>(::google::cloud::speech::v1::_RecognitionAudio_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionAudio& LongRunningRecognizeRequest::audio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
  return _internal_audio();
}
inline void LongRunningRecognizeRequest::unsafe_arena_set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionAudio*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
}
inline ::google::cloud::speech::v1::RecognitionAudio* LongRunningRecognizeRequest::release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::RecognitionAudio* released = _impl_.audio_;
  _impl_.audio_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::RecognitionAudio* LongRunningRecognizeRequest::unsafe_arena_release_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::RecognitionAudio* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionAudio* LongRunningRecognizeRequest::_internal_mutable_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.audio_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::RecognitionAudio>(GetArena());
    _impl_.audio_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionAudio*>(p);
  }
  return _impl_.audio_;
}
inline ::google::cloud::speech::v1::RecognitionAudio* LongRunningRecognizeRequest::mutable_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::cloud::speech::v1::RecognitionAudio* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
  return _msg;
}
inline void LongRunningRecognizeRequest::set_allocated_audio(::google::cloud::speech::v1::RecognitionAudio* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.audio_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.audio_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionAudio*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
}

// .google.cloud.speech.v1.TranscriptOutputConfig output_config = 4 [(.google.api.field_behavior) = OPTIONAL];
inline bool LongRunningRecognizeRequest::has_output_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_config_ != nullptr);
  return value;
}
inline void LongRunningRecognizeRequest::clear_output_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_config_ != nullptr) _impl_.output_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::google::cloud::speech::v1::TranscriptOutputConfig& LongRunningRecognizeRequest::_internal_output_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::TranscriptOutputConfig* p = _impl_.output_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::TranscriptOutputConfig&>(::google::cloud::speech::v1::_TranscriptOutputConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::TranscriptOutputConfig& LongRunningRecognizeRequest::output_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
  return _internal_output_config();
}
inline void LongRunningRecognizeRequest::unsafe_arena_set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.output_config_);
  }
  _impl_.output_config_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptOutputConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeRequest::release_output_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::cloud::speech::v1::TranscriptOutputConfig* released = _impl_.output_config_;
  _impl_.output_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeRequest::unsafe_arena_release_output_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::cloud::speech::v1::TranscriptOutputConfig* temp = _impl_.output_config_;
  _impl_.output_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeRequest::_internal_mutable_output_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::TranscriptOutputConfig>(GetArena());
    _impl_.output_config_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptOutputConfig*>(p);
  }
  return _impl_.output_config_;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeRequest::mutable_output_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::cloud::speech::v1::TranscriptOutputConfig* _msg = _internal_mutable_output_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
  return _msg;
}
inline void LongRunningRecognizeRequest::set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.output_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.output_config_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptOutputConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.output_config)
}

// -------------------------------------------------------------------

// TranscriptOutputConfig

// string gcs_uri = 1;
inline bool TranscriptOutputConfig::has_gcs_uri() const {
  return output_type_case() == kGcsUri;
}
inline void TranscriptOutputConfig::set_has_gcs_uri() {
  _impl_._oneof_case_[0] = kGcsUri;
}
inline void TranscriptOutputConfig::clear_gcs_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (output_type_case() == kGcsUri) {
    _impl_.output_type_.gcs_uri_.Destroy();
    clear_has_output_type();
  }
}
inline const std::string& TranscriptOutputConfig::gcs_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
  return _internal_gcs_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TranscriptOutputConfig::set_gcs_uri(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (output_type_case() != kGcsUri) {
    clear_output_type();

    set_has_gcs_uri();
    _impl_.output_type_.gcs_uri_.InitDefault();
  }
  _impl_.output_type_.gcs_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
}
inline std::string* TranscriptOutputConfig::mutable_gcs_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gcs_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
  return _s;
}
inline const std::string& TranscriptOutputConfig::_internal_gcs_uri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (output_type_case() != kGcsUri) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.output_type_.gcs_uri_.Get();
}
inline void TranscriptOutputConfig::_internal_set_gcs_uri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (output_type_case() != kGcsUri) {
    clear_output_type();

    set_has_gcs_uri();
    _impl_.output_type_.gcs_uri_.InitDefault();
  }
  _impl_.output_type_.gcs_uri_.Set(value, GetArena());
}
inline std::string* TranscriptOutputConfig::_internal_mutable_gcs_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (output_type_case() != kGcsUri) {
    clear_output_type();

    set_has_gcs_uri();
    _impl_.output_type_.gcs_uri_.InitDefault();
  }
  return _impl_.output_type_.gcs_uri_.Mutable( GetArena());
}
inline std::string* TranscriptOutputConfig::release_gcs_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
  if (output_type_case() != kGcsUri) {
    return nullptr;
  }
  clear_has_output_type();
  return _impl_.output_type_.gcs_uri_.Release();
}
inline void TranscriptOutputConfig::set_allocated_gcs_uri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_output_type()) {
    clear_output_type();
  }
  if (value != nullptr) {
    set_has_gcs_uri();
    _impl_.output_type_.gcs_uri_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri)
}

inline bool TranscriptOutputConfig::has_output_type() const {
  return output_type_case() != OUTPUT_TYPE_NOT_SET;
}
inline void TranscriptOutputConfig::clear_has_output_type() {
  _impl_._oneof_case_[0] = OUTPUT_TYPE_NOT_SET;
}
inline TranscriptOutputConfig::OutputTypeCase TranscriptOutputConfig::output_type_case() const {
  return TranscriptOutputConfig::OutputTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingRecognizeRequest

// .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
inline bool StreamingRecognizeRequest::has_streaming_config() const {
  return streaming_request_case() == kStreamingConfig;
}
inline bool StreamingRecognizeRequest::_internal_has_streaming_config() const {
  return streaming_request_case() == kStreamingConfig;
}
inline void StreamingRecognizeRequest::set_has_streaming_config() {
  _impl_._oneof_case_[0] = kStreamingConfig;
}
inline void StreamingRecognizeRequest::clear_streaming_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (streaming_request_case() == kStreamingConfig) {
    if (GetArena() == nullptr) {
      delete _impl_.streaming_request_.streaming_config_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.streaming_request_.streaming_config_);
    }
    clear_has_streaming_request();
  }
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::release_streaming_config() {
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  if (streaming_request_case() == kStreamingConfig) {
    clear_has_streaming_request();
    auto* temp = _impl_.streaming_request_.streaming_config_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v1::StreamingRecognitionConfig& StreamingRecognizeRequest::_internal_streaming_config() const {
  return streaming_request_case() == kStreamingConfig ? *_impl_.streaming_request_.streaming_config_ : reinterpret_cast<::google::cloud::speech::v1::StreamingRecognitionConfig&>(::google::cloud::speech::v1::_StreamingRecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::StreamingRecognitionConfig& StreamingRecognizeRequest::streaming_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  return _internal_streaming_config();
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::unsafe_arena_release_streaming_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  if (streaming_request_case() == kStreamingConfig) {
    clear_has_streaming_request();
    auto* temp = _impl_.streaming_request_.streaming_config_;
    _impl_.streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingRecognizeRequest::unsafe_arena_set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_streaming_request();
  if (value) {
    set_has_streaming_config();
    _impl_.streaming_request_.streaming_config_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::_internal_mutable_streaming_config() {
  if (streaming_request_case() != kStreamingConfig) {
    clear_streaming_request();
    set_has_streaming_config();
    _impl_.streaming_request_.streaming_config_ =
        ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::StreamingRecognitionConfig>(GetArena());
  }
  return _impl_.streaming_request_.streaming_config_;
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig* StreamingRecognizeRequest::mutable_streaming_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::cloud::speech::v1::StreamingRecognitionConfig* _msg = _internal_mutable_streaming_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
  return _msg;
}

// bytes audio_content = 2;
inline bool StreamingRecognizeRequest::has_audio_content() const {
  return streaming_request_case() == kAudioContent;
}
inline void StreamingRecognizeRequest::set_has_audio_content() {
  _impl_._oneof_case_[0] = kAudioContent;
}
inline void StreamingRecognizeRequest::clear_audio_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (streaming_request_case() == kAudioContent) {
    _impl_.streaming_request_.audio_content_.Destroy();
    clear_has_streaming_request();
  }
}
inline const std::string& StreamingRecognizeRequest::audio_content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  return _internal_audio_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamingRecognizeRequest::set_audio_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (streaming_request_case() != kAudioContent) {
    clear_streaming_request();

    set_has_audio_content();
    _impl_.streaming_request_.audio_content_.InitDefault();
  }
  _impl_.streaming_request_.audio_content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}
inline std::string* StreamingRecognizeRequest::mutable_audio_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  return _s;
}
inline const std::string& StreamingRecognizeRequest::_internal_audio_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (streaming_request_case() != kAudioContent) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.streaming_request_.audio_content_.Get();
}
inline void StreamingRecognizeRequest::_internal_set_audio_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (streaming_request_case() != kAudioContent) {
    clear_streaming_request();

    set_has_audio_content();
    _impl_.streaming_request_.audio_content_.InitDefault();
  }
  _impl_.streaming_request_.audio_content_.Set(value, GetArena());
}
inline std::string* StreamingRecognizeRequest::_internal_mutable_audio_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (streaming_request_case() != kAudioContent) {
    clear_streaming_request();

    set_has_audio_content();
    _impl_.streaming_request_.audio_content_.InitDefault();
  }
  return _impl_.streaming_request_.audio_content_.Mutable( GetArena());
}
inline std::string* StreamingRecognizeRequest::release_audio_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
  if (streaming_request_case() != kAudioContent) {
    return nullptr;
  }
  clear_has_streaming_request();
  return _impl_.streaming_request_.audio_content_.Release();
}
inline void StreamingRecognizeRequest::set_allocated_audio_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
  if (value != nullptr) {
    set_has_audio_content();
    _impl_.streaming_request_.audio_content_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.audio_content)
}

inline bool StreamingRecognizeRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void StreamingRecognizeRequest::clear_has_streaming_request() {
  _impl_._oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline StreamingRecognizeRequest::StreamingRequestCase StreamingRecognizeRequest::streaming_request_case() const {
  return StreamingRecognizeRequest::StreamingRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingRecognitionConfig_VoiceActivityTimeout

// .google.protobuf.Duration speech_start_timeout = 1;
inline bool StreamingRecognitionConfig_VoiceActivityTimeout::has_speech_start_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speech_start_timeout_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& StreamingRecognitionConfig_VoiceActivityTimeout::_internal_speech_start_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.speech_start_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& StreamingRecognitionConfig_VoiceActivityTimeout::speech_start_timeout() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_start_timeout)
  return _internal_speech_start_timeout();
}
inline void StreamingRecognitionConfig_VoiceActivityTimeout::unsafe_arena_set_allocated_speech_start_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_start_timeout_);
  }
  _impl_.speech_start_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_start_timeout)
}
inline ::google::protobuf::Duration* StreamingRecognitionConfig_VoiceActivityTimeout::release_speech_start_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.speech_start_timeout_;
  _impl_.speech_start_timeout_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* StreamingRecognitionConfig_VoiceActivityTimeout::unsafe_arena_release_speech_start_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_start_timeout)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.speech_start_timeout_;
  _impl_.speech_start_timeout_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* StreamingRecognitionConfig_VoiceActivityTimeout::_internal_mutable_speech_start_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_start_timeout_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.speech_start_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.speech_start_timeout_;
}
inline ::google::protobuf::Duration* StreamingRecognitionConfig_VoiceActivityTimeout::mutable_speech_start_timeout() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_speech_start_timeout();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_start_timeout)
  return _msg;
}
inline void StreamingRecognitionConfig_VoiceActivityTimeout::set_allocated_speech_start_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_start_timeout_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.speech_start_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_start_timeout)
}

// .google.protobuf.Duration speech_end_timeout = 2;
inline bool StreamingRecognitionConfig_VoiceActivityTimeout::has_speech_end_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speech_end_timeout_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& StreamingRecognitionConfig_VoiceActivityTimeout::_internal_speech_end_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.speech_end_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& StreamingRecognitionConfig_VoiceActivityTimeout::speech_end_timeout() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_end_timeout)
  return _internal_speech_end_timeout();
}
inline void StreamingRecognitionConfig_VoiceActivityTimeout::unsafe_arena_set_allocated_speech_end_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_end_timeout_);
  }
  _impl_.speech_end_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_end_timeout)
}
inline ::google::protobuf::Duration* StreamingRecognitionConfig_VoiceActivityTimeout::release_speech_end_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.speech_end_timeout_;
  _impl_.speech_end_timeout_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* StreamingRecognitionConfig_VoiceActivityTimeout::unsafe_arena_release_speech_end_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_end_timeout)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.speech_end_timeout_;
  _impl_.speech_end_timeout_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* StreamingRecognitionConfig_VoiceActivityTimeout::_internal_mutable_speech_end_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_end_timeout_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.speech_end_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.speech_end_timeout_;
}
inline ::google::protobuf::Duration* StreamingRecognitionConfig_VoiceActivityTimeout::mutable_speech_end_timeout() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_speech_end_timeout();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_end_timeout)
  return _msg;
}
inline void StreamingRecognitionConfig_VoiceActivityTimeout::set_allocated_speech_end_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_end_timeout_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.speech_end_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout.speech_end_timeout)
}

// -------------------------------------------------------------------

// StreamingRecognitionConfig

// .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool StreamingRecognitionConfig::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void StreamingRecognitionConfig::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::google::cloud::speech::v1::RecognitionConfig& StreamingRecognitionConfig::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::RecognitionConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig&>(::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionConfig& StreamingRecognitionConfig::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  return _internal_config();
}
inline void StreamingRecognitionConfig::unsafe_arena_set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.config)
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionConfig.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::RecognitionConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(p);
  }
  return _impl_.config_;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingRecognitionConfig::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::cloud::speech::v1::RecognitionConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionConfig.config)
  return _msg;
}
inline void StreamingRecognitionConfig::set_allocated_config(::google::cloud::speech::v1::RecognitionConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.config)
}

// bool single_utterance = 2;
inline void StreamingRecognitionConfig::clear_single_utterance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.single_utterance_ = false;
}
inline bool StreamingRecognitionConfig::single_utterance() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.single_utterance)
  return _internal_single_utterance();
}
inline void StreamingRecognitionConfig::set_single_utterance(bool value) {
  _internal_set_single_utterance(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionConfig.single_utterance)
}
inline bool StreamingRecognitionConfig::_internal_single_utterance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.single_utterance_;
}
inline void StreamingRecognitionConfig::_internal_set_single_utterance(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.single_utterance_ = value;
}

// bool interim_results = 3;
inline void StreamingRecognitionConfig::clear_interim_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interim_results_ = false;
}
inline bool StreamingRecognitionConfig::interim_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.interim_results)
  return _internal_interim_results();
}
inline void StreamingRecognitionConfig::set_interim_results(bool value) {
  _internal_set_interim_results(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionConfig.interim_results)
}
inline bool StreamingRecognitionConfig::_internal_interim_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interim_results_;
}
inline void StreamingRecognitionConfig::_internal_set_interim_results(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interim_results_ = value;
}

// bool enable_voice_activity_events = 5;
inline void StreamingRecognitionConfig::clear_enable_voice_activity_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_voice_activity_events_ = false;
}
inline bool StreamingRecognitionConfig::enable_voice_activity_events() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.enable_voice_activity_events)
  return _internal_enable_voice_activity_events();
}
inline void StreamingRecognitionConfig::set_enable_voice_activity_events(bool value) {
  _internal_set_enable_voice_activity_events(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionConfig.enable_voice_activity_events)
}
inline bool StreamingRecognitionConfig::_internal_enable_voice_activity_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_voice_activity_events_;
}
inline void StreamingRecognitionConfig::_internal_set_enable_voice_activity_events(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_voice_activity_events_ = value;
}

// .google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout voice_activity_timeout = 6;
inline bool StreamingRecognitionConfig::has_voice_activity_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voice_activity_timeout_ != nullptr);
  return value;
}
inline void StreamingRecognitionConfig::clear_voice_activity_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voice_activity_timeout_ != nullptr) _impl_.voice_activity_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout& StreamingRecognitionConfig::_internal_voice_activity_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* p = _impl_.voice_activity_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout&>(::google::cloud::speech::v1::_StreamingRecognitionConfig_VoiceActivityTimeout_default_instance_);
}
inline const ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout& StreamingRecognitionConfig::voice_activity_timeout() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionConfig.voice_activity_timeout)
  return _internal_voice_activity_timeout();
}
inline void StreamingRecognitionConfig::unsafe_arena_set_allocated_voice_activity_timeout(::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voice_activity_timeout_);
  }
  _impl_.voice_activity_timeout_ = reinterpret_cast<::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.voice_activity_timeout)
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* StreamingRecognitionConfig::release_voice_activity_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* released = _impl_.voice_activity_timeout_;
  _impl_.voice_activity_timeout_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* StreamingRecognitionConfig::unsafe_arena_release_voice_activity_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionConfig.voice_activity_timeout)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* temp = _impl_.voice_activity_timeout_;
  _impl_.voice_activity_timeout_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* StreamingRecognitionConfig::_internal_mutable_voice_activity_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voice_activity_timeout_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout>(GetArena());
    _impl_.voice_activity_timeout_ = reinterpret_cast<::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout*>(p);
  }
  return _impl_.voice_activity_timeout_;
}
inline ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* StreamingRecognitionConfig::mutable_voice_activity_timeout() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* _msg = _internal_mutable_voice_activity_timeout();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionConfig.voice_activity_timeout)
  return _msg;
}
inline void StreamingRecognitionConfig::set_allocated_voice_activity_timeout(::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.voice_activity_timeout_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.voice_activity_timeout_ = reinterpret_cast<::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.voice_activity_timeout)
}

// -------------------------------------------------------------------

// RecognitionConfig

// .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
inline void RecognitionConfig::clear_encoding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoding_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding RecognitionConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.encoding)
  return _internal_encoding();
}
inline void RecognitionConfig::set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.encoding)
}
inline ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding RecognitionConfig::_internal_encoding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::google::cloud::speech::v1::RecognitionConfig_AudioEncoding>(_impl_.encoding_);
}
inline void RecognitionConfig::_internal_set_encoding(::google::cloud::speech::v1::RecognitionConfig_AudioEncoding value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encoding_ = value;
}

// int32 sample_rate_hertz = 2;
inline void RecognitionConfig::clear_sample_rate_hertz() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_rate_hertz_ = 0;
}
inline ::int32_t RecognitionConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void RecognitionConfig::set_sample_rate_hertz(::int32_t value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.sample_rate_hertz)
}
inline ::int32_t RecognitionConfig::_internal_sample_rate_hertz() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sample_rate_hertz_;
}
inline void RecognitionConfig::_internal_set_sample_rate_hertz(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_rate_hertz_ = value;
}

// int32 audio_channel_count = 7;
inline void RecognitionConfig::clear_audio_channel_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_channel_count_ = 0;
}
inline ::int32_t RecognitionConfig::audio_channel_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.audio_channel_count)
  return _internal_audio_channel_count();
}
inline void RecognitionConfig::set_audio_channel_count(::int32_t value) {
  _internal_set_audio_channel_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.audio_channel_count)
}
inline ::int32_t RecognitionConfig::_internal_audio_channel_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_channel_count_;
}
inline void RecognitionConfig::_internal_set_audio_channel_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_channel_count_ = value;
}

// bool enable_separate_recognition_per_channel = 12;
inline void RecognitionConfig::clear_enable_separate_recognition_per_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_separate_recognition_per_channel_ = false;
}
inline bool RecognitionConfig::enable_separate_recognition_per_channel() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_separate_recognition_per_channel)
  return _internal_enable_separate_recognition_per_channel();
}
inline void RecognitionConfig::set_enable_separate_recognition_per_channel(bool value) {
  _internal_set_enable_separate_recognition_per_channel(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_separate_recognition_per_channel)
}
inline bool RecognitionConfig::_internal_enable_separate_recognition_per_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_separate_recognition_per_channel_;
}
inline void RecognitionConfig::_internal_set_enable_separate_recognition_per_channel(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_separate_recognition_per_channel_ = value;
}

// string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
inline void RecognitionConfig::clear_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& RecognitionConfig::language_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecognitionConfig::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.language_code)
}
inline std::string* RecognitionConfig::mutable_language_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.language_code)
  return _s;
}
inline const std::string& RecognitionConfig::_internal_language_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.language_code_.Get();
}
inline void RecognitionConfig::_internal_set_language_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.Set(value, GetArena());
}
inline std::string* RecognitionConfig::_internal_mutable_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.language_code_.Mutable( GetArena());
}
inline std::string* RecognitionConfig::release_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.language_code)
  return _impl_.language_code_.Release();
}
inline void RecognitionConfig::set_allocated_language_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.language_code)
}

// repeated string alternative_language_codes = 18;
inline int RecognitionConfig::_internal_alternative_language_codes_size() const {
  return _internal_alternative_language_codes().size();
}
inline int RecognitionConfig::alternative_language_codes_size() const {
  return _internal_alternative_language_codes_size();
}
inline void RecognitionConfig::clear_alternative_language_codes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alternative_language_codes_.Clear();
}
inline std::string* RecognitionConfig::add_alternative_language_codes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_alternative_language_codes()->Add();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return _s;
}
inline const std::string& RecognitionConfig::alternative_language_codes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return _internal_alternative_language_codes().Get(index);
}
inline std::string* RecognitionConfig::mutable_alternative_language_codes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return _internal_mutable_alternative_language_codes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RecognitionConfig::set_alternative_language_codes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_alternative_language_codes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
template <typename Arg_, typename... Args_>
inline void RecognitionConfig::add_alternative_language_codes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_alternative_language_codes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RecognitionConfig::alternative_language_codes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  return _internal_alternative_language_codes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RecognitionConfig::mutable_alternative_language_codes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognitionConfig.alternative_language_codes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_alternative_language_codes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RecognitionConfig::_internal_alternative_language_codes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alternative_language_codes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RecognitionConfig::_internal_mutable_alternative_language_codes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.alternative_language_codes_;
}

// int32 max_alternatives = 4;
inline void RecognitionConfig::clear_max_alternatives() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_alternatives_ = 0;
}
inline ::int32_t RecognitionConfig::max_alternatives() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.max_alternatives)
  return _internal_max_alternatives();
}
inline void RecognitionConfig::set_max_alternatives(::int32_t value) {
  _internal_set_max_alternatives(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.max_alternatives)
}
inline ::int32_t RecognitionConfig::_internal_max_alternatives() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_alternatives_;
}
inline void RecognitionConfig::_internal_set_max_alternatives(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_alternatives_ = value;
}

// bool profanity_filter = 5;
inline void RecognitionConfig::clear_profanity_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profanity_filter_ = false;
}
inline bool RecognitionConfig::profanity_filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.profanity_filter)
  return _internal_profanity_filter();
}
inline void RecognitionConfig::set_profanity_filter(bool value) {
  _internal_set_profanity_filter(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.profanity_filter)
}
inline bool RecognitionConfig::_internal_profanity_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.profanity_filter_;
}
inline void RecognitionConfig::_internal_set_profanity_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profanity_filter_ = value;
}

// .google.cloud.speech.v1.SpeechAdaptation adaptation = 20;
inline bool RecognitionConfig::has_adaptation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.adaptation_ != nullptr);
  return value;
}
inline const ::google::cloud::speech::v1::SpeechAdaptation& RecognitionConfig::_internal_adaptation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::SpeechAdaptation* p = _impl_.adaptation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::SpeechAdaptation&>(::google::cloud::speech::v1::_SpeechAdaptation_default_instance_);
}
inline const ::google::cloud::speech::v1::SpeechAdaptation& RecognitionConfig::adaptation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.adaptation)
  return _internal_adaptation();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_adaptation(::google::cloud::speech::v1::SpeechAdaptation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.adaptation_);
  }
  _impl_.adaptation_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.adaptation)
}
inline ::google::cloud::speech::v1::SpeechAdaptation* RecognitionConfig::release_adaptation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::cloud::speech::v1::SpeechAdaptation* released = _impl_.adaptation_;
  _impl_.adaptation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::SpeechAdaptation* RecognitionConfig::unsafe_arena_release_adaptation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.adaptation)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::cloud::speech::v1::SpeechAdaptation* temp = _impl_.adaptation_;
  _impl_.adaptation_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::SpeechAdaptation* RecognitionConfig::_internal_mutable_adaptation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.adaptation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::SpeechAdaptation>(GetArena());
    _impl_.adaptation_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptation*>(p);
  }
  return _impl_.adaptation_;
}
inline ::google::cloud::speech::v1::SpeechAdaptation* RecognitionConfig::mutable_adaptation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::cloud::speech::v1::SpeechAdaptation* _msg = _internal_mutable_adaptation();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.adaptation)
  return _msg;
}
inline void RecognitionConfig::set_allocated_adaptation(::google::cloud::speech::v1::SpeechAdaptation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.adaptation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.adaptation_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptation*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.adaptation)
}

// .google.cloud.speech.v1.TranscriptNormalization transcript_normalization = 24 [(.google.api.field_behavior) = OPTIONAL];
inline bool RecognitionConfig::has_transcript_normalization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transcript_normalization_ != nullptr);
  return value;
}
inline const ::google::cloud::speech::v1::TranscriptNormalization& RecognitionConfig::_internal_transcript_normalization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::TranscriptNormalization* p = _impl_.transcript_normalization_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::TranscriptNormalization&>(::google::cloud::speech::v1::_TranscriptNormalization_default_instance_);
}
inline const ::google::cloud::speech::v1::TranscriptNormalization& RecognitionConfig::transcript_normalization() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.transcript_normalization)
  return _internal_transcript_normalization();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_transcript_normalization(::google::cloud::speech::v1::TranscriptNormalization* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transcript_normalization_);
  }
  _impl_.transcript_normalization_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptNormalization*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.transcript_normalization)
}
inline ::google::cloud::speech::v1::TranscriptNormalization* RecognitionConfig::release_transcript_normalization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::cloud::speech::v1::TranscriptNormalization* released = _impl_.transcript_normalization_;
  _impl_.transcript_normalization_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::TranscriptNormalization* RecognitionConfig::unsafe_arena_release_transcript_normalization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.transcript_normalization)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::cloud::speech::v1::TranscriptNormalization* temp = _impl_.transcript_normalization_;
  _impl_.transcript_normalization_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::TranscriptNormalization* RecognitionConfig::_internal_mutable_transcript_normalization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.transcript_normalization_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::TranscriptNormalization>(GetArena());
    _impl_.transcript_normalization_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptNormalization*>(p);
  }
  return _impl_.transcript_normalization_;
}
inline ::google::cloud::speech::v1::TranscriptNormalization* RecognitionConfig::mutable_transcript_normalization() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::google::cloud::speech::v1::TranscriptNormalization* _msg = _internal_mutable_transcript_normalization();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.transcript_normalization)
  return _msg;
}
inline void RecognitionConfig::set_allocated_transcript_normalization(::google::cloud::speech::v1::TranscriptNormalization* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transcript_normalization_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.transcript_normalization_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptNormalization*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.transcript_normalization)
}

// repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
inline int RecognitionConfig::_internal_speech_contexts_size() const {
  return _internal_speech_contexts().size();
}
inline int RecognitionConfig::speech_contexts_size() const {
  return _internal_speech_contexts_size();
}
inline void RecognitionConfig::clear_speech_contexts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speech_contexts_.Clear();
}
inline ::google::cloud::speech::v1::SpeechContext* RecognitionConfig::mutable_speech_contexts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return _internal_mutable_speech_contexts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechContext>* RecognitionConfig::mutable_speech_contexts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_speech_contexts();
}
inline const ::google::cloud::speech::v1::SpeechContext& RecognitionConfig::speech_contexts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return _internal_speech_contexts().Get(index);
}
inline ::google::cloud::speech::v1::SpeechContext* RecognitionConfig::add_speech_contexts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::cloud::speech::v1::SpeechContext* _add = _internal_mutable_speech_contexts()->Add();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechContext>& RecognitionConfig::speech_contexts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognitionConfig.speech_contexts)
  return _internal_speech_contexts();
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechContext>&
RecognitionConfig::_internal_speech_contexts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speech_contexts_;
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechContext>*
RecognitionConfig::_internal_mutable_speech_contexts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.speech_contexts_;
}

// bool enable_word_time_offsets = 8;
inline void RecognitionConfig::clear_enable_word_time_offsets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_word_time_offsets_ = false;
}
inline bool RecognitionConfig::enable_word_time_offsets() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_word_time_offsets)
  return _internal_enable_word_time_offsets();
}
inline void RecognitionConfig::set_enable_word_time_offsets(bool value) {
  _internal_set_enable_word_time_offsets(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_word_time_offsets)
}
inline bool RecognitionConfig::_internal_enable_word_time_offsets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_word_time_offsets_;
}
inline void RecognitionConfig::_internal_set_enable_word_time_offsets(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_word_time_offsets_ = value;
}

// bool enable_word_confidence = 15;
inline void RecognitionConfig::clear_enable_word_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_word_confidence_ = false;
}
inline bool RecognitionConfig::enable_word_confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_word_confidence)
  return _internal_enable_word_confidence();
}
inline void RecognitionConfig::set_enable_word_confidence(bool value) {
  _internal_set_enable_word_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_word_confidence)
}
inline bool RecognitionConfig::_internal_enable_word_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_word_confidence_;
}
inline void RecognitionConfig::_internal_set_enable_word_confidence(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_word_confidence_ = value;
}

// bool enable_automatic_punctuation = 11;
inline void RecognitionConfig::clear_enable_automatic_punctuation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_automatic_punctuation_ = false;
}
inline bool RecognitionConfig::enable_automatic_punctuation() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_automatic_punctuation)
  return _internal_enable_automatic_punctuation();
}
inline void RecognitionConfig::set_enable_automatic_punctuation(bool value) {
  _internal_set_enable_automatic_punctuation(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.enable_automatic_punctuation)
}
inline bool RecognitionConfig::_internal_enable_automatic_punctuation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_automatic_punctuation_;
}
inline void RecognitionConfig::_internal_set_enable_automatic_punctuation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_automatic_punctuation_ = value;
}

// .google.protobuf.BoolValue enable_spoken_punctuation = 22;
inline bool RecognitionConfig::has_enable_spoken_punctuation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enable_spoken_punctuation_ != nullptr);
  return value;
}
inline const ::google::protobuf::BoolValue& RecognitionConfig::_internal_enable_spoken_punctuation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::BoolValue* p = _impl_.enable_spoken_punctuation_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::BoolValue&>(::google::protobuf::_BoolValue_default_instance_);
}
inline const ::google::protobuf::BoolValue& RecognitionConfig::enable_spoken_punctuation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
  return _internal_enable_spoken_punctuation();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_enable_spoken_punctuation(::google::protobuf::BoolValue* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enable_spoken_punctuation_);
  }
  _impl_.enable_spoken_punctuation_ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
}
inline ::google::protobuf::BoolValue* RecognitionConfig::release_enable_spoken_punctuation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::BoolValue* released = _impl_.enable_spoken_punctuation_;
  _impl_.enable_spoken_punctuation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::BoolValue* RecognitionConfig::unsafe_arena_release_enable_spoken_punctuation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::BoolValue* temp = _impl_.enable_spoken_punctuation_;
  _impl_.enable_spoken_punctuation_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* RecognitionConfig::_internal_mutable_enable_spoken_punctuation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enable_spoken_punctuation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::BoolValue>(GetArena());
    _impl_.enable_spoken_punctuation_ = reinterpret_cast<::google::protobuf::BoolValue*>(p);
  }
  return _impl_.enable_spoken_punctuation_;
}
inline ::google::protobuf::BoolValue* RecognitionConfig::mutable_enable_spoken_punctuation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::protobuf::BoolValue* _msg = _internal_mutable_enable_spoken_punctuation();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
  return _msg;
}
inline void RecognitionConfig::set_allocated_enable_spoken_punctuation(::google::protobuf::BoolValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enable_spoken_punctuation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.enable_spoken_punctuation_ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.enable_spoken_punctuation)
}

// .google.protobuf.BoolValue enable_spoken_emojis = 23;
inline bool RecognitionConfig::has_enable_spoken_emojis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enable_spoken_emojis_ != nullptr);
  return value;
}
inline const ::google::protobuf::BoolValue& RecognitionConfig::_internal_enable_spoken_emojis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::BoolValue* p = _impl_.enable_spoken_emojis_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::BoolValue&>(::google::protobuf::_BoolValue_default_instance_);
}
inline const ::google::protobuf::BoolValue& RecognitionConfig::enable_spoken_emojis() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
  return _internal_enable_spoken_emojis();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_enable_spoken_emojis(::google::protobuf::BoolValue* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enable_spoken_emojis_);
  }
  _impl_.enable_spoken_emojis_ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
}
inline ::google::protobuf::BoolValue* RecognitionConfig::release_enable_spoken_emojis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::BoolValue* released = _impl_.enable_spoken_emojis_;
  _impl_.enable_spoken_emojis_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::BoolValue* RecognitionConfig::unsafe_arena_release_enable_spoken_emojis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::BoolValue* temp = _impl_.enable_spoken_emojis_;
  _impl_.enable_spoken_emojis_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* RecognitionConfig::_internal_mutable_enable_spoken_emojis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enable_spoken_emojis_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::BoolValue>(GetArena());
    _impl_.enable_spoken_emojis_ = reinterpret_cast<::google::protobuf::BoolValue*>(p);
  }
  return _impl_.enable_spoken_emojis_;
}
inline ::google::protobuf::BoolValue* RecognitionConfig::mutable_enable_spoken_emojis() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::google::protobuf::BoolValue* _msg = _internal_mutable_enable_spoken_emojis();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
  return _msg;
}
inline void RecognitionConfig::set_allocated_enable_spoken_emojis(::google::protobuf::BoolValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enable_spoken_emojis_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.enable_spoken_emojis_ = reinterpret_cast<::google::protobuf::BoolValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.enable_spoken_emojis)
}

// .google.cloud.speech.v1.SpeakerDiarizationConfig diarization_config = 19;
inline bool RecognitionConfig::has_diarization_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.diarization_config_ != nullptr);
  return value;
}
inline void RecognitionConfig::clear_diarization_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.diarization_config_ != nullptr) _impl_.diarization_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::google::cloud::speech::v1::SpeakerDiarizationConfig& RecognitionConfig::_internal_diarization_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::SpeakerDiarizationConfig* p = _impl_.diarization_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::SpeakerDiarizationConfig&>(::google::cloud::speech::v1::_SpeakerDiarizationConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::SpeakerDiarizationConfig& RecognitionConfig::diarization_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.diarization_config)
  return _internal_diarization_config();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_diarization_config(::google::cloud::speech::v1::SpeakerDiarizationConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.diarization_config_);
  }
  _impl_.diarization_config_ = reinterpret_cast<::google::cloud::speech::v1::SpeakerDiarizationConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.diarization_config)
}
inline ::google::cloud::speech::v1::SpeakerDiarizationConfig* RecognitionConfig::release_diarization_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* released = _impl_.diarization_config_;
  _impl_.diarization_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::SpeakerDiarizationConfig* RecognitionConfig::unsafe_arena_release_diarization_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.diarization_config)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* temp = _impl_.diarization_config_;
  _impl_.diarization_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::SpeakerDiarizationConfig* RecognitionConfig::_internal_mutable_diarization_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.diarization_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::SpeakerDiarizationConfig>(GetArena());
    _impl_.diarization_config_ = reinterpret_cast<::google::cloud::speech::v1::SpeakerDiarizationConfig*>(p);
  }
  return _impl_.diarization_config_;
}
inline ::google::cloud::speech::v1::SpeakerDiarizationConfig* RecognitionConfig::mutable_diarization_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::cloud::speech::v1::SpeakerDiarizationConfig* _msg = _internal_mutable_diarization_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.diarization_config)
  return _msg;
}
inline void RecognitionConfig::set_allocated_diarization_config(::google::cloud::speech::v1::SpeakerDiarizationConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.diarization_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.diarization_config_ = reinterpret_cast<::google::cloud::speech::v1::SpeakerDiarizationConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.diarization_config)
}

// .google.cloud.speech.v1.RecognitionMetadata metadata = 9;
inline bool RecognitionConfig::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void RecognitionConfig::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::google::cloud::speech::v1::RecognitionMetadata& RecognitionConfig::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::RecognitionMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::RecognitionMetadata&>(::google::cloud::speech::v1::_RecognitionMetadata_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionMetadata& RecognitionConfig::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.metadata)
  return _internal_metadata();
}
inline void RecognitionConfig::unsafe_arena_set_allocated_metadata(::google::cloud::speech::v1::RecognitionMetadata* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognitionConfig.metadata)
}
inline ::google::cloud::speech::v1::RecognitionMetadata* RecognitionConfig::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::speech::v1::RecognitionMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::RecognitionMetadata* RecognitionConfig::unsafe_arena_release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::cloud::speech::v1::RecognitionMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionMetadata* RecognitionConfig::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::RecognitionMetadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::google::cloud::speech::v1::RecognitionMetadata* RecognitionConfig::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::cloud::speech::v1::RecognitionMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.metadata)
  return _msg;
}
inline void RecognitionConfig::set_allocated_metadata(::google::cloud::speech::v1::RecognitionMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::google::cloud::speech::v1::RecognitionMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.metadata)
}

// string model = 13;
inline void RecognitionConfig::clear_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.ClearToEmpty();
}
inline const std::string& RecognitionConfig::model() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecognitionConfig::set_model(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.model)
}
inline std::string* RecognitionConfig::mutable_model() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionConfig.model)
  return _s;
}
inline const std::string& RecognitionConfig::_internal_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.model_.Get();
}
inline void RecognitionConfig::_internal_set_model(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.Set(value, GetArena());
}
inline std::string* RecognitionConfig::_internal_mutable_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.model_.Mutable( GetArena());
}
inline std::string* RecognitionConfig::release_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionConfig.model)
  return _impl_.model_.Release();
}
inline void RecognitionConfig::set_allocated_model(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionConfig.model)
}

// bool use_enhanced = 14;
inline void RecognitionConfig::clear_use_enhanced() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_enhanced_ = false;
}
inline bool RecognitionConfig::use_enhanced() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionConfig.use_enhanced)
  return _internal_use_enhanced();
}
inline void RecognitionConfig::set_use_enhanced(bool value) {
  _internal_set_use_enhanced(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionConfig.use_enhanced)
}
inline bool RecognitionConfig::_internal_use_enhanced() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_enhanced_;
}
inline void RecognitionConfig::_internal_set_use_enhanced(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_enhanced_ = value;
}

// -------------------------------------------------------------------

// SpeakerDiarizationConfig

// bool enable_speaker_diarization = 1;
inline void SpeakerDiarizationConfig::clear_enable_speaker_diarization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_speaker_diarization_ = false;
}
inline bool SpeakerDiarizationConfig::enable_speaker_diarization() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeakerDiarizationConfig.enable_speaker_diarization)
  return _internal_enable_speaker_diarization();
}
inline void SpeakerDiarizationConfig::set_enable_speaker_diarization(bool value) {
  _internal_set_enable_speaker_diarization(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeakerDiarizationConfig.enable_speaker_diarization)
}
inline bool SpeakerDiarizationConfig::_internal_enable_speaker_diarization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_speaker_diarization_;
}
inline void SpeakerDiarizationConfig::_internal_set_enable_speaker_diarization(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_speaker_diarization_ = value;
}

// int32 min_speaker_count = 2;
inline void SpeakerDiarizationConfig::clear_min_speaker_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_speaker_count_ = 0;
}
inline ::int32_t SpeakerDiarizationConfig::min_speaker_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeakerDiarizationConfig.min_speaker_count)
  return _internal_min_speaker_count();
}
inline void SpeakerDiarizationConfig::set_min_speaker_count(::int32_t value) {
  _internal_set_min_speaker_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeakerDiarizationConfig.min_speaker_count)
}
inline ::int32_t SpeakerDiarizationConfig::_internal_min_speaker_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_speaker_count_;
}
inline void SpeakerDiarizationConfig::_internal_set_min_speaker_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_speaker_count_ = value;
}

// int32 max_speaker_count = 3;
inline void SpeakerDiarizationConfig::clear_max_speaker_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_speaker_count_ = 0;
}
inline ::int32_t SpeakerDiarizationConfig::max_speaker_count() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeakerDiarizationConfig.max_speaker_count)
  return _internal_max_speaker_count();
}
inline void SpeakerDiarizationConfig::set_max_speaker_count(::int32_t value) {
  _internal_set_max_speaker_count(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeakerDiarizationConfig.max_speaker_count)
}
inline ::int32_t SpeakerDiarizationConfig::_internal_max_speaker_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_speaker_count_;
}
inline void SpeakerDiarizationConfig::_internal_set_max_speaker_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_speaker_count_ = value;
}

// int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
inline void SpeakerDiarizationConfig::clear_speaker_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speaker_tag_ = 0;
}
inline ::int32_t SpeakerDiarizationConfig::speaker_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeakerDiarizationConfig.speaker_tag)
  return _internal_speaker_tag();
}
inline void SpeakerDiarizationConfig::set_speaker_tag(::int32_t value) {
  _internal_set_speaker_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeakerDiarizationConfig.speaker_tag)
}
inline ::int32_t SpeakerDiarizationConfig::_internal_speaker_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speaker_tag_;
}
inline void SpeakerDiarizationConfig::_internal_set_speaker_tag(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speaker_tag_ = value;
}

// -------------------------------------------------------------------

// RecognitionMetadata

// .google.cloud.speech.v1.RecognitionMetadata.InteractionType interaction_type = 1;
inline void RecognitionMetadata::clear_interaction_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interaction_type_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionMetadata_InteractionType RecognitionMetadata::interaction_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.interaction_type)
  return _internal_interaction_type();
}
inline void RecognitionMetadata::set_interaction_type(::google::cloud::speech::v1::RecognitionMetadata_InteractionType value) {
  _internal_set_interaction_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.interaction_type)
}
inline ::google::cloud::speech::v1::RecognitionMetadata_InteractionType RecognitionMetadata::_internal_interaction_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::google::cloud::speech::v1::RecognitionMetadata_InteractionType>(_impl_.interaction_type_);
}
inline void RecognitionMetadata::_internal_set_interaction_type(::google::cloud::speech::v1::RecognitionMetadata_InteractionType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interaction_type_ = value;
}

// uint32 industry_naics_code_of_audio = 3;
inline void RecognitionMetadata::clear_industry_naics_code_of_audio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.industry_naics_code_of_audio_ = 0u;
}
inline ::uint32_t RecognitionMetadata::industry_naics_code_of_audio() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.industry_naics_code_of_audio)
  return _internal_industry_naics_code_of_audio();
}
inline void RecognitionMetadata::set_industry_naics_code_of_audio(::uint32_t value) {
  _internal_set_industry_naics_code_of_audio(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.industry_naics_code_of_audio)
}
inline ::uint32_t RecognitionMetadata::_internal_industry_naics_code_of_audio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.industry_naics_code_of_audio_;
}
inline void RecognitionMetadata::_internal_set_industry_naics_code_of_audio(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.industry_naics_code_of_audio_ = value;
}

// .google.cloud.speech.v1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
inline void RecognitionMetadata::clear_microphone_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.microphone_distance_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance RecognitionMetadata::microphone_distance() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.microphone_distance)
  return _internal_microphone_distance();
}
inline void RecognitionMetadata::set_microphone_distance(::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance value) {
  _internal_set_microphone_distance(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.microphone_distance)
}
inline ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance RecognitionMetadata::_internal_microphone_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance>(_impl_.microphone_distance_);
}
inline void RecognitionMetadata::_internal_set_microphone_distance(::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.microphone_distance_ = value;
}

// .google.cloud.speech.v1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
inline void RecognitionMetadata::clear_original_media_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_media_type_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType RecognitionMetadata::original_media_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.original_media_type)
  return _internal_original_media_type();
}
inline void RecognitionMetadata::set_original_media_type(::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType value) {
  _internal_set_original_media_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.original_media_type)
}
inline ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType RecognitionMetadata::_internal_original_media_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType>(_impl_.original_media_type_);
}
inline void RecognitionMetadata::_internal_set_original_media_type(::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_media_type_ = value;
}

// .google.cloud.speech.v1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
inline void RecognitionMetadata::clear_recording_device_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_device_type_ = 0;
}
inline ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType RecognitionMetadata::recording_device_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.recording_device_type)
  return _internal_recording_device_type();
}
inline void RecognitionMetadata::set_recording_device_type(::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType value) {
  _internal_set_recording_device_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.recording_device_type)
}
inline ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType RecognitionMetadata::_internal_recording_device_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType>(_impl_.recording_device_type_);
}
inline void RecognitionMetadata::_internal_set_recording_device_type(::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_device_type_ = value;
}

// string recording_device_name = 7;
inline void RecognitionMetadata::clear_recording_device_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_device_name_.ClearToEmpty();
}
inline const std::string& RecognitionMetadata::recording_device_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
  return _internal_recording_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecognitionMetadata::set_recording_device_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
}
inline std::string* RecognitionMetadata::mutable_recording_device_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recording_device_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
  return _s;
}
inline const std::string& RecognitionMetadata::_internal_recording_device_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recording_device_name_.Get();
}
inline void RecognitionMetadata::_internal_set_recording_device_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_device_name_.Set(value, GetArena());
}
inline std::string* RecognitionMetadata::_internal_mutable_recording_device_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recording_device_name_.Mutable( GetArena());
}
inline std::string* RecognitionMetadata::release_recording_device_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
  return _impl_.recording_device_name_.Release();
}
inline void RecognitionMetadata::set_allocated_recording_device_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recording_device_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recording_device_name_.IsDefault()) {
    _impl_.recording_device_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionMetadata.recording_device_name)
}

// string original_mime_type = 8;
inline void RecognitionMetadata::clear_original_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_mime_type_.ClearToEmpty();
}
inline const std::string& RecognitionMetadata::original_mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
  return _internal_original_mime_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecognitionMetadata::set_original_mime_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
}
inline std::string* RecognitionMetadata::mutable_original_mime_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_original_mime_type();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
  return _s;
}
inline const std::string& RecognitionMetadata::_internal_original_mime_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.original_mime_type_.Get();
}
inline void RecognitionMetadata::_internal_set_original_mime_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_mime_type_.Set(value, GetArena());
}
inline std::string* RecognitionMetadata::_internal_mutable_original_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.original_mime_type_.Mutable( GetArena());
}
inline std::string* RecognitionMetadata::release_original_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
  return _impl_.original_mime_type_.Release();
}
inline void RecognitionMetadata::set_allocated_original_mime_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.original_mime_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.original_mime_type_.IsDefault()) {
    _impl_.original_mime_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionMetadata.original_mime_type)
}

// string audio_topic = 10;
inline void RecognitionMetadata::clear_audio_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_topic_.ClearToEmpty();
}
inline const std::string& RecognitionMetadata::audio_topic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
  return _internal_audio_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecognitionMetadata::set_audio_topic(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_topic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
}
inline std::string* RecognitionMetadata::mutable_audio_topic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_topic();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
  return _s;
}
inline const std::string& RecognitionMetadata::_internal_audio_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_topic_.Get();
}
inline void RecognitionMetadata::_internal_set_audio_topic(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_topic_.Set(value, GetArena());
}
inline std::string* RecognitionMetadata::_internal_mutable_audio_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audio_topic_.Mutable( GetArena());
}
inline std::string* RecognitionMetadata::release_audio_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
  return _impl_.audio_topic_.Release();
}
inline void RecognitionMetadata::set_allocated_audio_topic(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_topic_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audio_topic_.IsDefault()) {
    _impl_.audio_topic_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionMetadata.audio_topic)
}

// -------------------------------------------------------------------

// SpeechContext

// repeated string phrases = 1;
inline int SpeechContext::_internal_phrases_size() const {
  return _internal_phrases().size();
}
inline int SpeechContext::phrases_size() const {
  return _internal_phrases_size();
}
inline void SpeechContext::clear_phrases() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phrases_.Clear();
}
inline std::string* SpeechContext::add_phrases() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_phrases()->Add();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.speech.v1.SpeechContext.phrases)
  return _s;
}
inline const std::string& SpeechContext::phrases(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechContext.phrases)
  return _internal_phrases().Get(index);
}
inline std::string* SpeechContext::mutable_phrases(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechContext.phrases)
  return _internal_mutable_phrases()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SpeechContext::set_phrases(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_phrases()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechContext.phrases)
}
template <typename Arg_, typename... Args_>
inline void SpeechContext::add_phrases(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_phrases(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechContext.phrases)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SpeechContext::phrases() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechContext.phrases)
  return _internal_phrases();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SpeechContext::mutable_phrases() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechContext.phrases)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_phrases();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SpeechContext::_internal_phrases() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.phrases_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SpeechContext::_internal_mutable_phrases() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.phrases_;
}

// float boost = 4;
inline void SpeechContext::clear_boost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boost_ = 0;
}
inline float SpeechContext::boost() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechContext.boost)
  return _internal_boost();
}
inline void SpeechContext::set_boost(float value) {
  _internal_set_boost(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechContext.boost)
}
inline float SpeechContext::_internal_boost() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.boost_;
}
inline void SpeechContext::_internal_set_boost(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boost_ = value;
}

// -------------------------------------------------------------------

// RecognitionAudio

// bytes content = 1;
inline bool RecognitionAudio::has_content() const {
  return audio_source_case() == kContent;
}
inline void RecognitionAudio::set_has_content() {
  _impl_._oneof_case_[0] = kContent;
}
inline void RecognitionAudio::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (audio_source_case() == kContent) {
    _impl_.audio_source_.content_.Destroy();
    clear_has_audio_source();
  }
}
inline const std::string& RecognitionAudio::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionAudio.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecognitionAudio::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (audio_source_case() != kContent) {
    clear_audio_source();

    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  _impl_.audio_source_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionAudio.content)
}
inline std::string* RecognitionAudio::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionAudio.content)
  return _s;
}
inline const std::string& RecognitionAudio::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (audio_source_case() != kContent) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.audio_source_.content_.Get();
}
inline void RecognitionAudio::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (audio_source_case() != kContent) {
    clear_audio_source();

    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  _impl_.audio_source_.content_.Set(value, GetArena());
}
inline std::string* RecognitionAudio::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (audio_source_case() != kContent) {
    clear_audio_source();

    set_has_content();
    _impl_.audio_source_.content_.InitDefault();
  }
  return _impl_.audio_source_.content_.Mutable( GetArena());
}
inline std::string* RecognitionAudio::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionAudio.content)
  if (audio_source_case() != kContent) {
    return nullptr;
  }
  clear_has_audio_source();
  return _impl_.audio_source_.content_.Release();
}
inline void RecognitionAudio::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_audio_source()) {
    clear_audio_source();
  }
  if (value != nullptr) {
    set_has_content();
    _impl_.audio_source_.content_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionAudio.content)
}

// string uri = 2;
inline bool RecognitionAudio::has_uri() const {
  return audio_source_case() == kUri;
}
inline void RecognitionAudio::set_has_uri() {
  _impl_._oneof_case_[0] = kUri;
}
inline void RecognitionAudio::clear_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (audio_source_case() == kUri) {
    _impl_.audio_source_.uri_.Destroy();
    clear_has_audio_source();
  }
}
inline const std::string& RecognitionAudio::uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognitionAudio.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecognitionAudio::set_uri(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (audio_source_case() != kUri) {
    clear_audio_source();

    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  _impl_.audio_source_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognitionAudio.uri)
}
inline std::string* RecognitionAudio::mutable_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognitionAudio.uri)
  return _s;
}
inline const std::string& RecognitionAudio::_internal_uri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (audio_source_case() != kUri) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.audio_source_.uri_.Get();
}
inline void RecognitionAudio::_internal_set_uri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (audio_source_case() != kUri) {
    clear_audio_source();

    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  _impl_.audio_source_.uri_.Set(value, GetArena());
}
inline std::string* RecognitionAudio::_internal_mutable_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (audio_source_case() != kUri) {
    clear_audio_source();

    set_has_uri();
    _impl_.audio_source_.uri_.InitDefault();
  }
  return _impl_.audio_source_.uri_.Mutable( GetArena());
}
inline std::string* RecognitionAudio::release_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognitionAudio.uri)
  if (audio_source_case() != kUri) {
    return nullptr;
  }
  clear_has_audio_source();
  return _impl_.audio_source_.uri_.Release();
}
inline void RecognitionAudio::set_allocated_uri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_audio_source()) {
    clear_audio_source();
  }
  if (value != nullptr) {
    set_has_uri();
    _impl_.audio_source_.uri_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognitionAudio.uri)
}

inline bool RecognitionAudio::has_audio_source() const {
  return audio_source_case() != AUDIO_SOURCE_NOT_SET;
}
inline void RecognitionAudio::clear_has_audio_source() {
  _impl_._oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}
inline RecognitionAudio::AudioSourceCase RecognitionAudio::audio_source_case() const {
  return RecognitionAudio::AudioSourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecognizeResponse

// repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
inline int RecognizeResponse::_internal_results_size() const {
  return _internal_results().size();
}
inline int RecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void RecognizeResponse::clear_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.results_.Clear();
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* RecognizeResponse::mutable_results(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeResponse.results)
  return _internal_mutable_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>* RecognizeResponse::mutable_results()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.RecognizeResponse.results)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_results();
}
inline const ::google::cloud::speech::v1::SpeechRecognitionResult& RecognizeResponse::results(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeResponse.results)
  return _internal_results().Get(index);
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* RecognizeResponse::add_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::cloud::speech::v1::SpeechRecognitionResult* _add = _internal_mutable_results()->Add();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.RecognizeResponse.results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>& RecognizeResponse::results() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.RecognizeResponse.results)
  return _internal_results();
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>&
RecognizeResponse::_internal_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.results_;
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>*
RecognizeResponse::_internal_mutable_results() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.results_;
}

// .google.protobuf.Duration total_billed_time = 3;
inline bool RecognizeResponse::has_total_billed_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_billed_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& RecognizeResponse::_internal_total_billed_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.total_billed_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& RecognizeResponse::total_billed_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
  return _internal_total_billed_time();
}
inline void RecognizeResponse::unsafe_arena_set_allocated_total_billed_time(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_billed_time_);
  }
  _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
}
inline ::google::protobuf::Duration* RecognizeResponse::release_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* RecognizeResponse::unsafe_arena_release_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeResponse.total_billed_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* RecognizeResponse::_internal_mutable_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_billed_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.total_billed_time_;
}
inline ::google::protobuf::Duration* RecognizeResponse::mutable_total_billed_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_total_billed_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
  return _msg;
}
inline void RecognizeResponse::set_allocated_total_billed_time(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_billed_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeResponse.total_billed_time)
}

// .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 7;
inline bool RecognizeResponse::has_speech_adaptation_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speech_adaptation_info_ != nullptr);
  return value;
}
inline void RecognizeResponse::clear_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_adaptation_info_ != nullptr) _impl_.speech_adaptation_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::google::cloud::speech::v1::SpeechAdaptationInfo& RecognizeResponse::_internal_speech_adaptation_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::SpeechAdaptationInfo* p = _impl_.speech_adaptation_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::SpeechAdaptationInfo&>(::google::cloud::speech::v1::_SpeechAdaptationInfo_default_instance_);
}
inline const ::google::cloud::speech::v1::SpeechAdaptationInfo& RecognizeResponse::speech_adaptation_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeResponse.speech_adaptation_info)
  return _internal_speech_adaptation_info();
}
inline void RecognizeResponse::unsafe_arena_set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_adaptation_info_);
  }
  _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeResponse.speech_adaptation_info)
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* RecognizeResponse::release_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* released = _impl_.speech_adaptation_info_;
  _impl_.speech_adaptation_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* RecognizeResponse::unsafe_arena_release_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.RecognizeResponse.speech_adaptation_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* temp = _impl_.speech_adaptation_info_;
  _impl_.speech_adaptation_info_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* RecognizeResponse::_internal_mutable_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_adaptation_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::SpeechAdaptationInfo>(GetArena());
    _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(p);
  }
  return _impl_.speech_adaptation_info_;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* RecognizeResponse::mutable_speech_adaptation_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* _msg = _internal_mutable_speech_adaptation_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.RecognizeResponse.speech_adaptation_info)
  return _msg;
}
inline void RecognizeResponse::set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.speech_adaptation_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.RecognizeResponse.speech_adaptation_info)
}

// int64 request_id = 8;
inline void RecognizeResponse::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = ::int64_t{0};
}
inline ::int64_t RecognizeResponse::request_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.RecognizeResponse.request_id)
  return _internal_request_id();
}
inline void RecognizeResponse::set_request_id(::int64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.RecognizeResponse.request_id)
}
inline ::int64_t RecognizeResponse::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_;
}
inline void RecognizeResponse::_internal_set_request_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = value;
}

// -------------------------------------------------------------------

// LongRunningRecognizeResponse

// repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
inline int LongRunningRecognizeResponse::_internal_results_size() const {
  return _internal_results().size();
}
inline int LongRunningRecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void LongRunningRecognizeResponse::clear_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.results_.Clear();
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* LongRunningRecognizeResponse::mutable_results(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return _internal_mutable_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>* LongRunningRecognizeResponse::mutable_results()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_results();
}
inline const ::google::cloud::speech::v1::SpeechRecognitionResult& LongRunningRecognizeResponse::results(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return _internal_results().Get(index);
}
inline ::google::cloud::speech::v1::SpeechRecognitionResult* LongRunningRecognizeResponse::add_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::cloud::speech::v1::SpeechRecognitionResult* _add = _internal_mutable_results()->Add();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>& LongRunningRecognizeResponse::results() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.LongRunningRecognizeResponse.results)
  return _internal_results();
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>&
LongRunningRecognizeResponse::_internal_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.results_;
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionResult>*
LongRunningRecognizeResponse::_internal_mutable_results() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.results_;
}

// .google.protobuf.Duration total_billed_time = 3;
inline bool LongRunningRecognizeResponse::has_total_billed_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_billed_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& LongRunningRecognizeResponse::_internal_total_billed_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.total_billed_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& LongRunningRecognizeResponse::total_billed_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
  return _internal_total_billed_time();
}
inline void LongRunningRecognizeResponse::unsafe_arena_set_allocated_total_billed_time(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_billed_time_);
  }
  _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
}
inline ::google::protobuf::Duration* LongRunningRecognizeResponse::release_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* LongRunningRecognizeResponse::unsafe_arena_release_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* LongRunningRecognizeResponse::_internal_mutable_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_billed_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.total_billed_time_;
}
inline ::google::protobuf::Duration* LongRunningRecognizeResponse::mutable_total_billed_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_total_billed_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
  return _msg;
}
inline void LongRunningRecognizeResponse::set_allocated_total_billed_time(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_billed_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.total_billed_time)
}

// .google.cloud.speech.v1.TranscriptOutputConfig output_config = 6;
inline bool LongRunningRecognizeResponse::has_output_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_config_ != nullptr);
  return value;
}
inline void LongRunningRecognizeResponse::clear_output_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_config_ != nullptr) _impl_.output_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::google::cloud::speech::v1::TranscriptOutputConfig& LongRunningRecognizeResponse::_internal_output_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::TranscriptOutputConfig* p = _impl_.output_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::TranscriptOutputConfig&>(::google::cloud::speech::v1::_TranscriptOutputConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::TranscriptOutputConfig& LongRunningRecognizeResponse::output_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
  return _internal_output_config();
}
inline void LongRunningRecognizeResponse::unsafe_arena_set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.output_config_);
  }
  _impl_.output_config_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptOutputConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeResponse::release_output_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::TranscriptOutputConfig* released = _impl_.output_config_;
  _impl_.output_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeResponse::unsafe_arena_release_output_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::cloud::speech::v1::TranscriptOutputConfig* temp = _impl_.output_config_;
  _impl_.output_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeResponse::_internal_mutable_output_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::TranscriptOutputConfig>(GetArena());
    _impl_.output_config_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptOutputConfig*>(p);
  }
  return _impl_.output_config_;
}
inline ::google::cloud::speech::v1::TranscriptOutputConfig* LongRunningRecognizeResponse::mutable_output_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::cloud::speech::v1::TranscriptOutputConfig* _msg = _internal_mutable_output_config();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
  return _msg;
}
inline void LongRunningRecognizeResponse::set_allocated_output_config(::google::cloud::speech::v1::TranscriptOutputConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.output_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.output_config_ = reinterpret_cast<::google::cloud::speech::v1::TranscriptOutputConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.output_config)
}

// .google.rpc.Status output_error = 7;
inline bool LongRunningRecognizeResponse::has_output_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_error_ != nullptr);
  return value;
}
inline const ::google::rpc::Status& LongRunningRecognizeResponse::_internal_output_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::rpc::Status* p = _impl_.output_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& LongRunningRecognizeResponse::output_error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
  return _internal_output_error();
}
inline void LongRunningRecognizeResponse::unsafe_arena_set_allocated_output_error(::google::rpc::Status* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.output_error_);
  }
  _impl_.output_error_ = reinterpret_cast<::google::rpc::Status*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
}
inline ::google::rpc::Status* LongRunningRecognizeResponse::release_output_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::rpc::Status* released = _impl_.output_error_;
  _impl_.output_error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::rpc::Status* LongRunningRecognizeResponse::unsafe_arena_release_output_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::rpc::Status* temp = _impl_.output_error_;
  _impl_.output_error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* LongRunningRecognizeResponse::_internal_mutable_output_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.output_error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::rpc::Status>(GetArena());
    _impl_.output_error_ = reinterpret_cast<::google::rpc::Status*>(p);
  }
  return _impl_.output_error_;
}
inline ::google::rpc::Status* LongRunningRecognizeResponse::mutable_output_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::rpc::Status* _msg = _internal_mutable_output_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
  return _msg;
}
inline void LongRunningRecognizeResponse::set_allocated_output_error(::google::rpc::Status* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.output_error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.output_error_ = reinterpret_cast<::google::rpc::Status*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.output_error)
}

// .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 8;
inline bool LongRunningRecognizeResponse::has_speech_adaptation_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speech_adaptation_info_ != nullptr);
  return value;
}
inline void LongRunningRecognizeResponse::clear_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_adaptation_info_ != nullptr) _impl_.speech_adaptation_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::google::cloud::speech::v1::SpeechAdaptationInfo& LongRunningRecognizeResponse::_internal_speech_adaptation_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::SpeechAdaptationInfo* p = _impl_.speech_adaptation_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::SpeechAdaptationInfo&>(::google::cloud::speech::v1::_SpeechAdaptationInfo_default_instance_);
}
inline const ::google::cloud::speech::v1::SpeechAdaptationInfo& LongRunningRecognizeResponse::speech_adaptation_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.speech_adaptation_info)
  return _internal_speech_adaptation_info();
}
inline void LongRunningRecognizeResponse::unsafe_arena_set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_adaptation_info_);
  }
  _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.speech_adaptation_info)
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* LongRunningRecognizeResponse::release_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* released = _impl_.speech_adaptation_info_;
  _impl_.speech_adaptation_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* LongRunningRecognizeResponse::unsafe_arena_release_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeResponse.speech_adaptation_info)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* temp = _impl_.speech_adaptation_info_;
  _impl_.speech_adaptation_info_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* LongRunningRecognizeResponse::_internal_mutable_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_adaptation_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::SpeechAdaptationInfo>(GetArena());
    _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(p);
  }
  return _impl_.speech_adaptation_info_;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* LongRunningRecognizeResponse::mutable_speech_adaptation_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* _msg = _internal_mutable_speech_adaptation_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeResponse.speech_adaptation_info)
  return _msg;
}
inline void LongRunningRecognizeResponse::set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.speech_adaptation_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeResponse.speech_adaptation_info)
}

// int64 request_id = 9;
inline void LongRunningRecognizeResponse::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = ::int64_t{0};
}
inline ::int64_t LongRunningRecognizeResponse::request_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeResponse.request_id)
  return _internal_request_id();
}
inline void LongRunningRecognizeResponse::set_request_id(::int64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LongRunningRecognizeResponse.request_id)
}
inline ::int64_t LongRunningRecognizeResponse::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_;
}
inline void LongRunningRecognizeResponse::_internal_set_request_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = value;
}

// -------------------------------------------------------------------

// LongRunningRecognizeMetadata

// int32 progress_percent = 1;
inline void LongRunningRecognizeMetadata::clear_progress_percent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.progress_percent_ = 0;
}
inline ::int32_t LongRunningRecognizeMetadata::progress_percent() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeMetadata.progress_percent)
  return _internal_progress_percent();
}
inline void LongRunningRecognizeMetadata::set_progress_percent(::int32_t value) {
  _internal_set_progress_percent(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LongRunningRecognizeMetadata.progress_percent)
}
inline ::int32_t LongRunningRecognizeMetadata::_internal_progress_percent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.progress_percent_;
}
inline void LongRunningRecognizeMetadata::_internal_set_progress_percent(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.progress_percent_ = value;
}

// .google.protobuf.Timestamp start_time = 2;
inline bool LongRunningRecognizeMetadata::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& LongRunningRecognizeMetadata::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& LongRunningRecognizeMetadata::start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
  return _internal_start_time();
}
inline void LongRunningRecognizeMetadata::unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
}
inline ::google::protobuf::Timestamp* LongRunningRecognizeMetadata::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* LongRunningRecognizeMetadata::unsafe_arena_release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LongRunningRecognizeMetadata::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Timestamp* LongRunningRecognizeMetadata::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
  return _msg;
}
inline void LongRunningRecognizeMetadata::set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
}

// .google.protobuf.Timestamp last_update_time = 3;
inline bool LongRunningRecognizeMetadata::has_last_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_update_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& LongRunningRecognizeMetadata::_internal_last_update_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& LongRunningRecognizeMetadata::last_update_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
  return _internal_last_update_time();
}
inline void LongRunningRecognizeMetadata::unsafe_arena_set_allocated_last_update_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_update_time_);
  }
  _impl_.last_update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
}
inline ::google::protobuf::Timestamp* LongRunningRecognizeMetadata::release_last_update_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* LongRunningRecognizeMetadata::unsafe_arena_release_last_update_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LongRunningRecognizeMetadata::_internal_mutable_last_update_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_update_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_update_time_;
}
inline ::google::protobuf::Timestamp* LongRunningRecognizeMetadata::mutable_last_update_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_update_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
  return _msg;
}
inline void LongRunningRecognizeMetadata::set_allocated_last_update_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_update_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.last_update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
}

// string uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void LongRunningRecognizeMetadata::clear_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& LongRunningRecognizeMetadata::uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LongRunningRecognizeMetadata::set_uri(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
}
inline std::string* LongRunningRecognizeMetadata::mutable_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
  return _s;
}
inline const std::string& LongRunningRecognizeMetadata::_internal_uri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uri_.Get();
}
inline void LongRunningRecognizeMetadata::_internal_set_uri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.Set(value, GetArena());
}
inline std::string* LongRunningRecognizeMetadata::_internal_mutable_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uri_.Mutable( GetArena());
}
inline std::string* LongRunningRecognizeMetadata::release_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
  return _impl_.uri_.Release();
}
inline void LongRunningRecognizeMetadata::set_allocated_uri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.uri)
}

// -------------------------------------------------------------------

// StreamingRecognizeResponse

// .google.rpc.Status error = 1;
inline bool StreamingRecognizeResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline const ::google::rpc::Status& StreamingRecognizeResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::rpc::Status* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& StreamingRecognizeResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  return _internal_error();
}
inline void StreamingRecognizeResponse::unsafe_arena_set_allocated_error(::google::rpc::Status* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::google::rpc::Status*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.error)
}
inline ::google::rpc::Status* StreamingRecognizeResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::rpc::Status* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::rpc::Status* StreamingRecognizeResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::rpc::Status* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* StreamingRecognizeResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::rpc::Status>(GetArena());
    _impl_.error_ = reinterpret_cast<::google::rpc::Status*>(p);
  }
  return _impl_.error_;
}
inline ::google::rpc::Status* StreamingRecognizeResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::rpc::Status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.error)
  return _msg;
}
inline void StreamingRecognizeResponse::set_allocated_error(::google::rpc::Status* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::google::rpc::Status*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.error)
}

// repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
inline int StreamingRecognizeResponse::_internal_results_size() const {
  return _internal_results().size();
}
inline int StreamingRecognizeResponse::results_size() const {
  return _internal_results_size();
}
inline void StreamingRecognizeResponse::clear_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.results_.Clear();
}
inline ::google::cloud::speech::v1::StreamingRecognitionResult* StreamingRecognizeResponse::mutable_results(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return _internal_mutable_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::StreamingRecognitionResult>* StreamingRecognizeResponse::mutable_results()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_results();
}
inline const ::google::cloud::speech::v1::StreamingRecognitionResult& StreamingRecognizeResponse::results(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return _internal_results().Get(index);
}
inline ::google::cloud::speech::v1::StreamingRecognitionResult* StreamingRecognizeResponse::add_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::cloud::speech::v1::StreamingRecognitionResult* _add = _internal_mutable_results()->Add();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::StreamingRecognitionResult>& StreamingRecognizeResponse::results() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.StreamingRecognizeResponse.results)
  return _internal_results();
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::StreamingRecognitionResult>&
StreamingRecognizeResponse::_internal_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.results_;
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::StreamingRecognitionResult>*
StreamingRecognizeResponse::_internal_mutable_results() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.results_;
}

// .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
inline void StreamingRecognizeResponse::clear_speech_event_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speech_event_type_ = 0;
}
inline ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::speech_event_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_type)
  return _internal_speech_event_type();
}
inline void StreamingRecognizeResponse::set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value) {
  _internal_set_speech_event_type(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_type)
}
inline ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::_internal_speech_event_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType>(_impl_.speech_event_type_);
}
inline void StreamingRecognizeResponse::_internal_set_speech_event_type(::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speech_event_type_ = value;
}

// .google.protobuf.Duration speech_event_time = 8;
inline bool StreamingRecognizeResponse::has_speech_event_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speech_event_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& StreamingRecognizeResponse::_internal_speech_event_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.speech_event_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& StreamingRecognizeResponse::speech_event_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_time)
  return _internal_speech_event_time();
}
inline void StreamingRecognizeResponse::unsafe_arena_set_allocated_speech_event_time(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_event_time_);
  }
  _impl_.speech_event_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_time)
}
inline ::google::protobuf::Duration* StreamingRecognizeResponse::release_speech_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Duration* released = _impl_.speech_event_time_;
  _impl_.speech_event_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* StreamingRecognizeResponse::unsafe_arena_release_speech_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_time)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Duration* temp = _impl_.speech_event_time_;
  _impl_.speech_event_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* StreamingRecognizeResponse::_internal_mutable_speech_event_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_event_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.speech_event_time_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.speech_event_time_;
}
inline ::google::protobuf::Duration* StreamingRecognizeResponse::mutable_speech_event_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Duration* _msg = _internal_mutable_speech_event_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_time)
  return _msg;
}
inline void StreamingRecognizeResponse::set_allocated_speech_event_time(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_event_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.speech_event_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.speech_event_time)
}

// .google.protobuf.Duration total_billed_time = 5;
inline bool StreamingRecognizeResponse::has_total_billed_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_billed_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& StreamingRecognizeResponse::_internal_total_billed_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.total_billed_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& StreamingRecognizeResponse::total_billed_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
  return _internal_total_billed_time();
}
inline void StreamingRecognizeResponse::unsafe_arena_set_allocated_total_billed_time(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_billed_time_);
  }
  _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
}
inline ::google::protobuf::Duration* StreamingRecognizeResponse::release_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* StreamingRecognizeResponse::unsafe_arena_release_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.total_billed_time_;
  _impl_.total_billed_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* StreamingRecognizeResponse::_internal_mutable_total_billed_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_billed_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.total_billed_time_;
}
inline ::google::protobuf::Duration* StreamingRecognizeResponse::mutable_total_billed_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_total_billed_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
  return _msg;
}
inline void StreamingRecognizeResponse::set_allocated_total_billed_time(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.total_billed_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.total_billed_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.total_billed_time)
}

// .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 9;
inline bool StreamingRecognizeResponse::has_speech_adaptation_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speech_adaptation_info_ != nullptr);
  return value;
}
inline void StreamingRecognizeResponse::clear_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_adaptation_info_ != nullptr) _impl_.speech_adaptation_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::google::cloud::speech::v1::SpeechAdaptationInfo& StreamingRecognizeResponse::_internal_speech_adaptation_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::cloud::speech::v1::SpeechAdaptationInfo* p = _impl_.speech_adaptation_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::cloud::speech::v1::SpeechAdaptationInfo&>(::google::cloud::speech::v1::_SpeechAdaptationInfo_default_instance_);
}
inline const ::google::cloud::speech::v1::SpeechAdaptationInfo& StreamingRecognizeResponse::speech_adaptation_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.speech_adaptation_info)
  return _internal_speech_adaptation_info();
}
inline void StreamingRecognizeResponse::unsafe_arena_set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.speech_adaptation_info_);
  }
  _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.speech_adaptation_info)
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* StreamingRecognizeResponse::release_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* released = _impl_.speech_adaptation_info_;
  _impl_.speech_adaptation_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* StreamingRecognizeResponse::unsafe_arena_release_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognizeResponse.speech_adaptation_info)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* temp = _impl_.speech_adaptation_info_;
  _impl_.speech_adaptation_info_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* StreamingRecognizeResponse::_internal_mutable_speech_adaptation_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.speech_adaptation_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::cloud::speech::v1::SpeechAdaptationInfo>(GetArena());
    _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(p);
  }
  return _impl_.speech_adaptation_info_;
}
inline ::google::cloud::speech::v1::SpeechAdaptationInfo* StreamingRecognizeResponse::mutable_speech_adaptation_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::cloud::speech::v1::SpeechAdaptationInfo* _msg = _internal_mutable_speech_adaptation_info();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognizeResponse.speech_adaptation_info)
  return _msg;
}
inline void StreamingRecognizeResponse::set_allocated_speech_adaptation_info(::google::cloud::speech::v1::SpeechAdaptationInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.speech_adaptation_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.speech_adaptation_info_ = reinterpret_cast<::google::cloud::speech::v1::SpeechAdaptationInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.speech_adaptation_info)
}

// int64 request_id = 10;
inline void StreamingRecognizeResponse::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = ::int64_t{0};
}
inline ::int64_t StreamingRecognizeResponse::request_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognizeResponse.request_id)
  return _internal_request_id();
}
inline void StreamingRecognizeResponse::set_request_id(::int64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognizeResponse.request_id)
}
inline ::int64_t StreamingRecognizeResponse::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_;
}
inline void StreamingRecognizeResponse::_internal_set_request_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = value;
}

// -------------------------------------------------------------------

// StreamingRecognitionResult

// repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
inline int StreamingRecognitionResult::_internal_alternatives_size() const {
  return _internal_alternatives().size();
}
inline int StreamingRecognitionResult::alternatives_size() const {
  return _internal_alternatives_size();
}
inline void StreamingRecognitionResult::clear_alternatives() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alternatives_.Clear();
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* StreamingRecognitionResult::mutable_alternatives(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return _internal_mutable_alternatives()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>* StreamingRecognitionResult::mutable_alternatives()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_alternatives();
}
inline const ::google::cloud::speech::v1::SpeechRecognitionAlternative& StreamingRecognitionResult::alternatives(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return _internal_alternatives().Get(index);
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* StreamingRecognitionResult::add_alternatives() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* _add = _internal_mutable_alternatives()->Add();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>& StreamingRecognitionResult::alternatives() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.StreamingRecognitionResult.alternatives)
  return _internal_alternatives();
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>&
StreamingRecognitionResult::_internal_alternatives() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alternatives_;
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>*
StreamingRecognitionResult::_internal_mutable_alternatives() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.alternatives_;
}

// bool is_final = 2;
inline void StreamingRecognitionResult::clear_is_final() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_final_ = false;
}
inline bool StreamingRecognitionResult::is_final() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.is_final)
  return _internal_is_final();
}
inline void StreamingRecognitionResult::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.is_final)
}
inline bool StreamingRecognitionResult::_internal_is_final() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_final_;
}
inline void StreamingRecognitionResult::_internal_set_is_final(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_final_ = value;
}

// float stability = 3;
inline void StreamingRecognitionResult::clear_stability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stability_ = 0;
}
inline float StreamingRecognitionResult::stability() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.stability)
  return _internal_stability();
}
inline void StreamingRecognitionResult::set_stability(float value) {
  _internal_set_stability(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.stability)
}
inline float StreamingRecognitionResult::_internal_stability() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stability_;
}
inline void StreamingRecognitionResult::_internal_set_stability(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stability_ = value;
}

// .google.protobuf.Duration result_end_time = 4;
inline bool StreamingRecognitionResult::has_result_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& StreamingRecognitionResult::_internal_result_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.result_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& StreamingRecognitionResult::result_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
  return _internal_result_end_time();
}
inline void StreamingRecognitionResult::unsafe_arena_set_allocated_result_end_time(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_end_time_);
  }
  _impl_.result_end_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
}
inline ::google::protobuf::Duration* StreamingRecognitionResult::release_result_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.result_end_time_;
  _impl_.result_end_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* StreamingRecognitionResult::unsafe_arena_release_result_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.result_end_time_;
  _impl_.result_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* StreamingRecognitionResult::_internal_mutable_result_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_end_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.result_end_time_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.result_end_time_;
}
inline ::google::protobuf::Duration* StreamingRecognitionResult::mutable_result_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_result_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
  return _msg;
}
inline void StreamingRecognitionResult::set_allocated_result_end_time(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_end_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionResult.result_end_time)
}

// int32 channel_tag = 5;
inline void StreamingRecognitionResult::clear_channel_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_tag_ = 0;
}
inline ::int32_t StreamingRecognitionResult::channel_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.channel_tag)
  return _internal_channel_tag();
}
inline void StreamingRecognitionResult::set_channel_tag(::int32_t value) {
  _internal_set_channel_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.channel_tag)
}
inline ::int32_t StreamingRecognitionResult::_internal_channel_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_tag_;
}
inline void StreamingRecognitionResult::_internal_set_channel_tag(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_tag_ = value;
}

// string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void StreamingRecognitionResult::clear_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& StreamingRecognitionResult::language_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamingRecognitionResult::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
}
inline std::string* StreamingRecognitionResult::mutable_language_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
  return _s;
}
inline const std::string& StreamingRecognitionResult::_internal_language_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.language_code_.Get();
}
inline void StreamingRecognitionResult::_internal_set_language_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.Set(value, GetArena());
}
inline std::string* StreamingRecognitionResult::_internal_mutable_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.language_code_.Mutable( GetArena());
}
inline std::string* StreamingRecognitionResult::release_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
  return _impl_.language_code_.Release();
}
inline void StreamingRecognitionResult::set_allocated_language_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognitionResult.language_code)
}

// -------------------------------------------------------------------

// SpeechRecognitionResult

// repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
inline int SpeechRecognitionResult::_internal_alternatives_size() const {
  return _internal_alternatives().size();
}
inline int SpeechRecognitionResult::alternatives_size() const {
  return _internal_alternatives_size();
}
inline void SpeechRecognitionResult::clear_alternatives() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alternatives_.Clear();
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* SpeechRecognitionResult::mutable_alternatives(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return _internal_mutable_alternatives()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>* SpeechRecognitionResult::mutable_alternatives()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_alternatives();
}
inline const ::google::cloud::speech::v1::SpeechRecognitionAlternative& SpeechRecognitionResult::alternatives(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return _internal_alternatives().Get(index);
}
inline ::google::cloud::speech::v1::SpeechRecognitionAlternative* SpeechRecognitionResult::add_alternatives() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::cloud::speech::v1::SpeechRecognitionAlternative* _add = _internal_mutable_alternatives()->Add();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>& SpeechRecognitionResult::alternatives() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechRecognitionResult.alternatives)
  return _internal_alternatives();
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>&
SpeechRecognitionResult::_internal_alternatives() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alternatives_;
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::SpeechRecognitionAlternative>*
SpeechRecognitionResult::_internal_mutable_alternatives() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.alternatives_;
}

// int32 channel_tag = 2;
inline void SpeechRecognitionResult::clear_channel_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_tag_ = 0;
}
inline ::int32_t SpeechRecognitionResult::channel_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.channel_tag)
  return _internal_channel_tag();
}
inline void SpeechRecognitionResult::set_channel_tag(::int32_t value) {
  _internal_set_channel_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionResult.channel_tag)
}
inline ::int32_t SpeechRecognitionResult::_internal_channel_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_tag_;
}
inline void SpeechRecognitionResult::_internal_set_channel_tag(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_tag_ = value;
}

// .google.protobuf.Duration result_end_time = 4;
inline bool SpeechRecognitionResult::has_result_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& SpeechRecognitionResult::_internal_result_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.result_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& SpeechRecognitionResult::result_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
  return _internal_result_end_time();
}
inline void SpeechRecognitionResult::unsafe_arena_set_allocated_result_end_time(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_end_time_);
  }
  _impl_.result_end_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
}
inline ::google::protobuf::Duration* SpeechRecognitionResult::release_result_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.result_end_time_;
  _impl_.result_end_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* SpeechRecognitionResult::unsafe_arena_release_result_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.result_end_time_;
  _impl_.result_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* SpeechRecognitionResult::_internal_mutable_result_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_end_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.result_end_time_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.result_end_time_;
}
inline ::google::protobuf::Duration* SpeechRecognitionResult::mutable_result_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_result_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
  return _msg;
}
inline void SpeechRecognitionResult::set_allocated_result_end_time(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_end_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.SpeechRecognitionResult.result_end_time)
}

// string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void SpeechRecognitionResult::clear_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionResult::language_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
  return _internal_language_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpeechRecognitionResult::set_language_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
}
inline std::string* SpeechRecognitionResult::mutable_language_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
  return _s;
}
inline const std::string& SpeechRecognitionResult::_internal_language_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.language_code_.Get();
}
inline void SpeechRecognitionResult::_internal_set_language_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.Set(value, GetArena());
}
inline std::string* SpeechRecognitionResult::_internal_mutable_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.language_code_.Mutable( GetArena());
}
inline std::string* SpeechRecognitionResult::release_language_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
  return _impl_.language_code_.Release();
}
inline void SpeechRecognitionResult::set_allocated_language_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.SpeechRecognitionResult.language_code)
}

// -------------------------------------------------------------------

// SpeechRecognitionAlternative

// string transcript = 1;
inline void SpeechRecognitionAlternative::clear_transcript() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transcript_.ClearToEmpty();
}
inline const std::string& SpeechRecognitionAlternative::transcript() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  return _internal_transcript();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpeechRecognitionAlternative::set_transcript(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transcript_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}
inline std::string* SpeechRecognitionAlternative::mutable_transcript() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transcript();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  return _s;
}
inline const std::string& SpeechRecognitionAlternative::_internal_transcript() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transcript_.Get();
}
inline void SpeechRecognitionAlternative::_internal_set_transcript(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transcript_.Set(value, GetArena());
}
inline std::string* SpeechRecognitionAlternative::_internal_mutable_transcript() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transcript_.Mutable( GetArena());
}
inline std::string* SpeechRecognitionAlternative::release_transcript() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
  return _impl_.transcript_.Release();
}
inline void SpeechRecognitionAlternative::set_allocated_transcript(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transcript_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transcript_.IsDefault()) {
    _impl_.transcript_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.SpeechRecognitionAlternative.transcript)
}

// float confidence = 2;
inline void SpeechRecognitionAlternative::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
}
inline float SpeechRecognitionAlternative::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.confidence)
  return _internal_confidence();
}
inline void SpeechRecognitionAlternative::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechRecognitionAlternative.confidence)
}
inline float SpeechRecognitionAlternative::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void SpeechRecognitionAlternative::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// repeated .google.cloud.speech.v1.WordInfo words = 3;
inline int SpeechRecognitionAlternative::_internal_words_size() const {
  return _internal_words().size();
}
inline int SpeechRecognitionAlternative::words_size() const {
  return _internal_words_size();
}
inline void SpeechRecognitionAlternative::clear_words() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.words_.Clear();
}
inline ::google::cloud::speech::v1::WordInfo* SpeechRecognitionAlternative::mutable_words(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return _internal_mutable_words()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::WordInfo>* SpeechRecognitionAlternative::mutable_words()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_words();
}
inline const ::google::cloud::speech::v1::WordInfo& SpeechRecognitionAlternative::words(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return _internal_words().Get(index);
}
inline ::google::cloud::speech::v1::WordInfo* SpeechRecognitionAlternative::add_words() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::cloud::speech::v1::WordInfo* _add = _internal_mutable_words()->Add();
  // @@protoc_insertion_point(field_add:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::WordInfo>& SpeechRecognitionAlternative::words() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.cloud.speech.v1.SpeechRecognitionAlternative.words)
  return _internal_words();
}
inline const ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::WordInfo>&
SpeechRecognitionAlternative::_internal_words() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.words_;
}
inline ::google::protobuf::RepeatedPtrField<::google::cloud::speech::v1::WordInfo>*
SpeechRecognitionAlternative::_internal_mutable_words() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.words_;
}

// -------------------------------------------------------------------

// WordInfo

// .google.protobuf.Duration start_time = 1;
inline bool WordInfo::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& WordInfo::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& WordInfo::start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.start_time)
  return _internal_start_time();
}
inline void WordInfo::unsafe_arena_set_allocated_start_time(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.start_time)
}
inline ::google::protobuf::Duration* WordInfo::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* WordInfo::unsafe_arena_release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.start_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* WordInfo::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Duration* WordInfo::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.start_time)
  return _msg;
}
inline void WordInfo::set_allocated_start_time(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.start_time)
}

// .google.protobuf.Duration end_time = 2;
inline bool WordInfo::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& WordInfo::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& WordInfo::end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.end_time)
  return _internal_end_time();
}
inline void WordInfo::unsafe_arena_set_allocated_end_time(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.end_time)
}
inline ::google::protobuf::Duration* WordInfo::release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* WordInfo::unsafe_arena_release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.end_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* WordInfo::_internal_mutable_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.end_time_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.end_time_;
}
inline ::google::protobuf::Duration* WordInfo::mutable_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.end_time)
  return _msg;
}
inline void WordInfo::set_allocated_end_time(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.end_time)
}

// string word = 3;
inline void WordInfo::clear_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.ClearToEmpty();
}
inline const std::string& WordInfo::word() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.word)
  return _internal_word();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WordInfo::set_word(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.WordInfo.word)
}
inline std::string* WordInfo::mutable_word() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.word)
  return _s;
}
inline const std::string& WordInfo::_internal_word() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.word_.Get();
}
inline void WordInfo::_internal_set_word(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.Set(value, GetArena());
}
inline std::string* WordInfo::_internal_mutable_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.word_.Mutable( GetArena());
}
inline std::string* WordInfo::release_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.word)
  return _impl_.word_.Release();
}
inline void WordInfo::set_allocated_word(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.word_.IsDefault()) {
    _impl_.word_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.word)
}

// float confidence = 4;
inline void WordInfo::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
}
inline float WordInfo::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.confidence)
  return _internal_confidence();
}
inline void WordInfo::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.WordInfo.confidence)
}
inline float WordInfo::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void WordInfo::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
inline void WordInfo::clear_speaker_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speaker_tag_ = 0;
}
inline ::int32_t WordInfo::speaker_tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.speaker_tag)
  return _internal_speaker_tag();
}
inline void WordInfo::set_speaker_tag(::int32_t value) {
  _internal_set_speaker_tag(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.WordInfo.speaker_tag)
}
inline ::int32_t WordInfo::_internal_speaker_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speaker_tag_;
}
inline void WordInfo::_internal_set_speaker_tag(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speaker_tag_ = value;
}

// string speaker_label = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void WordInfo::clear_speaker_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speaker_label_.ClearToEmpty();
}
inline const std::string& WordInfo::speaker_label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.WordInfo.speaker_label)
  return _internal_speaker_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WordInfo::set_speaker_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speaker_label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.WordInfo.speaker_label)
}
inline std::string* WordInfo::mutable_speaker_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_speaker_label();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.WordInfo.speaker_label)
  return _s;
}
inline const std::string& WordInfo::_internal_speaker_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speaker_label_.Get();
}
inline void WordInfo::_internal_set_speaker_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speaker_label_.Set(value, GetArena());
}
inline std::string* WordInfo::_internal_mutable_speaker_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.speaker_label_.Mutable( GetArena());
}
inline std::string* WordInfo::release_speaker_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.WordInfo.speaker_label)
  return _impl_.speaker_label_.Release();
}
inline void WordInfo::set_allocated_speaker_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speaker_label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.speaker_label_.IsDefault()) {
    _impl_.speaker_label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.WordInfo.speaker_label)
}

// -------------------------------------------------------------------

// SpeechAdaptationInfo

// bool adaptation_timeout = 1;
inline void SpeechAdaptationInfo::clear_adaptation_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptation_timeout_ = false;
}
inline bool SpeechAdaptationInfo::adaptation_timeout() const {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechAdaptationInfo.adaptation_timeout)
  return _internal_adaptation_timeout();
}
inline void SpeechAdaptationInfo::set_adaptation_timeout(bool value) {
  _internal_set_adaptation_timeout(value);
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechAdaptationInfo.adaptation_timeout)
}
inline bool SpeechAdaptationInfo::_internal_adaptation_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.adaptation_timeout_;
}
inline void SpeechAdaptationInfo::_internal_set_adaptation_timeout(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.adaptation_timeout_ = value;
}

// string timeout_message = 4;
inline void SpeechAdaptationInfo::clear_timeout_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_message_.ClearToEmpty();
}
inline const std::string& SpeechAdaptationInfo::timeout_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.cloud.speech.v1.SpeechAdaptationInfo.timeout_message)
  return _internal_timeout_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpeechAdaptationInfo::set_timeout_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.cloud.speech.v1.SpeechAdaptationInfo.timeout_message)
}
inline std::string* SpeechAdaptationInfo::mutable_timeout_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timeout_message();
  // @@protoc_insertion_point(field_mutable:google.cloud.speech.v1.SpeechAdaptationInfo.timeout_message)
  return _s;
}
inline const std::string& SpeechAdaptationInfo::_internal_timeout_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeout_message_.Get();
}
inline void SpeechAdaptationInfo::_internal_set_timeout_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_message_.Set(value, GetArena());
}
inline std::string* SpeechAdaptationInfo::_internal_mutable_timeout_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timeout_message_.Mutable( GetArena());
}
inline std::string* SpeechAdaptationInfo::release_timeout_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:google.cloud.speech.v1.SpeechAdaptationInfo.timeout_message)
  return _impl_.timeout_message_.Release();
}
inline void SpeechAdaptationInfo::set_allocated_timeout_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timeout_message_.IsDefault()) {
    _impl_.timeout_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.SpeechAdaptationInfo.timeout_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::google::cloud::speech::v1::RecognitionConfig_AudioEncoding> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::cloud::speech::v1::RecognitionConfig_AudioEncoding>() {
  return ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding_descriptor();
}
template <>
struct is_proto_enum<::google::cloud::speech::v1::RecognitionMetadata_InteractionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::cloud::speech::v1::RecognitionMetadata_InteractionType>() {
  return ::google::cloud::speech::v1::RecognitionMetadata_InteractionType_descriptor();
}
template <>
struct is_proto_enum<::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance>() {
  return ::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance_descriptor();
}
template <>
struct is_proto_enum<::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType>() {
  return ::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType_descriptor();
}
template <>
struct is_proto_enum<::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType>() {
  return ::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType_descriptor();
}
template <>
struct is_proto_enum<::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType>() {
  return ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cloud_5fspeech_2eproto_2epb_2eh
