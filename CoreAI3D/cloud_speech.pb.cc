// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoreAI3D/cloud_speech.proto

#include "CoreAI3D/cloud_speech.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
constexpr RecognizeRequest::RecognizeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , audio_(nullptr){}
struct RecognizeRequestDefaultTypeInternal {
  constexpr RecognizeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognizeRequestDefaultTypeInternal() {}
  union {
    RecognizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognizeRequestDefaultTypeInternal _RecognizeRequest_default_instance_;
constexpr LongRunningRecognizeRequest::LongRunningRecognizeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , audio_(nullptr)
  , output_config_(nullptr){}
struct LongRunningRecognizeRequestDefaultTypeInternal {
  constexpr LongRunningRecognizeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LongRunningRecognizeRequestDefaultTypeInternal() {}
  union {
    LongRunningRecognizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LongRunningRecognizeRequestDefaultTypeInternal _LongRunningRecognizeRequest_default_instance_;
constexpr TranscriptOutputConfig::TranscriptOutputConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TranscriptOutputConfigDefaultTypeInternal {
  constexpr TranscriptOutputConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TranscriptOutputConfigDefaultTypeInternal() {}
  union {
    TranscriptOutputConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TranscriptOutputConfigDefaultTypeInternal _TranscriptOutputConfig_default_instance_;
constexpr StreamingRecognizeRequest::StreamingRecognizeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StreamingRecognizeRequestDefaultTypeInternal {
  constexpr StreamingRecognizeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognizeRequestDefaultTypeInternal() {}
  union {
    StreamingRecognizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognizeRequestDefaultTypeInternal _StreamingRecognizeRequest_default_instance_;
constexpr StreamingRecognitionConfig_VoiceActivityTimeout::StreamingRecognitionConfig_VoiceActivityTimeout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speech_start_timeout_(nullptr)
  , speech_end_timeout_(nullptr){}
struct StreamingRecognitionConfig_VoiceActivityTimeoutDefaultTypeInternal {
  constexpr StreamingRecognitionConfig_VoiceActivityTimeoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognitionConfig_VoiceActivityTimeoutDefaultTypeInternal() {}
  union {
    StreamingRecognitionConfig_VoiceActivityTimeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognitionConfig_VoiceActivityTimeoutDefaultTypeInternal _StreamingRecognitionConfig_VoiceActivityTimeout_default_instance_;
constexpr StreamingRecognitionConfig::StreamingRecognitionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , voice_activity_timeout_(nullptr)
  , single_utterance_(false)
  , interim_results_(false)
  , enable_voice_activity_events_(false){}
struct StreamingRecognitionConfigDefaultTypeInternal {
  constexpr StreamingRecognitionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognitionConfigDefaultTypeInternal() {}
  union {
    StreamingRecognitionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognitionConfigDefaultTypeInternal _StreamingRecognitionConfig_default_instance_;
constexpr RecognitionConfig::RecognitionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speech_contexts_()
  , alternative_language_codes_()
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , diarization_config_(nullptr)
  , adaptation_(nullptr)
  , enable_spoken_punctuation_(nullptr)
  , enable_spoken_emojis_(nullptr)
  , transcript_normalization_(nullptr)
  , encoding_(0)

  , sample_rate_hertz_(0)
  , max_alternatives_(0)
  , audio_channel_count_(0)
  , enable_separate_recognition_per_channel_(false)
  , profanity_filter_(false)
  , enable_word_time_offsets_(false)
  , enable_word_confidence_(false)
  , enable_automatic_punctuation_(false)
  , use_enhanced_(false){}
struct RecognitionConfigDefaultTypeInternal {
  constexpr RecognitionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognitionConfigDefaultTypeInternal() {}
  union {
    RecognitionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognitionConfigDefaultTypeInternal _RecognitionConfig_default_instance_;
constexpr SpeakerDiarizationConfig::SpeakerDiarizationConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_speaker_diarization_(false)
  , min_speaker_count_(0)
  , max_speaker_count_(0)
  , speaker_tag_(0){}
struct SpeakerDiarizationConfigDefaultTypeInternal {
  constexpr SpeakerDiarizationConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeakerDiarizationConfigDefaultTypeInternal() {}
  union {
    SpeakerDiarizationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeakerDiarizationConfigDefaultTypeInternal _SpeakerDiarizationConfig_default_instance_;
constexpr RecognitionMetadata::RecognitionMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recording_device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , original_mime_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audio_topic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interaction_type_(0)

  , industry_naics_code_of_audio_(0u)
  , microphone_distance_(0)

  , original_media_type_(0)

  , recording_device_type_(0)
{}
struct RecognitionMetadataDefaultTypeInternal {
  constexpr RecognitionMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognitionMetadataDefaultTypeInternal() {}
  union {
    RecognitionMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognitionMetadataDefaultTypeInternal _RecognitionMetadata_default_instance_;
constexpr SpeechContext::SpeechContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phrases_()
  , boost_(0){}
struct SpeechContextDefaultTypeInternal {
  constexpr SpeechContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeechContextDefaultTypeInternal() {}
  union {
    SpeechContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeechContextDefaultTypeInternal _SpeechContext_default_instance_;
constexpr RecognitionAudio::RecognitionAudio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RecognitionAudioDefaultTypeInternal {
  constexpr RecognitionAudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognitionAudioDefaultTypeInternal() {}
  union {
    RecognitionAudio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognitionAudioDefaultTypeInternal _RecognitionAudio_default_instance_;
constexpr RecognizeResponse::RecognizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , total_billed_time_(nullptr)
  , speech_adaptation_info_(nullptr)
  , request_id_(int64_t{0}){}
struct RecognizeResponseDefaultTypeInternal {
  constexpr RecognizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognizeResponseDefaultTypeInternal() {}
  union {
    RecognizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognizeResponseDefaultTypeInternal _RecognizeResponse_default_instance_;
constexpr LongRunningRecognizeResponse::LongRunningRecognizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , total_billed_time_(nullptr)
  , output_config_(nullptr)
  , output_error_(nullptr)
  , speech_adaptation_info_(nullptr)
  , request_id_(int64_t{0}){}
struct LongRunningRecognizeResponseDefaultTypeInternal {
  constexpr LongRunningRecognizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LongRunningRecognizeResponseDefaultTypeInternal() {}
  union {
    LongRunningRecognizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LongRunningRecognizeResponseDefaultTypeInternal _LongRunningRecognizeResponse_default_instance_;
constexpr LongRunningRecognizeMetadata::LongRunningRecognizeMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(nullptr)
  , last_update_time_(nullptr)
  , progress_percent_(0){}
struct LongRunningRecognizeMetadataDefaultTypeInternal {
  constexpr LongRunningRecognizeMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LongRunningRecognizeMetadataDefaultTypeInternal() {}
  union {
    LongRunningRecognizeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LongRunningRecognizeMetadataDefaultTypeInternal _LongRunningRecognizeMetadata_default_instance_;
constexpr StreamingRecognizeResponse::StreamingRecognizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , error_(nullptr)
  , total_billed_time_(nullptr)
  , speech_event_time_(nullptr)
  , speech_adaptation_info_(nullptr)
  , speech_event_type_(0)

  , request_id_(int64_t{0}){}
struct StreamingRecognizeResponseDefaultTypeInternal {
  constexpr StreamingRecognizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognizeResponseDefaultTypeInternal() {}
  union {
    StreamingRecognizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognizeResponseDefaultTypeInternal _StreamingRecognizeResponse_default_instance_;
constexpr StreamingRecognitionResult::StreamingRecognitionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alternatives_()
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_end_time_(nullptr)
  , is_final_(false)
  , stability_(0)
  , channel_tag_(0){}
struct StreamingRecognitionResultDefaultTypeInternal {
  constexpr StreamingRecognitionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognitionResultDefaultTypeInternal() {}
  union {
    StreamingRecognitionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognitionResultDefaultTypeInternal _StreamingRecognitionResult_default_instance_;
constexpr SpeechRecognitionResult::SpeechRecognitionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alternatives_()
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_end_time_(nullptr)
  , channel_tag_(0){}
struct SpeechRecognitionResultDefaultTypeInternal {
  constexpr SpeechRecognitionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeechRecognitionResultDefaultTypeInternal() {}
  union {
    SpeechRecognitionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
constexpr SpeechRecognitionAlternative::SpeechRecognitionAlternative(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : words_()
  , transcript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , confidence_(0){}
struct SpeechRecognitionAlternativeDefaultTypeInternal {
  constexpr SpeechRecognitionAlternativeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeechRecognitionAlternativeDefaultTypeInternal() {}
  union {
    SpeechRecognitionAlternative _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeechRecognitionAlternativeDefaultTypeInternal _SpeechRecognitionAlternative_default_instance_;
constexpr WordInfo::WordInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : word_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , speaker_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(nullptr)
  , end_time_(nullptr)
  , confidence_(0)
  , speaker_tag_(0){}
struct WordInfoDefaultTypeInternal {
  constexpr WordInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WordInfoDefaultTypeInternal() {}
  union {
    WordInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WordInfoDefaultTypeInternal _WordInfo_default_instance_;
constexpr SpeechAdaptationInfo::SpeechAdaptationInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeout_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , adaptation_timeout_(false){}
struct SpeechAdaptationInfoDefaultTypeInternal {
  constexpr SpeechAdaptationInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeechAdaptationInfoDefaultTypeInternal() {}
  union {
    SpeechAdaptationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeechAdaptationInfoDefaultTypeInternal _SpeechAdaptationInfo_default_instance_;
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto = nullptr;

const uint32_t TableStruct_CoreAI3D_2fcloud_5fspeech_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, config_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeRequest, config_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeRequest, audio_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeRequest, output_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::TranscriptOutputConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::TranscriptOutputConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::TranscriptOutputConfig, output_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, streaming_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout, speech_start_timeout_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout, speech_end_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, config_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, single_utterance_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, interim_results_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, enable_voice_activity_events_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, voice_activity_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, encoding_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, audio_channel_count_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_separate_recognition_per_channel_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, language_code_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, alternative_language_codes_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, max_alternatives_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, profanity_filter_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, adaptation_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, transcript_normalization_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, speech_contexts_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_word_time_offsets_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_word_confidence_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_automatic_punctuation_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_spoken_punctuation_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_spoken_emojis_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, diarization_config_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, metadata_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, model_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, use_enhanced_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeakerDiarizationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeakerDiarizationConfig, enable_speaker_diarization_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeakerDiarizationConfig, min_speaker_count_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeakerDiarizationConfig, max_speaker_count_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeakerDiarizationConfig, speaker_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, interaction_type_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, industry_naics_code_of_audio_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, microphone_distance_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, original_media_type_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, recording_device_type_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, recording_device_name_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, original_mime_type_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionMetadata, audio_topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechContext, phrases_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechContext, boost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, audio_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, results_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, total_billed_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, speech_adaptation_info_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, results_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, total_billed_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, output_config_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, output_error_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, speech_adaptation_info_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, progress_percent_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, start_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, last_update_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, error_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, results_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, speech_event_type_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, speech_event_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, total_billed_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, speech_adaptation_info_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, alternatives_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, is_final_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, stability_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, result_end_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, channel_tag_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, language_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, alternatives_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, channel_tag_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, result_end_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, language_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, transcript_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, confidence_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, end_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, word_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, confidence_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, speaker_tag_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, speaker_label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechAdaptationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechAdaptationInfo, adaptation_timeout_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechAdaptationInfo, timeout_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::cloud::speech::v1::RecognizeRequest)},
  { 8, -1, -1, sizeof(::google::cloud::speech::v1::LongRunningRecognizeRequest)},
  { 17, -1, -1, sizeof(::google::cloud::speech::v1::TranscriptOutputConfig)},
  { 25, -1, -1, sizeof(::google::cloud::speech::v1::StreamingRecognizeRequest)},
  { 34, -1, -1, sizeof(::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout)},
  { 42, -1, -1, sizeof(::google::cloud::speech::v1::StreamingRecognitionConfig)},
  { 53, -1, -1, sizeof(::google::cloud::speech::v1::RecognitionConfig)},
  { 79, -1, -1, sizeof(::google::cloud::speech::v1::SpeakerDiarizationConfig)},
  { 89, -1, -1, sizeof(::google::cloud::speech::v1::RecognitionMetadata)},
  { 103, -1, -1, sizeof(::google::cloud::speech::v1::SpeechContext)},
  { 111, -1, -1, sizeof(::google::cloud::speech::v1::RecognitionAudio)},
  { 120, -1, -1, sizeof(::google::cloud::speech::v1::RecognizeResponse)},
  { 130, -1, -1, sizeof(::google::cloud::speech::v1::LongRunningRecognizeResponse)},
  { 142, -1, -1, sizeof(::google::cloud::speech::v1::LongRunningRecognizeMetadata)},
  { 152, -1, -1, sizeof(::google::cloud::speech::v1::StreamingRecognizeResponse)},
  { 165, -1, -1, sizeof(::google::cloud::speech::v1::StreamingRecognitionResult)},
  { 177, -1, -1, sizeof(::google::cloud::speech::v1::SpeechRecognitionResult)},
  { 187, -1, -1, sizeof(::google::cloud::speech::v1::SpeechRecognitionAlternative)},
  { 196, -1, -1, sizeof(::google::cloud::speech::v1::WordInfo)},
  { 208, -1, -1, sizeof(::google::cloud::speech::v1::SpeechAdaptationInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_LongRunningRecognizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_TranscriptOutputConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognitionConfig_VoiceActivityTimeout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognitionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognitionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_SpeakerDiarizationConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognitionMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_SpeechContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognitionAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_LongRunningRecognizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_LongRunningRecognizeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognitionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_SpeechRecognitionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_SpeechRecognitionAlternative_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_WordInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_SpeechAdaptationInfo_default_instance_),
};

const char descriptor_table_protodef_CoreAI3D_2fcloud_5fspeech_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033CoreAI3D/cloud_speech.proto\022\026google.cl"
  "oud.speech.v1\032\034google/api/annotations.pr"
  "oto\032\027google/api/client.proto\032\037google/api"
  "/field_behavior.proto\032%google/cloud/spee"
  "ch/v1/resource.proto\032#google/longrunning"
  "/operations.proto\032\036google/protobuf/durat"
  "ion.proto\032\037google/protobuf/timestamp.pro"
  "to\032\036google/protobuf/wrappers.proto\032\027goog"
  "le/rpc/status.proto\"\220\001\n\020RecognizeRequest"
  "\022>\n\006config\030\001 \001(\0132).google.cloud.speech.v"
  "1.RecognitionConfigB\003\340A\002\022<\n\005audio\030\002 \001(\0132"
  "(.google.cloud.speech.v1.RecognitionAudi"
  "oB\003\340A\002\"\347\001\n\033LongRunningRecognizeRequest\022>"
  "\n\006config\030\001 \001(\0132).google.cloud.speech.v1."
  "RecognitionConfigB\003\340A\002\022<\n\005audio\030\002 \001(\0132(."
  "google.cloud.speech.v1.RecognitionAudioB"
  "\003\340A\002\022J\n\routput_config\030\004 \001(\0132..google.clo"
  "ud.speech.v1.TranscriptOutputConfigB\003\340A\001"
  "\":\n\026TranscriptOutputConfig\022\021\n\007gcs_uri\030\001 "
  "\001(\tH\000B\r\n\013output_type\"\231\001\n\031StreamingRecogn"
  "izeRequest\022N\n\020streaming_config\030\001 \001(\01322.g"
  "oogle.cloud.speech.v1.StreamingRecogniti"
  "onConfigH\000\022\027\n\raudio_content\030\002 \001(\014H\000B\023\n\021s"
  "treaming_request\"\247\003\n\032StreamingRecognitio"
  "nConfig\022>\n\006config\030\001 \001(\0132).google.cloud.s"
  "peech.v1.RecognitionConfigB\003\340A\002\022\030\n\020singl"
  "e_utterance\030\002 \001(\010\022\027\n\017interim_results\030\003 \001"
  "(\010\022$\n\034enable_voice_activity_events\030\005 \001(\010"
  "\022g\n\026voice_activity_timeout\030\006 \001(\0132G.googl"
  "e.cloud.speech.v1.StreamingRecognitionCo"
  "nfig.VoiceActivityTimeout\032\206\001\n\024VoiceActiv"
  "ityTimeout\0227\n\024speech_start_timeout\030\001 \001(\013"
  "2\031.google.protobuf.Duration\0225\n\022speech_en"
  "d_timeout\030\002 \001(\0132\031.google.protobuf.Durati"
  "on\"\312\010\n\021RecognitionConfig\022I\n\010encoding\030\001 \001"
  "(\01627.google.cloud.speech.v1.RecognitionC"
  "onfig.AudioEncoding\022\031\n\021sample_rate_hertz"
  "\030\002 \001(\005\022\033\n\023audio_channel_count\030\007 \001(\005\022/\n\'e"
  "nable_separate_recognition_per_channel\030\014"
  " \001(\010\022\032\n\rlanguage_code\030\003 \001(\tB\003\340A\002\022\"\n\032alte"
  "rnative_language_codes\030\022 \003(\t\022\030\n\020max_alte"
  "rnatives\030\004 \001(\005\022\030\n\020profanity_filter\030\005 \001(\010"
  "\022<\n\nadaptation\030\024 \001(\0132(.google.cloud.spee"
  "ch.v1.SpeechAdaptation\022V\n\030transcript_nor"
  "malization\030\030 \001(\0132/.google.cloud.speech.v"
  "1.TranscriptNormalizationB\003\340A\001\022>\n\017speech"
  "_contexts\030\006 \003(\0132%.google.cloud.speech.v1"
  ".SpeechContext\022 \n\030enable_word_time_offse"
  "ts\030\010 \001(\010\022\036\n\026enable_word_confidence\030\017 \001(\010"
  "\022$\n\034enable_automatic_punctuation\030\013 \001(\010\022="
  "\n\031enable_spoken_punctuation\030\026 \001(\0132\032.goog"
  "le.protobuf.BoolValue\0228\n\024enable_spoken_e"
  "mojis\030\027 \001(\0132\032.google.protobuf.BoolValue\022"
  "L\n\022diarization_config\030\023 \001(\01320.google.clo"
  "ud.speech.v1.SpeakerDiarizationConfig\022=\n"
  "\010metadata\030\t \001(\0132+.google.cloud.speech.v1"
  ".RecognitionMetadata\022\r\n\005model\030\r \001(\t\022\024\n\014u"
  "se_enhanced\030\016 \001(\010\"\243\001\n\rAudioEncoding\022\030\n\024E"
  "NCODING_UNSPECIFIED\020\000\022\014\n\010LINEAR16\020\001\022\010\n\004F"
  "LAC\020\002\022\t\n\005MULAW\020\003\022\007\n\003AMR\020\004\022\n\n\006AMR_WB\020\005\022\014\n"
  "\010OGG_OPUS\020\006\022\032\n\026SPEEX_WITH_HEADER_BYTE\020\007\022"
  "\007\n\003MP3\020\010\022\r\n\tWEBM_OPUS\020\t\"\220\001\n\030SpeakerDiari"
  "zationConfig\022\"\n\032enable_speaker_diarizati"
  "on\030\001 \001(\010\022\031\n\021min_speaker_count\030\002 \001(\005\022\031\n\021m"
  "ax_speaker_count\030\003 \001(\005\022\032\n\013speaker_tag\030\005 "
  "\001(\005B\005\030\001\340A\003\"\244\010\n\023RecognitionMetadata\022U\n\020in"
  "teraction_type\030\001 \001(\0162;.google.cloud.spee"
  "ch.v1.RecognitionMetadata.InteractionTyp"
  "e\022$\n\034industry_naics_code_of_audio\030\003 \001(\r\022"
  "[\n\023microphone_distance\030\004 \001(\0162>.google.cl"
  "oud.speech.v1.RecognitionMetadata.Microp"
  "honeDistance\022Z\n\023original_media_type\030\005 \001("
  "\0162=.google.cloud.speech.v1.RecognitionMe"
  "tadata.OriginalMediaType\022^\n\025recording_de"
  "vice_type\030\006 \001(\0162\?.google.cloud.speech.v1"
  ".RecognitionMetadata.RecordingDeviceType"
  "\022\035\n\025recording_device_name\030\007 \001(\t\022\032\n\022origi"
  "nal_mime_type\030\010 \001(\t\022\023\n\013audio_topic\030\n \001(\t"
  "\"\305\001\n\017InteractionType\022 \n\034INTERACTION_TYPE"
  "_UNSPECIFIED\020\000\022\016\n\nDISCUSSION\020\001\022\020\n\014PRESEN"
  "TATION\020\002\022\016\n\nPHONE_CALL\020\003\022\r\n\tVOICEMAIL\020\004\022"
  "\033\n\027PROFESSIONALLY_PRODUCED\020\005\022\020\n\014VOICE_SE"
  "ARCH\020\006\022\021\n\rVOICE_COMMAND\020\007\022\r\n\tDICTATION\020\010"
  "\"d\n\022MicrophoneDistance\022#\n\037MICROPHONE_DIS"
  "TANCE_UNSPECIFIED\020\000\022\r\n\tNEARFIELD\020\001\022\014\n\010MI"
  "DFIELD\020\002\022\014\n\010FARFIELD\020\003\"N\n\021OriginalMediaT"
  "ype\022#\n\037ORIGINAL_MEDIA_TYPE_UNSPECIFIED\020\000"
  "\022\t\n\005AUDIO\020\001\022\t\n\005VIDEO\020\002\"\244\001\n\023RecordingDevi"
  "ceType\022%\n!RECORDING_DEVICE_TYPE_UNSPECIF"
  "IED\020\000\022\016\n\nSMARTPHONE\020\001\022\006\n\002PC\020\002\022\016\n\nPHONE_L"
  "INE\020\003\022\013\n\007VEHICLE\020\004\022\030\n\024OTHER_OUTDOOR_DEVI"
  "CE\020\005\022\027\n\023OTHER_INDOOR_DEVICE\020\006:\002\030\001\"/\n\rSpe"
  "echContext\022\017\n\007phrases\030\001 \003(\t\022\r\n\005boost\030\004 \001"
  "(\002\"D\n\020RecognitionAudio\022\021\n\007content\030\001 \001(\014H"
  "\000\022\r\n\003uri\030\002 \001(\tH\000B\016\n\014audio_source\"\355\001\n\021Rec"
  "ognizeResponse\022@\n\007results\030\002 \003(\0132/.google"
  ".cloud.speech.v1.SpeechRecognitionResult"
  "\0224\n\021total_billed_time\030\003 \001(\0132\031.google.pro"
  "tobuf.Duration\022L\n\026speech_adaptation_info"
  "\030\007 \001(\0132,.google.cloud.speech.v1.SpeechAd"
  "aptationInfo\022\022\n\nrequest_id\030\010 \001(\003\"\351\002\n\034Lon"
  "gRunningRecognizeResponse\022@\n\007results\030\002 \003"
  "(\0132/.google.cloud.speech.v1.SpeechRecogn"
  "itionResult\0224\n\021total_billed_time\030\003 \001(\0132\031"
  ".google.protobuf.Duration\022E\n\routput_conf"
  "ig\030\006 \001(\0132..google.cloud.speech.v1.Transc"
  "riptOutputConfig\022(\n\014output_error\030\007 \001(\0132\022"
  ".google.rpc.Status\022L\n\026speech_adaptation_"
  "info\030\010 \001(\0132,.google.cloud.speech.v1.Spee"
  "chAdaptationInfo\022\022\n\nrequest_id\030\t \001(\003\"\260\001\n"
  "\034LongRunningRecognizeMetadata\022\030\n\020progres"
  "s_percent\030\001 \001(\005\022.\n\nstart_time\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\0224\n\020last_update_t"
  "ime\030\003 \001(\0132\032.google.protobuf.Timestamp\022\020\n"
  "\003uri\030\004 \001(\tB\003\340A\003\"\321\004\n\032StreamingRecognizeRe"
  "sponse\022!\n\005error\030\001 \001(\0132\022.google.rpc.Statu"
  "s\022C\n\007results\030\002 \003(\01322.google.cloud.speech"
  ".v1.StreamingRecognitionResult\022]\n\021speech"
  "_event_type\030\004 \001(\0162B.google.cloud.speech."
  "v1.StreamingRecognizeResponse.SpeechEven"
  "tType\0224\n\021speech_event_time\030\010 \001(\0132\031.googl"
  "e.protobuf.Duration\0224\n\021total_billed_time"
  "\030\005 \001(\0132\031.google.protobuf.Duration\022L\n\026spe"
  "ech_adaptation_info\030\t \001(\0132,.google.cloud"
  ".speech.v1.SpeechAdaptationInfo\022\022\n\nreque"
  "st_id\030\n \001(\003\"\235\001\n\017SpeechEventType\022\034\n\030SPEEC"
  "H_EVENT_UNSPECIFIED\020\000\022\033\n\027END_OF_SINGLE_U"
  "TTERANCE\020\001\022\031\n\025SPEECH_ACTIVITY_BEGIN\020\002\022\027\n"
  "\023SPEECH_ACTIVITY_END\020\003\022\033\n\027SPEECH_ACTIVIT"
  "Y_TIMEOUT\020\004\"\362\001\n\032StreamingRecognitionResu"
  "lt\022J\n\014alternatives\030\001 \003(\01324.google.cloud."
  "speech.v1.SpeechRecognitionAlternative\022\020"
  "\n\010is_final\030\002 \001(\010\022\021\n\tstability\030\003 \001(\002\0222\n\017r"
  "esult_end_time\030\004 \001(\0132\031.google.protobuf.D"
  "uration\022\023\n\013channel_tag\030\005 \001(\005\022\032\n\rlanguage"
  "_code\030\006 \001(\tB\003\340A\003\"\312\001\n\027SpeechRecognitionRe"
  "sult\022J\n\014alternatives\030\001 \003(\01324.google.clou"
  "d.speech.v1.SpeechRecognitionAlternative"
  "\022\023\n\013channel_tag\030\002 \001(\005\0222\n\017result_end_time"
  "\030\004 \001(\0132\031.google.protobuf.Duration\022\032\n\rlan"
  "guage_code\030\005 \001(\tB\003\340A\003\"w\n\034SpeechRecogniti"
  "onAlternative\022\022\n\ntranscript\030\001 \001(\t\022\022\n\ncon"
  "fidence\030\002 \001(\002\022/\n\005words\030\003 \003(\0132 .google.cl"
  "oud.speech.v1.WordInfo\"\300\001\n\010WordInfo\022-\n\ns"
  "tart_time\030\001 \001(\0132\031.google.protobuf.Durati"
  "on\022+\n\010end_time\030\002 \001(\0132\031.google.protobuf.D"
  "uration\022\014\n\004word\030\003 \001(\t\022\022\n\nconfidence\030\004 \001("
  "\002\022\032\n\013speaker_tag\030\005 \001(\005B\005\030\001\340A\003\022\032\n\rspeaker"
  "_label\030\006 \001(\tB\003\340A\003\"K\n\024SpeechAdaptationInf"
  "o\022\032\n\022adaptation_timeout\030\001 \001(\010\022\027\n\017timeout"
  "_message\030\004 \001(\t2\321\004\n\006Speech\022\220\001\n\tRecognize\022"
  "(.google.cloud.speech.v1.RecognizeReques"
  "t\032).google.cloud.speech.v1.RecognizeResp"
  "onse\".\202\323\344\223\002\031\"\024/v1/speech:recognize:\001*\332A\014"
  "config,audio\022\344\001\n\024LongRunningRecognize\0223."
  "google.cloud.speech.v1.LongRunningRecogn"
  "izeRequest\032\035.google.longrunning.Operatio"
  "n\"x\202\323\344\223\002$\"\037/v1/speech:longrunningrecogni"
  "ze:\001*\332A\014config,audio\312A<\n\034LongRunningReco"
  "gnizeResponse\022\034LongRunningRecognizeMetad"
  "ata\022\201\001\n\022StreamingRecognize\0221.google.clou"
  "d.speech.v1.StreamingRecognizeRequest\0322."
  "google.cloud.speech.v1.StreamingRecogniz"
  "eResponse\"\000(\0010\001\032I\312A\025speech.googleapis.co"
  "m\322A.https://www.googleapis.com/auth/clou"
  "d-platformBh\n\032com.google.cloud.speech.v1"
  "B\013SpeechProtoP\001Z2cloud.google.com/go/spe"
  "ech/apiv1/speechpb;speechpb\370\001\001\242\002\003GCSb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_deps[9] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fcloud_2fspeech_2fv1_2fresource_2eproto,
  &::descriptor_table_google_2flongrunning_2foperations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto = {
  false, false, 6724, descriptor_table_protodef_CoreAI3D_2fcloud_5fspeech_2eproto, "CoreAI3D/cloud_speech.proto", 
  &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once, descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_deps, 9, 20,
  schemas, file_default_instances, TableStruct_CoreAI3D_2fcloud_5fspeech_2eproto::offsets,
  file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto, file_level_enum_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto, file_level_service_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter() {
  return &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_CoreAI3D_2fcloud_5fspeech_2eproto(&descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto);
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionConfig_AudioEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto);
  return file_level_enum_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto[0];
}
bool RecognitionConfig_AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::ENCODING_UNSPECIFIED;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::LINEAR16;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::FLAC;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::MULAW;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::AMR;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::AMR_WB;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::OGG_OPUS;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::SPEEX_WITH_HEADER_BYTE;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::MP3;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::WEBM_OPUS;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MIN;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MAX;
constexpr int RecognitionConfig::AudioEncoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionMetadata_InteractionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto);
  return file_level_enum_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto[1];
}
bool RecognitionMetadata_InteractionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::INTERACTION_TYPE_UNSPECIFIED;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::DISCUSSION;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::PRESENTATION;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::PHONE_CALL;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::VOICEMAIL;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::PROFESSIONALLY_PRODUCED;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::VOICE_SEARCH;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::VOICE_COMMAND;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::DICTATION;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::InteractionType_MIN;
constexpr RecognitionMetadata_InteractionType RecognitionMetadata::InteractionType_MAX;
constexpr int RecognitionMetadata::InteractionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionMetadata_MicrophoneDistance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto);
  return file_level_enum_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto[2];
}
bool RecognitionMetadata_MicrophoneDistance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata::MICROPHONE_DISTANCE_UNSPECIFIED;
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata::NEARFIELD;
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata::MIDFIELD;
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata::FARFIELD;
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata::MicrophoneDistance_MIN;
constexpr RecognitionMetadata_MicrophoneDistance RecognitionMetadata::MicrophoneDistance_MAX;
constexpr int RecognitionMetadata::MicrophoneDistance_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionMetadata_OriginalMediaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto);
  return file_level_enum_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto[3];
}
bool RecognitionMetadata_OriginalMediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata::ORIGINAL_MEDIA_TYPE_UNSPECIFIED;
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata::AUDIO;
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata::VIDEO;
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata::OriginalMediaType_MIN;
constexpr RecognitionMetadata_OriginalMediaType RecognitionMetadata::OriginalMediaType_MAX;
constexpr int RecognitionMetadata::OriginalMediaType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionMetadata_RecordingDeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto);
  return file_level_enum_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto[4];
}
bool RecognitionMetadata_RecordingDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::RECORDING_DEVICE_TYPE_UNSPECIFIED;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::SMARTPHONE;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::PC;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::PHONE_LINE;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::VEHICLE;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::OTHER_OUTDOOR_DEVICE;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::OTHER_INDOOR_DEVICE;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::RecordingDeviceType_MIN;
constexpr RecognitionMetadata_RecordingDeviceType RecognitionMetadata::RecordingDeviceType_MAX;
constexpr int RecognitionMetadata::RecordingDeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamingRecognizeResponse_SpeechEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto);
  return file_level_enum_descriptors_CoreAI3D_2fcloud_5fspeech_2eproto[5];
}
bool StreamingRecognizeResponse_SpeechEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SPEECH_EVENT_UNSPECIFIED;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::END_OF_SINGLE_UTTERANCE;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SPEECH_ACTIVITY_BEGIN;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SPEECH_ACTIVITY_END;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SPEECH_ACTIVITY_TIMEOUT;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MIN;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MAX;
constexpr int StreamingRecognizeResponse::SpeechEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RecognizeRequest::_Internal {
 public:
  static const ::google::cloud::speech::v1::RecognitionConfig& config(const RecognizeRequest* msg);
  static const ::google::cloud::speech::v1::RecognitionAudio& audio(const RecognizeRequest* msg);
};

const ::google::cloud::speech::v1::RecognitionConfig&
RecognizeRequest::_Internal::config(const RecognizeRequest* msg) {
  return *msg->config_;
}
const ::google::cloud::speech::v1::RecognitionAudio&
RecognizeRequest::_Internal::audio(const RecognizeRequest* msg) {
  return *msg->audio_;
}
RecognizeRequest::RecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_audio()) {
    audio_ = new ::google::cloud::speech::v1::RecognitionAudio(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognizeRequest)
}

inline void RecognizeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audio_) -
    reinterpret_cast<char*>(&config_)) + sizeof(audio_));
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognizeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete audio_;
}

void RecognizeRequest::ArenaDtor(void* object) {
  RecognizeRequest* _this = reinterpret_cast< RecognizeRequest* >(object);
  (void)_this;
}
void RecognizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognizeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognizeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognizeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognizeRequest)
  return target;
}

size_t RecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognizeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognizeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecognizeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognizeRequest::GetClassData() const { return &_class_data_; }

void RecognizeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecognizeRequest *>(to)->MergeFrom(
      static_cast<const RecognizeRequest &>(from));
}


void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from._internal_config());
  }
  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::google::cloud::speech::v1::RecognitionAudio::MergeFrom(from._internal_audio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {
  return true;
}

void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognizeRequest, audio_)
      + sizeof(RecognizeRequest::audio_)
      - PROTOBUF_FIELD_OFFSET(RecognizeRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[0]);
}

// ===================================================================

class LongRunningRecognizeRequest::_Internal {
 public:
  static const ::google::cloud::speech::v1::RecognitionConfig& config(const LongRunningRecognizeRequest* msg);
  static const ::google::cloud::speech::v1::RecognitionAudio& audio(const LongRunningRecognizeRequest* msg);
  static const ::google::cloud::speech::v1::TranscriptOutputConfig& output_config(const LongRunningRecognizeRequest* msg);
};

const ::google::cloud::speech::v1::RecognitionConfig&
LongRunningRecognizeRequest::_Internal::config(const LongRunningRecognizeRequest* msg) {
  return *msg->config_;
}
const ::google::cloud::speech::v1::RecognitionAudio&
LongRunningRecognizeRequest::_Internal::audio(const LongRunningRecognizeRequest* msg) {
  return *msg->audio_;
}
const ::google::cloud::speech::v1::TranscriptOutputConfig&
LongRunningRecognizeRequest::_Internal::output_config(const LongRunningRecognizeRequest* msg) {
  return *msg->output_config_;
}
LongRunningRecognizeRequest::LongRunningRecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.LongRunningRecognizeRequest)
}
LongRunningRecognizeRequest::LongRunningRecognizeRequest(const LongRunningRecognizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_audio()) {
    audio_ = new ::google::cloud::speech::v1::RecognitionAudio(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  if (from._internal_has_output_config()) {
    output_config_ = new ::google::cloud::speech::v1::TranscriptOutputConfig(*from.output_config_);
  } else {
    output_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.LongRunningRecognizeRequest)
}

inline void LongRunningRecognizeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&output_config_) -
    reinterpret_cast<char*>(&config_)) + sizeof(output_config_));
}

LongRunningRecognizeRequest::~LongRunningRecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.LongRunningRecognizeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LongRunningRecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete audio_;
  if (this != internal_default_instance()) delete output_config_;
}

void LongRunningRecognizeRequest::ArenaDtor(void* object) {
  LongRunningRecognizeRequest* _this = reinterpret_cast< LongRunningRecognizeRequest* >(object);
  (void)_this;
}
void LongRunningRecognizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongRunningRecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LongRunningRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongRunningRecognizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongRunningRecognizeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio(this), target, stream);
  }

  // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_output_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::output_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.LongRunningRecognizeRequest)
  return target;
}

size_t LongRunningRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongRunningRecognizeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LongRunningRecognizeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongRunningRecognizeRequest::GetClassData() const { return &_class_data_; }

void LongRunningRecognizeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LongRunningRecognizeRequest *>(to)->MergeFrom(
      static_cast<const LongRunningRecognizeRequest &>(from));
}


void LongRunningRecognizeRequest::MergeFrom(const LongRunningRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from._internal_config());
  }
  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::google::cloud::speech::v1::RecognitionAudio::MergeFrom(from._internal_audio());
  }
  if (from._internal_has_output_config()) {
    _internal_mutable_output_config()->::google::cloud::speech::v1::TranscriptOutputConfig::MergeFrom(from._internal_output_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongRunningRecognizeRequest::CopyFrom(const LongRunningRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeRequest::IsInitialized() const {
  return true;
}

void LongRunningRecognizeRequest::InternalSwap(LongRunningRecognizeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongRunningRecognizeRequest, output_config_)
      + sizeof(LongRunningRecognizeRequest::output_config_)
      - PROTOBUF_FIELD_OFFSET(LongRunningRecognizeRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongRunningRecognizeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[1]);
}

// ===================================================================

class TranscriptOutputConfig::_Internal {
 public:
};

TranscriptOutputConfig::TranscriptOutputConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.TranscriptOutputConfig)
}
TranscriptOutputConfig::TranscriptOutputConfig(const TranscriptOutputConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_output_type();
  switch (from.output_type_case()) {
    case kGcsUri: {
      _internal_set_gcs_uri(from._internal_gcs_uri());
      break;
    }
    case OUTPUT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.TranscriptOutputConfig)
}

inline void TranscriptOutputConfig::SharedCtor() {
clear_has_output_type();
}

TranscriptOutputConfig::~TranscriptOutputConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.TranscriptOutputConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TranscriptOutputConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_output_type()) {
    clear_output_type();
  }
}

void TranscriptOutputConfig::ArenaDtor(void* object) {
  TranscriptOutputConfig* _this = reinterpret_cast< TranscriptOutputConfig* >(object);
  (void)_this;
}
void TranscriptOutputConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranscriptOutputConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TranscriptOutputConfig::clear_output_type() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.TranscriptOutputConfig)
  switch (output_type_case()) {
    case kGcsUri: {
      output_type_.gcs_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case OUTPUT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_TYPE_NOT_SET;
}


void TranscriptOutputConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.TranscriptOutputConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_output_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranscriptOutputConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gcs_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gcs_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranscriptOutputConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.TranscriptOutputConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string gcs_uri = 1;
  if (_internal_has_gcs_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gcs_uri().data(), static_cast<int>(this->_internal_gcs_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.TranscriptOutputConfig.gcs_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gcs_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.TranscriptOutputConfig)
  return target;
}

size_t TranscriptOutputConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.TranscriptOutputConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (output_type_case()) {
    // string gcs_uri = 1;
    case kGcsUri: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gcs_uri());
      break;
    }
    case OUTPUT_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranscriptOutputConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TranscriptOutputConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranscriptOutputConfig::GetClassData() const { return &_class_data_; }

void TranscriptOutputConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TranscriptOutputConfig *>(to)->MergeFrom(
      static_cast<const TranscriptOutputConfig &>(from));
}


void TranscriptOutputConfig::MergeFrom(const TranscriptOutputConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.TranscriptOutputConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.output_type_case()) {
    case kGcsUri: {
      _internal_set_gcs_uri(from._internal_gcs_uri());
      break;
    }
    case OUTPUT_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranscriptOutputConfig::CopyFrom(const TranscriptOutputConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.TranscriptOutputConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptOutputConfig::IsInitialized() const {
  return true;
}

void TranscriptOutputConfig::InternalSwap(TranscriptOutputConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(output_type_, other->output_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscriptOutputConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[2]);
}

// ===================================================================

class StreamingRecognizeRequest::_Internal {
 public:
  static const ::google::cloud::speech::v1::StreamingRecognitionConfig& streaming_config(const StreamingRecognizeRequest* msg);
};

const ::google::cloud::speech::v1::StreamingRecognitionConfig&
StreamingRecognizeRequest::_Internal::streaming_config(const StreamingRecognizeRequest* msg) {
  return *msg->streaming_request_.streaming_config_;
}
void StreamingRecognizeRequest::set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_request();
  if (streaming_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::cloud::speech::v1::StreamingRecognitionConfig>::GetOwningArena(streaming_config);
    if (message_arena != submessage_arena) {
      streaming_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_config, submessage_arena);
    }
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(const StreamingRecognizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      _internal_mutable_streaming_config()->::google::cloud::speech::v1::StreamingRecognitionConfig::MergeFrom(from._internal_streaming_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audio_content(from._internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}

inline void StreamingRecognizeRequest::SharedCtor() {
clear_has_streaming_request();
}

StreamingRecognizeRequest::~StreamingRecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognizeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamingRecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void StreamingRecognizeRequest::ArenaDtor(void* object) {
  StreamingRecognizeRequest* _this = reinterpret_cast< StreamingRecognizeRequest* >(object);
  (void)_this;
}
void StreamingRecognizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognizeRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  switch (streaming_request_case()) {
    case kStreamingConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete streaming_request_.streaming_config_;
      }
      break;
    }
    case kAudioContent: {
      streaming_request_.audio_content_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void StreamingRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audio_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_audio_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamingRecognizeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
  if (_internal_has_streaming_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::streaming_config(this), target, stream);
  }

  // bytes audio_content = 2;
  if (_internal_has_audio_content()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audio_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognizeRequest)
  return target;
}

size_t StreamingRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
    case kStreamingConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.streaming_config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamingRecognizeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamingRecognizeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamingRecognizeRequest::GetClassData() const { return &_class_data_; }

void StreamingRecognizeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamingRecognizeRequest *>(to)->MergeFrom(
      static_cast<const StreamingRecognizeRequest &>(from));
}


void StreamingRecognizeRequest::MergeFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      _internal_mutable_streaming_config()->::google::cloud::speech::v1::StreamingRecognitionConfig::MergeFrom(from._internal_streaming_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audio_content(from._internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingRecognizeRequest::CopyFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeRequest::IsInitialized() const {
  return true;
}

void StreamingRecognizeRequest::InternalSwap(StreamingRecognizeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognizeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[3]);
}

// ===================================================================

class StreamingRecognitionConfig_VoiceActivityTimeout::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& speech_start_timeout(const StreamingRecognitionConfig_VoiceActivityTimeout* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& speech_end_timeout(const StreamingRecognitionConfig_VoiceActivityTimeout* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
StreamingRecognitionConfig_VoiceActivityTimeout::_Internal::speech_start_timeout(const StreamingRecognitionConfig_VoiceActivityTimeout* msg) {
  return *msg->speech_start_timeout_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
StreamingRecognitionConfig_VoiceActivityTimeout::_Internal::speech_end_timeout(const StreamingRecognitionConfig_VoiceActivityTimeout* msg) {
  return *msg->speech_end_timeout_;
}
void StreamingRecognitionConfig_VoiceActivityTimeout::clear_speech_start_timeout() {
  if (GetArenaForAllocation() == nullptr && speech_start_timeout_ != nullptr) {
    delete speech_start_timeout_;
  }
  speech_start_timeout_ = nullptr;
}
void StreamingRecognitionConfig_VoiceActivityTimeout::clear_speech_end_timeout() {
  if (GetArenaForAllocation() == nullptr && speech_end_timeout_ != nullptr) {
    delete speech_end_timeout_;
  }
  speech_end_timeout_ = nullptr;
}
StreamingRecognitionConfig_VoiceActivityTimeout::StreamingRecognitionConfig_VoiceActivityTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
}
StreamingRecognitionConfig_VoiceActivityTimeout::StreamingRecognitionConfig_VoiceActivityTimeout(const StreamingRecognitionConfig_VoiceActivityTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_speech_start_timeout()) {
    speech_start_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.speech_start_timeout_);
  } else {
    speech_start_timeout_ = nullptr;
  }
  if (from._internal_has_speech_end_timeout()) {
    speech_end_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.speech_end_timeout_);
  } else {
    speech_end_timeout_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
}

inline void StreamingRecognitionConfig_VoiceActivityTimeout::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&speech_start_timeout_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speech_end_timeout_) -
    reinterpret_cast<char*>(&speech_start_timeout_)) + sizeof(speech_end_timeout_));
}

StreamingRecognitionConfig_VoiceActivityTimeout::~StreamingRecognitionConfig_VoiceActivityTimeout() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamingRecognitionConfig_VoiceActivityTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete speech_start_timeout_;
  if (this != internal_default_instance()) delete speech_end_timeout_;
}

void StreamingRecognitionConfig_VoiceActivityTimeout::ArenaDtor(void* object) {
  StreamingRecognitionConfig_VoiceActivityTimeout* _this = reinterpret_cast< StreamingRecognitionConfig_VoiceActivityTimeout* >(object);
  (void)_this;
}
void StreamingRecognitionConfig_VoiceActivityTimeout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognitionConfig_VoiceActivityTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognitionConfig_VoiceActivityTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && speech_start_timeout_ != nullptr) {
    delete speech_start_timeout_;
  }
  speech_start_timeout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && speech_end_timeout_ != nullptr) {
    delete speech_end_timeout_;
  }
  speech_end_timeout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognitionConfig_VoiceActivityTimeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration speech_start_timeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_start_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration speech_end_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_end_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamingRecognitionConfig_VoiceActivityTimeout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration speech_start_timeout = 1;
  if (this->_internal_has_speech_start_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::speech_start_timeout(this), target, stream);
  }

  // .google.protobuf.Duration speech_end_timeout = 2;
  if (this->_internal_has_speech_end_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::speech_end_timeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
  return target;
}

size_t StreamingRecognitionConfig_VoiceActivityTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration speech_start_timeout = 1;
  if (this->_internal_has_speech_start_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speech_start_timeout_);
  }

  // .google.protobuf.Duration speech_end_timeout = 2;
  if (this->_internal_has_speech_end_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speech_end_timeout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamingRecognitionConfig_VoiceActivityTimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamingRecognitionConfig_VoiceActivityTimeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamingRecognitionConfig_VoiceActivityTimeout::GetClassData() const { return &_class_data_; }

void StreamingRecognitionConfig_VoiceActivityTimeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamingRecognitionConfig_VoiceActivityTimeout *>(to)->MergeFrom(
      static_cast<const StreamingRecognitionConfig_VoiceActivityTimeout &>(from));
}


void StreamingRecognitionConfig_VoiceActivityTimeout::MergeFrom(const StreamingRecognitionConfig_VoiceActivityTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_speech_start_timeout()) {
    _internal_mutable_speech_start_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_speech_start_timeout());
  }
  if (from._internal_has_speech_end_timeout()) {
    _internal_mutable_speech_end_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_speech_end_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingRecognitionConfig_VoiceActivityTimeout::CopyFrom(const StreamingRecognitionConfig_VoiceActivityTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionConfig_VoiceActivityTimeout::IsInitialized() const {
  return true;
}

void StreamingRecognitionConfig_VoiceActivityTimeout::InternalSwap(StreamingRecognitionConfig_VoiceActivityTimeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingRecognitionConfig_VoiceActivityTimeout, speech_end_timeout_)
      + sizeof(StreamingRecognitionConfig_VoiceActivityTimeout::speech_end_timeout_)
      - PROTOBUF_FIELD_OFFSET(StreamingRecognitionConfig_VoiceActivityTimeout, speech_start_timeout_)>(
          reinterpret_cast<char*>(&speech_start_timeout_),
          reinterpret_cast<char*>(&other->speech_start_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognitionConfig_VoiceActivityTimeout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[4]);
}

// ===================================================================

class StreamingRecognitionConfig::_Internal {
 public:
  static const ::google::cloud::speech::v1::RecognitionConfig& config(const StreamingRecognitionConfig* msg);
  static const ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout& voice_activity_timeout(const StreamingRecognitionConfig* msg);
};

const ::google::cloud::speech::v1::RecognitionConfig&
StreamingRecognitionConfig::_Internal::config(const StreamingRecognitionConfig* msg) {
  return *msg->config_;
}
const ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout&
StreamingRecognitionConfig::_Internal::voice_activity_timeout(const StreamingRecognitionConfig* msg) {
  return *msg->voice_activity_timeout_;
}
StreamingRecognitionConfig::StreamingRecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}
StreamingRecognitionConfig::StreamingRecognitionConfig(const StreamingRecognitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_voice_activity_timeout()) {
    voice_activity_timeout_ = new ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout(*from.voice_activity_timeout_);
  } else {
    voice_activity_timeout_ = nullptr;
  }
  ::memcpy(&single_utterance_, &from.single_utterance_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_voice_activity_events_) -
    reinterpret_cast<char*>(&single_utterance_)) + sizeof(enable_voice_activity_events_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}

inline void StreamingRecognitionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_voice_activity_events_) -
    reinterpret_cast<char*>(&config_)) + sizeof(enable_voice_activity_events_));
}

StreamingRecognitionConfig::~StreamingRecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamingRecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete voice_activity_timeout_;
}

void StreamingRecognitionConfig::ArenaDtor(void* object) {
  StreamingRecognitionConfig* _this = reinterpret_cast< StreamingRecognitionConfig* >(object);
  (void)_this;
}
void StreamingRecognitionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && voice_activity_timeout_ != nullptr) {
    delete voice_activity_timeout_;
  }
  voice_activity_timeout_ = nullptr;
  ::memset(&single_utterance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_voice_activity_events_) -
      reinterpret_cast<char*>(&single_utterance_)) + sizeof(enable_voice_activity_events_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool single_utterance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          single_utterance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool interim_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          interim_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_voice_activity_events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          enable_voice_activity_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout voice_activity_timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice_activity_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamingRecognitionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bool single_utterance = 2;
  if (this->_internal_single_utterance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_single_utterance(), target);
  }

  // bool interim_results = 3;
  if (this->_internal_interim_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_interim_results(), target);
  }

  // bool enable_voice_activity_events = 5;
  if (this->_internal_enable_voice_activity_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_voice_activity_events(), target);
  }

  // .google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout voice_activity_timeout = 6;
  if (this->_internal_has_voice_activity_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::voice_activity_timeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionConfig)
  return target;
}

size_t StreamingRecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .google.cloud.speech.v1.StreamingRecognitionConfig.VoiceActivityTimeout voice_activity_timeout = 6;
  if (this->_internal_has_voice_activity_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voice_activity_timeout_);
  }

  // bool single_utterance = 2;
  if (this->_internal_single_utterance() != 0) {
    total_size += 1 + 1;
  }

  // bool interim_results = 3;
  if (this->_internal_interim_results() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_voice_activity_events = 5;
  if (this->_internal_enable_voice_activity_events() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamingRecognitionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamingRecognitionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamingRecognitionConfig::GetClassData() const { return &_class_data_; }

void StreamingRecognitionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamingRecognitionConfig *>(to)->MergeFrom(
      static_cast<const StreamingRecognitionConfig &>(from));
}


void StreamingRecognitionConfig::MergeFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from._internal_config());
  }
  if (from._internal_has_voice_activity_timeout()) {
    _internal_mutable_voice_activity_timeout()->::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout::MergeFrom(from._internal_voice_activity_timeout());
  }
  if (from._internal_single_utterance() != 0) {
    _internal_set_single_utterance(from._internal_single_utterance());
  }
  if (from._internal_interim_results() != 0) {
    _internal_set_interim_results(from._internal_interim_results());
  }
  if (from._internal_enable_voice_activity_events() != 0) {
    _internal_set_enable_voice_activity_events(from._internal_enable_voice_activity_events());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingRecognitionConfig::CopyFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionConfig::IsInitialized() const {
  return true;
}

void StreamingRecognitionConfig::InternalSwap(StreamingRecognitionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingRecognitionConfig, enable_voice_activity_events_)
      + sizeof(StreamingRecognitionConfig::enable_voice_activity_events_)
      - PROTOBUF_FIELD_OFFSET(StreamingRecognitionConfig, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognitionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[5]);
}

// ===================================================================

class RecognitionConfig::_Internal {
 public:
  static const ::google::cloud::speech::v1::SpeechAdaptation& adaptation(const RecognitionConfig* msg);
  static const ::google::cloud::speech::v1::TranscriptNormalization& transcript_normalization(const RecognitionConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable_spoken_punctuation(const RecognitionConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enable_spoken_emojis(const RecognitionConfig* msg);
  static const ::google::cloud::speech::v1::SpeakerDiarizationConfig& diarization_config(const RecognitionConfig* msg);
  static const ::google::cloud::speech::v1::RecognitionMetadata& metadata(const RecognitionConfig* msg);
};

const ::google::cloud::speech::v1::SpeechAdaptation&
RecognitionConfig::_Internal::adaptation(const RecognitionConfig* msg) {
  return *msg->adaptation_;
}
const ::google::cloud::speech::v1::TranscriptNormalization&
RecognitionConfig::_Internal::transcript_normalization(const RecognitionConfig* msg) {
  return *msg->transcript_normalization_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
RecognitionConfig::_Internal::enable_spoken_punctuation(const RecognitionConfig* msg) {
  return *msg->enable_spoken_punctuation_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
RecognitionConfig::_Internal::enable_spoken_emojis(const RecognitionConfig* msg) {
  return *msg->enable_spoken_emojis_;
}
const ::google::cloud::speech::v1::SpeakerDiarizationConfig&
RecognitionConfig::_Internal::diarization_config(const RecognitionConfig* msg) {
  return *msg->diarization_config_;
}
const ::google::cloud::speech::v1::RecognitionMetadata&
RecognitionConfig::_Internal::metadata(const RecognitionConfig* msg) {
  return *msg->metadata_;
}
void RecognitionConfig::clear_adaptation() {
  if (GetArenaForAllocation() == nullptr && adaptation_ != nullptr) {
    delete adaptation_;
  }
  adaptation_ = nullptr;
}
void RecognitionConfig::clear_transcript_normalization() {
  if (GetArenaForAllocation() == nullptr && transcript_normalization_ != nullptr) {
    delete transcript_normalization_;
  }
  transcript_normalization_ = nullptr;
}
void RecognitionConfig::clear_enable_spoken_punctuation() {
  if (GetArenaForAllocation() == nullptr && enable_spoken_punctuation_ != nullptr) {
    delete enable_spoken_punctuation_;
  }
  enable_spoken_punctuation_ = nullptr;
}
void RecognitionConfig::clear_enable_spoken_emojis() {
  if (GetArenaForAllocation() == nullptr && enable_spoken_emojis_ != nullptr) {
    delete enable_spoken_emojis_;
  }
  enable_spoken_emojis_ = nullptr;
}
RecognitionConfig::RecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  speech_contexts_(arena),
  alternative_language_codes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(const RecognitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      speech_contexts_(from.speech_contexts_),
      alternative_language_codes_(from.alternative_language_codes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::google::cloud::speech::v1::RecognitionMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_diarization_config()) {
    diarization_config_ = new ::google::cloud::speech::v1::SpeakerDiarizationConfig(*from.diarization_config_);
  } else {
    diarization_config_ = nullptr;
  }
  if (from._internal_has_adaptation()) {
    adaptation_ = new ::google::cloud::speech::v1::SpeechAdaptation(*from.adaptation_);
  } else {
    adaptation_ = nullptr;
  }
  if (from._internal_has_enable_spoken_punctuation()) {
    enable_spoken_punctuation_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_spoken_punctuation_);
  } else {
    enable_spoken_punctuation_ = nullptr;
  }
  if (from._internal_has_enable_spoken_emojis()) {
    enable_spoken_emojis_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enable_spoken_emojis_);
  } else {
    enable_spoken_emojis_ = nullptr;
  }
  if (from._internal_has_transcript_normalization()) {
    transcript_normalization_ = new ::google::cloud::speech::v1::TranscriptNormalization(*from.transcript_normalization_);
  } else {
    transcript_normalization_ = nullptr;
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_enhanced_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(use_enhanced_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionConfig)
}

inline void RecognitionConfig::SharedCtor() {
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_enhanced_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(use_enhanced_));
}

RecognitionConfig::~RecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete diarization_config_;
  if (this != internal_default_instance()) delete adaptation_;
  if (this != internal_default_instance()) delete enable_spoken_punctuation_;
  if (this != internal_default_instance()) delete enable_spoken_emojis_;
  if (this != internal_default_instance()) delete transcript_normalization_;
}

void RecognitionConfig::ArenaDtor(void* object) {
  RecognitionConfig* _this = reinterpret_cast< RecognitionConfig* >(object);
  (void)_this;
}
void RecognitionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speech_contexts_.Clear();
  alternative_language_codes_.Clear();
  language_code_.ClearToEmpty();
  model_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && diarization_config_ != nullptr) {
    delete diarization_config_;
  }
  diarization_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && adaptation_ != nullptr) {
    delete adaptation_;
  }
  adaptation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && enable_spoken_punctuation_ != nullptr) {
    delete enable_spoken_punctuation_;
  }
  enable_spoken_punctuation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && enable_spoken_emojis_ != nullptr) {
    delete enable_spoken_emojis_;
  }
  enable_spoken_emojis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transcript_normalization_ != nullptr) {
    delete transcript_normalization_;
  }
  transcript_normalization_ = nullptr;
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_enhanced_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(use_enhanced_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::google::cloud::speech::v1::RecognitionConfig_AudioEncoding>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 sample_rate_hertz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionConfig.language_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_alternatives = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_alternatives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool profanity_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          profanity_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speech_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 audio_channel_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          audio_channel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_word_time_offsets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          enable_word_time_offsets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.RecognitionMetadata metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_automatic_punctuation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          enable_automatic_punctuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_separate_recognition_per_channel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          enable_separate_recognition_per_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionConfig.model"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_enhanced = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          use_enhanced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_word_confidence = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          enable_word_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string alternative_language_codes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_alternative_language_codes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionConfig.alternative_language_codes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.SpeakerDiarizationConfig diarization_config = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_diarization_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.SpeechAdaptation adaptation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_adaptation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue enable_spoken_punctuation = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_spoken_punctuation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue enable_spoken_emojis = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_spoken_emojis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.TranscriptNormalization transcript_normalization = 24 [(.google.api.field_behavior) = OPTIONAL];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_transcript_normalization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognitionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encoding(), target);
  }

  // int32 sample_rate_hertz = 2;
  if (this->_internal_sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sample_rate_hertz(), target);
  }

  // string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.language_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_code(), target);
  }

  // int32 max_alternatives = 4;
  if (this->_internal_max_alternatives() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_alternatives(), target);
  }

  // bool profanity_filter = 5;
  if (this->_internal_profanity_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_profanity_filter(), target);
  }

  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speech_contexts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_speech_contexts(i), target, stream);
  }

  // int32 audio_channel_count = 7;
  if (this->_internal_audio_channel_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_audio_channel_count(), target);
  }

  // bool enable_word_time_offsets = 8;
  if (this->_internal_enable_word_time_offsets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_word_time_offsets(), target);
  }

  // .google.cloud.speech.v1.RecognitionMetadata metadata = 9;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::metadata(this), target, stream);
  }

  // bool enable_automatic_punctuation = 11;
  if (this->_internal_enable_automatic_punctuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_enable_automatic_punctuation(), target);
  }

  // bool enable_separate_recognition_per_channel = 12;
  if (this->_internal_enable_separate_recognition_per_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_separate_recognition_per_channel(), target);
  }

  // string model = 13;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.model");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_model(), target);
  }

  // bool use_enhanced = 14;
  if (this->_internal_use_enhanced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_use_enhanced(), target);
  }

  // bool enable_word_confidence = 15;
  if (this->_internal_enable_word_confidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_enable_word_confidence(), target);
  }

  // repeated string alternative_language_codes = 18;
  for (int i = 0, n = this->_internal_alternative_language_codes_size(); i < n; i++) {
    const auto& s = this->_internal_alternative_language_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.alternative_language_codes");
    target = stream->WriteString(18, s, target);
  }

  // .google.cloud.speech.v1.SpeakerDiarizationConfig diarization_config = 19;
  if (this->_internal_has_diarization_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::diarization_config(this), target, stream);
  }

  // .google.cloud.speech.v1.SpeechAdaptation adaptation = 20;
  if (this->_internal_has_adaptation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::adaptation(this), target, stream);
  }

  // .google.protobuf.BoolValue enable_spoken_punctuation = 22;
  if (this->_internal_has_enable_spoken_punctuation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::enable_spoken_punctuation(this), target, stream);
  }

  // .google.protobuf.BoolValue enable_spoken_emojis = 23;
  if (this->_internal_has_enable_spoken_emojis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::enable_spoken_emojis(this), target, stream);
  }

  // .google.cloud.speech.v1.TranscriptNormalization transcript_normalization = 24 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_transcript_normalization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::transcript_normalization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionConfig)
  return target;
}

size_t RecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  total_size += 1UL * this->_internal_speech_contexts_size();
  for (const auto& msg : this->speech_contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string alternative_language_codes = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(alternative_language_codes_.size());
  for (int i = 0, n = alternative_language_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      alternative_language_codes_.Get(i));
  }

  // string language_code = 3 [(.google.api.field_behavior) = REQUIRED];
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string model = 13;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // .google.cloud.speech.v1.RecognitionMetadata metadata = 9;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.cloud.speech.v1.SpeakerDiarizationConfig diarization_config = 19;
  if (this->_internal_has_diarization_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diarization_config_);
  }

  // .google.cloud.speech.v1.SpeechAdaptation adaptation = 20;
  if (this->_internal_has_adaptation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adaptation_);
  }

  // .google.protobuf.BoolValue enable_spoken_punctuation = 22;
  if (this->_internal_has_enable_spoken_punctuation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_spoken_punctuation_);
  }

  // .google.protobuf.BoolValue enable_spoken_emojis = 23;
  if (this->_internal_has_enable_spoken_emojis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enable_spoken_emojis_);
  }

  // .google.cloud.speech.v1.TranscriptNormalization transcript_normalization = 24 [(.google.api.field_behavior) = OPTIONAL];
  if (this->_internal_has_transcript_normalization()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transcript_normalization_);
  }

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  // int32 sample_rate_hertz = 2;
  if (this->_internal_sample_rate_hertz() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sample_rate_hertz());
  }

  // int32 max_alternatives = 4;
  if (this->_internal_max_alternatives() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_alternatives());
  }

  // int32 audio_channel_count = 7;
  if (this->_internal_audio_channel_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_audio_channel_count());
  }

  // bool enable_separate_recognition_per_channel = 12;
  if (this->_internal_enable_separate_recognition_per_channel() != 0) {
    total_size += 1 + 1;
  }

  // bool profanity_filter = 5;
  if (this->_internal_profanity_filter() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_word_time_offsets = 8;
  if (this->_internal_enable_word_time_offsets() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_word_confidence = 15;
  if (this->_internal_enable_word_confidence() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_automatic_punctuation = 11;
  if (this->_internal_enable_automatic_punctuation() != 0) {
    total_size += 1 + 1;
  }

  // bool use_enhanced = 14;
  if (this->_internal_use_enhanced() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognitionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecognitionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognitionConfig::GetClassData() const { return &_class_data_; }

void RecognitionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecognitionConfig *>(to)->MergeFrom(
      static_cast<const RecognitionConfig &>(from));
}


void RecognitionConfig::MergeFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  speech_contexts_.MergeFrom(from.speech_contexts_);
  alternative_language_codes_.MergeFrom(from.alternative_language_codes_);
  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::google::cloud::speech::v1::RecognitionMetadata::MergeFrom(from._internal_metadata());
  }
  if (from._internal_has_diarization_config()) {
    _internal_mutable_diarization_config()->::google::cloud::speech::v1::SpeakerDiarizationConfig::MergeFrom(from._internal_diarization_config());
  }
  if (from._internal_has_adaptation()) {
    _internal_mutable_adaptation()->::google::cloud::speech::v1::SpeechAdaptation::MergeFrom(from._internal_adaptation());
  }
  if (from._internal_has_enable_spoken_punctuation()) {
    _internal_mutable_enable_spoken_punctuation()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable_spoken_punctuation());
  }
  if (from._internal_has_enable_spoken_emojis()) {
    _internal_mutable_enable_spoken_emojis()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enable_spoken_emojis());
  }
  if (from._internal_has_transcript_normalization()) {
    _internal_mutable_transcript_normalization()->::google::cloud::speech::v1::TranscriptNormalization::MergeFrom(from._internal_transcript_normalization());
  }
  if (from._internal_encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (from._internal_sample_rate_hertz() != 0) {
    _internal_set_sample_rate_hertz(from._internal_sample_rate_hertz());
  }
  if (from._internal_max_alternatives() != 0) {
    _internal_set_max_alternatives(from._internal_max_alternatives());
  }
  if (from._internal_audio_channel_count() != 0) {
    _internal_set_audio_channel_count(from._internal_audio_channel_count());
  }
  if (from._internal_enable_separate_recognition_per_channel() != 0) {
    _internal_set_enable_separate_recognition_per_channel(from._internal_enable_separate_recognition_per_channel());
  }
  if (from._internal_profanity_filter() != 0) {
    _internal_set_profanity_filter(from._internal_profanity_filter());
  }
  if (from._internal_enable_word_time_offsets() != 0) {
    _internal_set_enable_word_time_offsets(from._internal_enable_word_time_offsets());
  }
  if (from._internal_enable_word_confidence() != 0) {
    _internal_set_enable_word_confidence(from._internal_enable_word_confidence());
  }
  if (from._internal_enable_automatic_punctuation() != 0) {
    _internal_set_enable_automatic_punctuation(from._internal_enable_automatic_punctuation());
  }
  if (from._internal_use_enhanced() != 0) {
    _internal_set_use_enhanced(from._internal_use_enhanced());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognitionConfig::CopyFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionConfig::IsInitialized() const {
  return true;
}

void RecognitionConfig::InternalSwap(RecognitionConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  speech_contexts_.InternalSwap(&other->speech_contexts_);
  alternative_language_codes_.InternalSwap(&other->alternative_language_codes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, lhs_arena,
      &other->language_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognitionConfig, use_enhanced_)
      + sizeof(RecognitionConfig::use_enhanced_)
      - PROTOBUF_FIELD_OFFSET(RecognitionConfig, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognitionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[6]);
}

// ===================================================================

class SpeakerDiarizationConfig::_Internal {
 public:
};

SpeakerDiarizationConfig::SpeakerDiarizationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeakerDiarizationConfig)
}
SpeakerDiarizationConfig::SpeakerDiarizationConfig(const SpeakerDiarizationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_speaker_diarization_, &from.enable_speaker_diarization_,
    static_cast<size_t>(reinterpret_cast<char*>(&speaker_tag_) -
    reinterpret_cast<char*>(&enable_speaker_diarization_)) + sizeof(speaker_tag_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeakerDiarizationConfig)
}

inline void SpeakerDiarizationConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_speaker_diarization_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speaker_tag_) -
    reinterpret_cast<char*>(&enable_speaker_diarization_)) + sizeof(speaker_tag_));
}

SpeakerDiarizationConfig::~SpeakerDiarizationConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeakerDiarizationConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeakerDiarizationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeakerDiarizationConfig::ArenaDtor(void* object) {
  SpeakerDiarizationConfig* _this = reinterpret_cast< SpeakerDiarizationConfig* >(object);
  (void)_this;
}
void SpeakerDiarizationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeakerDiarizationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeakerDiarizationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeakerDiarizationConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_speaker_diarization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speaker_tag_) -
      reinterpret_cast<char*>(&enable_speaker_diarization_)) + sizeof(speaker_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeakerDiarizationConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable_speaker_diarization = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          enable_speaker_diarization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_speaker_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          min_speaker_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_speaker_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_speaker_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          speaker_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeakerDiarizationConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeakerDiarizationConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_speaker_diarization = 1;
  if (this->_internal_enable_speaker_diarization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_speaker_diarization(), target);
  }

  // int32 min_speaker_count = 2;
  if (this->_internal_min_speaker_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_speaker_count(), target);
  }

  // int32 max_speaker_count = 3;
  if (this->_internal_max_speaker_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_speaker_count(), target);
  }

  // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_speaker_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_speaker_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeakerDiarizationConfig)
  return target;
}

size_t SpeakerDiarizationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeakerDiarizationConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable_speaker_diarization = 1;
  if (this->_internal_enable_speaker_diarization() != 0) {
    total_size += 1 + 1;
  }

  // int32 min_speaker_count = 2;
  if (this->_internal_min_speaker_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_min_speaker_count());
  }

  // int32 max_speaker_count = 3;
  if (this->_internal_max_speaker_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_speaker_count());
  }

  // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_speaker_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_speaker_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeakerDiarizationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeakerDiarizationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeakerDiarizationConfig::GetClassData() const { return &_class_data_; }

void SpeakerDiarizationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeakerDiarizationConfig *>(to)->MergeFrom(
      static_cast<const SpeakerDiarizationConfig &>(from));
}


void SpeakerDiarizationConfig::MergeFrom(const SpeakerDiarizationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeakerDiarizationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable_speaker_diarization() != 0) {
    _internal_set_enable_speaker_diarization(from._internal_enable_speaker_diarization());
  }
  if (from._internal_min_speaker_count() != 0) {
    _internal_set_min_speaker_count(from._internal_min_speaker_count());
  }
  if (from._internal_max_speaker_count() != 0) {
    _internal_set_max_speaker_count(from._internal_max_speaker_count());
  }
  if (from._internal_speaker_tag() != 0) {
    _internal_set_speaker_tag(from._internal_speaker_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeakerDiarizationConfig::CopyFrom(const SpeakerDiarizationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeakerDiarizationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakerDiarizationConfig::IsInitialized() const {
  return true;
}

void SpeakerDiarizationConfig::InternalSwap(SpeakerDiarizationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeakerDiarizationConfig, speaker_tag_)
      + sizeof(SpeakerDiarizationConfig::speaker_tag_)
      - PROTOBUF_FIELD_OFFSET(SpeakerDiarizationConfig, enable_speaker_diarization_)>(
          reinterpret_cast<char*>(&enable_speaker_diarization_),
          reinterpret_cast<char*>(&other->enable_speaker_diarization_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeakerDiarizationConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[7]);
}

// ===================================================================

class RecognitionMetadata::_Internal {
 public:
};

RecognitionMetadata::RecognitionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionMetadata)
}
RecognitionMetadata::RecognitionMetadata(const RecognitionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recording_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recording_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recording_device_name().empty()) {
    recording_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recording_device_name(), 
      GetArenaForAllocation());
  }
  original_mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    original_mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_mime_type().empty()) {
    original_mime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_mime_type(), 
      GetArenaForAllocation());
  }
  audio_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    audio_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_topic().empty()) {
    audio_topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_topic(), 
      GetArenaForAllocation());
  }
  ::memcpy(&interaction_type_, &from.interaction_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&recording_device_type_) -
    reinterpret_cast<char*>(&interaction_type_)) + sizeof(recording_device_type_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionMetadata)
}

inline void RecognitionMetadata::SharedCtor() {
recording_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recording_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
original_mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  original_mime_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
audio_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  audio_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interaction_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recording_device_type_) -
    reinterpret_cast<char*>(&interaction_type_)) + sizeof(recording_device_type_));
}

RecognitionMetadata::~RecognitionMetadata() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecognitionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  recording_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_mime_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecognitionMetadata::ArenaDtor(void* object) {
  RecognitionMetadata* _this = reinterpret_cast< RecognitionMetadata* >(object);
  (void)_this;
}
void RecognitionMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognitionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognitionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recording_device_name_.ClearToEmpty();
  original_mime_type_.ClearToEmpty();
  audio_topic_.ClearToEmpty();
  ::memset(&interaction_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_device_type_) -
      reinterpret_cast<char*>(&interaction_type_)) + sizeof(recording_device_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognitionMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionMetadata.InteractionType interaction_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interaction_type(static_cast<::google::cloud::speech::v1::RecognitionMetadata_InteractionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 industry_naics_code_of_audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          industry_naics_code_of_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_microphone_distance(static_cast<::google::cloud::speech::v1::RecognitionMetadata_MicrophoneDistance>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_original_media_type(static_cast<::google::cloud::speech::v1::RecognitionMetadata_OriginalMediaType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_recording_device_type(static_cast<::google::cloud::speech::v1::RecognitionMetadata_RecordingDeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      // string recording_device_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_recording_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionMetadata.recording_device_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string original_mime_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_original_mime_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionMetadata.original_mime_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string audio_topic = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_audio_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionMetadata.audio_topic"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognitionMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionMetadata.InteractionType interaction_type = 1;
  if (this->_internal_interaction_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interaction_type(), target);
  }

  // uint32 industry_naics_code_of_audio = 3;
  if (this->_internal_industry_naics_code_of_audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_industry_naics_code_of_audio(), target);
  }

  // .google.cloud.speech.v1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
  if (this->_internal_microphone_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_microphone_distance(), target);
  }

  // .google.cloud.speech.v1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
  if (this->_internal_original_media_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_original_media_type(), target);
  }

  // .google.cloud.speech.v1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
  if (this->_internal_recording_device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_recording_device_type(), target);
  }

  // string recording_device_name = 7;
  if (!this->_internal_recording_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recording_device_name().data(), static_cast<int>(this->_internal_recording_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionMetadata.recording_device_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_recording_device_name(), target);
  }

  // string original_mime_type = 8;
  if (!this->_internal_original_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_mime_type().data(), static_cast<int>(this->_internal_original_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionMetadata.original_mime_type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_original_mime_type(), target);
  }

  // string audio_topic = 10;
  if (!this->_internal_audio_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_topic().data(), static_cast<int>(this->_internal_audio_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionMetadata.audio_topic");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_audio_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionMetadata)
  return target;
}

size_t RecognitionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recording_device_name = 7;
  if (!this->_internal_recording_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recording_device_name());
  }

  // string original_mime_type = 8;
  if (!this->_internal_original_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_mime_type());
  }

  // string audio_topic = 10;
  if (!this->_internal_audio_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_topic());
  }

  // .google.cloud.speech.v1.RecognitionMetadata.InteractionType interaction_type = 1;
  if (this->_internal_interaction_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interaction_type());
  }

  // uint32 industry_naics_code_of_audio = 3;
  if (this->_internal_industry_naics_code_of_audio() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_industry_naics_code_of_audio());
  }

  // .google.cloud.speech.v1.RecognitionMetadata.MicrophoneDistance microphone_distance = 4;
  if (this->_internal_microphone_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_microphone_distance());
  }

  // .google.cloud.speech.v1.RecognitionMetadata.OriginalMediaType original_media_type = 5;
  if (this->_internal_original_media_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_original_media_type());
  }

  // .google.cloud.speech.v1.RecognitionMetadata.RecordingDeviceType recording_device_type = 6;
  if (this->_internal_recording_device_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recording_device_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognitionMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecognitionMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognitionMetadata::GetClassData() const { return &_class_data_; }

void RecognitionMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecognitionMetadata *>(to)->MergeFrom(
      static_cast<const RecognitionMetadata &>(from));
}


void RecognitionMetadata::MergeFrom(const RecognitionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recording_device_name().empty()) {
    _internal_set_recording_device_name(from._internal_recording_device_name());
  }
  if (!from._internal_original_mime_type().empty()) {
    _internal_set_original_mime_type(from._internal_original_mime_type());
  }
  if (!from._internal_audio_topic().empty()) {
    _internal_set_audio_topic(from._internal_audio_topic());
  }
  if (from._internal_interaction_type() != 0) {
    _internal_set_interaction_type(from._internal_interaction_type());
  }
  if (from._internal_industry_naics_code_of_audio() != 0) {
    _internal_set_industry_naics_code_of_audio(from._internal_industry_naics_code_of_audio());
  }
  if (from._internal_microphone_distance() != 0) {
    _internal_set_microphone_distance(from._internal_microphone_distance());
  }
  if (from._internal_original_media_type() != 0) {
    _internal_set_original_media_type(from._internal_original_media_type());
  }
  if (from._internal_recording_device_type() != 0) {
    _internal_set_recording_device_type(from._internal_recording_device_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognitionMetadata::CopyFrom(const RecognitionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionMetadata::IsInitialized() const {
  return true;
}

void RecognitionMetadata::InternalSwap(RecognitionMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recording_device_name_, lhs_arena,
      &other->recording_device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &original_mime_type_, lhs_arena,
      &other->original_mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &audio_topic_, lhs_arena,
      &other->audio_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognitionMetadata, recording_device_type_)
      + sizeof(RecognitionMetadata::recording_device_type_)
      - PROTOBUF_FIELD_OFFSET(RecognitionMetadata, interaction_type_)>(
          reinterpret_cast<char*>(&interaction_type_),
          reinterpret_cast<char*>(&other->interaction_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognitionMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[8]);
}

// ===================================================================

class SpeechContext::_Internal {
 public:
};

SpeechContext::SpeechContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  phrases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechContext)
}
SpeechContext::SpeechContext(const SpeechContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      phrases_(from.phrases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boost_ = from.boost_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechContext)
}

inline void SpeechContext::SharedCtor() {
boost_ = 0;
}

SpeechContext::~SpeechContext() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeechContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeechContext::ArenaDtor(void* object) {
  SpeechContext* _this = reinterpret_cast< SpeechContext* >(object);
  (void)_this;
}
void SpeechContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeechContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrases_.Clear();
  boost_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string phrases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_phrases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.SpeechContext.phrases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float boost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          boost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->_internal_phrases_size(); i < n; i++) {
    const auto& s = this->_internal_phrases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechContext.phrases");
    target = stream->WriteString(1, s, target);
  }

  // float boost = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_boost = this->_internal_boost();
  uint32_t raw_boost;
  memcpy(&raw_boost, &tmp_boost, sizeof(tmp_boost));
  if (raw_boost != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_boost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechContext)
  return target;
}

size_t SpeechContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string phrases = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(phrases_.size());
  for (int i = 0, n = phrases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      phrases_.Get(i));
  }

  // float boost = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_boost = this->_internal_boost();
  uint32_t raw_boost;
  memcpy(&raw_boost, &tmp_boost, sizeof(tmp_boost));
  if (raw_boost != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeechContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeechContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeechContext::GetClassData() const { return &_class_data_; }

void SpeechContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeechContext *>(to)->MergeFrom(
      static_cast<const SpeechContext &>(from));
}


void SpeechContext::MergeFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  phrases_.MergeFrom(from.phrases_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_boost = from._internal_boost();
  uint32_t raw_boost;
  memcpy(&raw_boost, &tmp_boost, sizeof(tmp_boost));
  if (raw_boost != 0) {
    _internal_set_boost(from._internal_boost());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeechContext::CopyFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechContext::IsInitialized() const {
  return true;
}

void SpeechContext::InternalSwap(SpeechContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  phrases_.InternalSwap(&other->phrases_);
  swap(boost_, other->boost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[9]);
}

// ===================================================================

class RecognitionAudio::_Internal {
 public:
};

RecognitionAudio::RecognitionAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionAudio)
}
RecognitionAudio::RecognitionAudio(const RecognitionAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_audio_source();
  switch (from.audio_source_case()) {
    case kContent: {
      _internal_set_content(from._internal_content());
      break;
    }
    case kUri: {
      _internal_set_uri(from._internal_uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionAudio)
}

inline void RecognitionAudio::SharedCtor() {
clear_has_audio_source();
}

RecognitionAudio::~RecognitionAudio() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionAudio)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecognitionAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_audio_source()) {
    clear_audio_source();
  }
}

void RecognitionAudio::ArenaDtor(void* object) {
  RecognitionAudio* _this = reinterpret_cast< RecognitionAudio* >(object);
  (void)_this;
}
void RecognitionAudio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognitionAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognitionAudio::clear_audio_source() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.RecognitionAudio)
  switch (audio_source_case()) {
    case kContent: {
      audio_source_.content_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kUri: {
      audio_source_.uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}


void RecognitionAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionAudio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_audio_source();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognitionAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionAudio.uri"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognitionAudio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionAudio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (_internal_has_content()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  // string uri = 2;
  if (_internal_has_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionAudio.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionAudio)
  return target;
}

size_t RecognitionAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionAudio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (audio_source_case()) {
    // bytes content = 1;
    case kContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_content());
      break;
    }
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognitionAudio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecognitionAudio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognitionAudio::GetClassData() const { return &_class_data_; }

void RecognitionAudio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecognitionAudio *>(to)->MergeFrom(
      static_cast<const RecognitionAudio &>(from));
}


void RecognitionAudio::MergeFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.audio_source_case()) {
    case kContent: {
      _internal_set_content(from._internal_content());
      break;
    }
    case kUri: {
      _internal_set_uri(from._internal_uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognitionAudio::CopyFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionAudio::IsInitialized() const {
  return true;
}

void RecognitionAudio::InternalSwap(RecognitionAudio* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(audio_source_, other->audio_source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognitionAudio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[10]);
}

// ===================================================================

class RecognizeResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& total_billed_time(const RecognizeResponse* msg);
  static const ::google::cloud::speech::v1::SpeechAdaptationInfo& speech_adaptation_info(const RecognizeResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
RecognizeResponse::_Internal::total_billed_time(const RecognizeResponse* msg) {
  return *msg->total_billed_time_;
}
const ::google::cloud::speech::v1::SpeechAdaptationInfo&
RecognizeResponse::_Internal::speech_adaptation_info(const RecognizeResponse* msg) {
  return *msg->speech_adaptation_info_;
}
void RecognizeResponse::clear_total_billed_time() {
  if (GetArenaForAllocation() == nullptr && total_billed_time_ != nullptr) {
    delete total_billed_time_;
  }
  total_billed_time_ = nullptr;
}
RecognizeResponse::RecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_billed_time()) {
    total_billed_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.total_billed_time_);
  } else {
    total_billed_time_ = nullptr;
  }
  if (from._internal_has_speech_adaptation_info()) {
    speech_adaptation_info_ = new ::google::cloud::speech::v1::SpeechAdaptationInfo(*from.speech_adaptation_info_);
  } else {
    speech_adaptation_info_ = nullptr;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognizeResponse)
}

inline void RecognizeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_billed_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&total_billed_time_)) + sizeof(request_id_));
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognizeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete total_billed_time_;
  if (this != internal_default_instance()) delete speech_adaptation_info_;
}

void RecognizeResponse::ArenaDtor(void* object) {
  RecognizeResponse* _this = reinterpret_cast< RecognizeResponse* >(object);
  (void)_this;
}
void RecognizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognizeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && total_billed_time_ != nullptr) {
    delete total_billed_time_;
  }
  total_billed_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && speech_adaptation_info_ != nullptr) {
    delete speech_adaptation_info_;
  }
  speech_adaptation_info_ = nullptr;
  request_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration total_billed_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_billed_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_adaptation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 request_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecognizeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognizeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // .google.protobuf.Duration total_billed_time = 3;
  if (this->_internal_has_total_billed_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::total_billed_time(this), target, stream);
  }

  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 7;
  if (this->_internal_has_speech_adaptation_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::speech_adaptation_info(this), target, stream);
  }

  // int64 request_id = 8;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognizeResponse)
  return target;
}

size_t RecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognizeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Duration total_billed_time = 3;
  if (this->_internal_has_total_billed_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_billed_time_);
  }

  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 7;
  if (this->_internal_has_speech_adaptation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speech_adaptation_info_);
  }

  // int64 request_id = 8;
  if (this->_internal_request_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecognizeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecognizeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecognizeResponse::GetClassData() const { return &_class_data_; }

void RecognizeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecognizeResponse *>(to)->MergeFrom(
      static_cast<const RecognizeResponse &>(from));
}


void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_total_billed_time()) {
    _internal_mutable_total_billed_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_total_billed_time());
  }
  if (from._internal_has_speech_adaptation_info()) {
    _internal_mutable_speech_adaptation_info()->::google::cloud::speech::v1::SpeechAdaptationInfo::MergeFrom(from._internal_speech_adaptation_info());
  }
  if (from._internal_request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {
  return true;
}

void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognizeResponse, request_id_)
      + sizeof(RecognizeResponse::request_id_)
      - PROTOBUF_FIELD_OFFSET(RecognizeResponse, total_billed_time_)>(
          reinterpret_cast<char*>(&total_billed_time_),
          reinterpret_cast<char*>(&other->total_billed_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[11]);
}

// ===================================================================

class LongRunningRecognizeResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& total_billed_time(const LongRunningRecognizeResponse* msg);
  static const ::google::cloud::speech::v1::TranscriptOutputConfig& output_config(const LongRunningRecognizeResponse* msg);
  static const ::google::rpc::Status& output_error(const LongRunningRecognizeResponse* msg);
  static const ::google::cloud::speech::v1::SpeechAdaptationInfo& speech_adaptation_info(const LongRunningRecognizeResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
LongRunningRecognizeResponse::_Internal::total_billed_time(const LongRunningRecognizeResponse* msg) {
  return *msg->total_billed_time_;
}
const ::google::cloud::speech::v1::TranscriptOutputConfig&
LongRunningRecognizeResponse::_Internal::output_config(const LongRunningRecognizeResponse* msg) {
  return *msg->output_config_;
}
const ::google::rpc::Status&
LongRunningRecognizeResponse::_Internal::output_error(const LongRunningRecognizeResponse* msg) {
  return *msg->output_error_;
}
const ::google::cloud::speech::v1::SpeechAdaptationInfo&
LongRunningRecognizeResponse::_Internal::speech_adaptation_info(const LongRunningRecognizeResponse* msg) {
  return *msg->speech_adaptation_info_;
}
void LongRunningRecognizeResponse::clear_total_billed_time() {
  if (GetArenaForAllocation() == nullptr && total_billed_time_ != nullptr) {
    delete total_billed_time_;
  }
  total_billed_time_ = nullptr;
}
void LongRunningRecognizeResponse::clear_output_error() {
  if (GetArenaForAllocation() == nullptr && output_error_ != nullptr) {
    delete output_error_;
  }
  output_error_ = nullptr;
}
LongRunningRecognizeResponse::LongRunningRecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.LongRunningRecognizeResponse)
}
LongRunningRecognizeResponse::LongRunningRecognizeResponse(const LongRunningRecognizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_billed_time()) {
    total_billed_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.total_billed_time_);
  } else {
    total_billed_time_ = nullptr;
  }
  if (from._internal_has_output_config()) {
    output_config_ = new ::google::cloud::speech::v1::TranscriptOutputConfig(*from.output_config_);
  } else {
    output_config_ = nullptr;
  }
  if (from._internal_has_output_error()) {
    output_error_ = new ::google::rpc::Status(*from.output_error_);
  } else {
    output_error_ = nullptr;
  }
  if (from._internal_has_speech_adaptation_info()) {
    speech_adaptation_info_ = new ::google::cloud::speech::v1::SpeechAdaptationInfo(*from.speech_adaptation_info_);
  } else {
    speech_adaptation_info_ = nullptr;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.LongRunningRecognizeResponse)
}

inline void LongRunningRecognizeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_billed_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&total_billed_time_)) + sizeof(request_id_));
}

LongRunningRecognizeResponse::~LongRunningRecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.LongRunningRecognizeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LongRunningRecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete total_billed_time_;
  if (this != internal_default_instance()) delete output_config_;
  if (this != internal_default_instance()) delete output_error_;
  if (this != internal_default_instance()) delete speech_adaptation_info_;
}

void LongRunningRecognizeResponse::ArenaDtor(void* object) {
  LongRunningRecognizeResponse* _this = reinterpret_cast< LongRunningRecognizeResponse* >(object);
  (void)_this;
}
void LongRunningRecognizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongRunningRecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LongRunningRecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && total_billed_time_ != nullptr) {
    delete total_billed_time_;
  }
  total_billed_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_error_ != nullptr) {
    delete output_error_;
  }
  output_error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && speech_adaptation_info_ != nullptr) {
    delete speech_adaptation_info_;
  }
  speech_adaptation_info_ = nullptr;
  request_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongRunningRecognizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration total_billed_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_billed_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.Status output_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_adaptation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 request_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongRunningRecognizeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // .google.protobuf.Duration total_billed_time = 3;
  if (this->_internal_has_total_billed_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::total_billed_time(this), target, stream);
  }

  // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 6;
  if (this->_internal_has_output_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::output_config(this), target, stream);
  }

  // .google.rpc.Status output_error = 7;
  if (this->_internal_has_output_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::output_error(this), target, stream);
  }

  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 8;
  if (this->_internal_has_speech_adaptation_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::speech_adaptation_info(this), target, stream);
  }

  // int64 request_id = 9;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.LongRunningRecognizeResponse)
  return target;
}

size_t LongRunningRecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Duration total_billed_time = 3;
  if (this->_internal_has_total_billed_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_billed_time_);
  }

  // .google.cloud.speech.v1.TranscriptOutputConfig output_config = 6;
  if (this->_internal_has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_config_);
  }

  // .google.rpc.Status output_error = 7;
  if (this->_internal_has_output_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_error_);
  }

  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 8;
  if (this->_internal_has_speech_adaptation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speech_adaptation_info_);
  }

  // int64 request_id = 9;
  if (this->_internal_request_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongRunningRecognizeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LongRunningRecognizeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongRunningRecognizeResponse::GetClassData() const { return &_class_data_; }

void LongRunningRecognizeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LongRunningRecognizeResponse *>(to)->MergeFrom(
      static_cast<const LongRunningRecognizeResponse &>(from));
}


void LongRunningRecognizeResponse::MergeFrom(const LongRunningRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_total_billed_time()) {
    _internal_mutable_total_billed_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_total_billed_time());
  }
  if (from._internal_has_output_config()) {
    _internal_mutable_output_config()->::google::cloud::speech::v1::TranscriptOutputConfig::MergeFrom(from._internal_output_config());
  }
  if (from._internal_has_output_error()) {
    _internal_mutable_output_error()->::google::rpc::Status::MergeFrom(from._internal_output_error());
  }
  if (from._internal_has_speech_adaptation_info()) {
    _internal_mutable_speech_adaptation_info()->::google::cloud::speech::v1::SpeechAdaptationInfo::MergeFrom(from._internal_speech_adaptation_info());
  }
  if (from._internal_request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongRunningRecognizeResponse::CopyFrom(const LongRunningRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeResponse::IsInitialized() const {
  return true;
}

void LongRunningRecognizeResponse::InternalSwap(LongRunningRecognizeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongRunningRecognizeResponse, request_id_)
      + sizeof(LongRunningRecognizeResponse::request_id_)
      - PROTOBUF_FIELD_OFFSET(LongRunningRecognizeResponse, total_billed_time_)>(
          reinterpret_cast<char*>(&total_billed_time_),
          reinterpret_cast<char*>(&other->total_billed_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongRunningRecognizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[12]);
}

// ===================================================================

class LongRunningRecognizeMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const LongRunningRecognizeMetadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_time(const LongRunningRecognizeMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LongRunningRecognizeMetadata::_Internal::start_time(const LongRunningRecognizeMetadata* msg) {
  return *msg->start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LongRunningRecognizeMetadata::_Internal::last_update_time(const LongRunningRecognizeMetadata* msg) {
  return *msg->last_update_time_;
}
void LongRunningRecognizeMetadata::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void LongRunningRecognizeMetadata::clear_last_update_time() {
  if (GetArenaForAllocation() == nullptr && last_update_time_ != nullptr) {
    delete last_update_time_;
  }
  last_update_time_ = nullptr;
}
LongRunningRecognizeMetadata::LongRunningRecognizeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.LongRunningRecognizeMetadata)
}
LongRunningRecognizeMetadata::LongRunningRecognizeMetadata(const LongRunningRecognizeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_last_update_time()) {
    last_update_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_update_time_);
  } else {
    last_update_time_ = nullptr;
  }
  progress_percent_ = from.progress_percent_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.LongRunningRecognizeMetadata)
}

inline void LongRunningRecognizeMetadata::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&progress_percent_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(progress_percent_));
}

LongRunningRecognizeMetadata::~LongRunningRecognizeMetadata() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LongRunningRecognizeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete last_update_time_;
}

void LongRunningRecognizeMetadata::ArenaDtor(void* object) {
  LongRunningRecognizeMetadata* _this = reinterpret_cast< LongRunningRecognizeMetadata* >(object);
  (void)_this;
}
void LongRunningRecognizeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongRunningRecognizeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LongRunningRecognizeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && last_update_time_ != nullptr) {
    delete last_update_time_;
  }
  last_update_time_ = nullptr;
  progress_percent_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongRunningRecognizeMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 progress_percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          progress_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_update_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_update_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.LongRunningRecognizeMetadata.uri"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongRunningRecognizeMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress_percent = 1;
  if (this->_internal_progress_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_progress_percent(), target);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp last_update_time = 3;
  if (this->_internal_has_last_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::last_update_time(this), target, stream);
  }

  // string uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.LongRunningRecognizeMetadata.uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  return target;
}

size_t LongRunningRecognizeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp last_update_time = 3;
  if (this->_internal_has_last_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_update_time_);
  }

  // int32 progress_percent = 1;
  if (this->_internal_progress_percent() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_progress_percent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongRunningRecognizeMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LongRunningRecognizeMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongRunningRecognizeMetadata::GetClassData() const { return &_class_data_; }

void LongRunningRecognizeMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LongRunningRecognizeMetadata *>(to)->MergeFrom(
      static_cast<const LongRunningRecognizeMetadata &>(from));
}


void LongRunningRecognizeMetadata::MergeFrom(const LongRunningRecognizeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _internal_set_uri(from._internal_uri());
  }
  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_last_update_time()) {
    _internal_mutable_last_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_update_time());
  }
  if (from._internal_progress_percent() != 0) {
    _internal_set_progress_percent(from._internal_progress_percent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongRunningRecognizeMetadata::CopyFrom(const LongRunningRecognizeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeMetadata::IsInitialized() const {
  return true;
}

void LongRunningRecognizeMetadata::InternalSwap(LongRunningRecognizeMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uri_, lhs_arena,
      &other->uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongRunningRecognizeMetadata, progress_percent_)
      + sizeof(LongRunningRecognizeMetadata::progress_percent_)
      - PROTOBUF_FIELD_OFFSET(LongRunningRecognizeMetadata, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongRunningRecognizeMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[13]);
}

// ===================================================================

class StreamingRecognizeResponse::_Internal {
 public:
  static const ::google::rpc::Status& error(const StreamingRecognizeResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& speech_event_time(const StreamingRecognizeResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& total_billed_time(const StreamingRecognizeResponse* msg);
  static const ::google::cloud::speech::v1::SpeechAdaptationInfo& speech_adaptation_info(const StreamingRecognizeResponse* msg);
};

const ::google::rpc::Status&
StreamingRecognizeResponse::_Internal::error(const StreamingRecognizeResponse* msg) {
  return *msg->error_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
StreamingRecognizeResponse::_Internal::speech_event_time(const StreamingRecognizeResponse* msg) {
  return *msg->speech_event_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
StreamingRecognizeResponse::_Internal::total_billed_time(const StreamingRecognizeResponse* msg) {
  return *msg->total_billed_time_;
}
const ::google::cloud::speech::v1::SpeechAdaptationInfo&
StreamingRecognizeResponse::_Internal::speech_adaptation_info(const StreamingRecognizeResponse* msg) {
  return *msg->speech_adaptation_info_;
}
void StreamingRecognizeResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
void StreamingRecognizeResponse::clear_speech_event_time() {
  if (GetArenaForAllocation() == nullptr && speech_event_time_ != nullptr) {
    delete speech_event_time_;
  }
  speech_event_time_ = nullptr;
}
void StreamingRecognizeResponse::clear_total_billed_time() {
  if (GetArenaForAllocation() == nullptr && total_billed_time_ != nullptr) {
    delete total_billed_time_;
  }
  total_billed_time_ = nullptr;
}
StreamingRecognizeResponse::StreamingRecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}
StreamingRecognizeResponse::StreamingRecognizeResponse(const StreamingRecognizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  if (from._internal_has_total_billed_time()) {
    total_billed_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.total_billed_time_);
  } else {
    total_billed_time_ = nullptr;
  }
  if (from._internal_has_speech_event_time()) {
    speech_event_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.speech_event_time_);
  } else {
    speech_event_time_ = nullptr;
  }
  if (from._internal_has_speech_adaptation_info()) {
    speech_adaptation_info_ = new ::google::cloud::speech::v1::SpeechAdaptationInfo(*from.speech_adaptation_info_);
  } else {
    speech_adaptation_info_ = nullptr;
  }
  ::memcpy(&speech_event_type_, &from.speech_event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&speech_event_type_)) + sizeof(request_id_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}

inline void StreamingRecognizeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(request_id_));
}

StreamingRecognizeResponse::~StreamingRecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognizeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamingRecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete total_billed_time_;
  if (this != internal_default_instance()) delete speech_event_time_;
  if (this != internal_default_instance()) delete speech_adaptation_info_;
}

void StreamingRecognizeResponse::ArenaDtor(void* object) {
  StreamingRecognizeResponse* _this = reinterpret_cast< StreamingRecognizeResponse* >(object);
  (void)_this;
}
void StreamingRecognizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && total_billed_time_ != nullptr) {
    delete total_billed_time_;
  }
  total_billed_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && speech_event_time_ != nullptr) {
    delete speech_event_time_;
  }
  speech_event_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && speech_adaptation_info_ != nullptr) {
    delete speech_adaptation_info_;
  }
  speech_adaptation_info_ = nullptr;
  ::memset(&speech_event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&speech_event_type_)) + sizeof(request_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_speech_event_type(static_cast<::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration total_billed_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_billed_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration speech_event_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_event_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_adaptation_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 request_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamingRecognizeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->_internal_speech_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_speech_event_type(), target);
  }

  // .google.protobuf.Duration total_billed_time = 5;
  if (this->_internal_has_total_billed_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::total_billed_time(this), target, stream);
  }

  // .google.protobuf.Duration speech_event_time = 8;
  if (this->_internal_has_speech_event_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::speech_event_time(this), target, stream);
  }

  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 9;
  if (this->_internal_has_speech_adaptation_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::speech_adaptation_info(this), target, stream);
  }

  // int64 request_id = 10;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognizeResponse)
  return target;
}

size_t StreamingRecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.rpc.Status error = 1;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .google.protobuf.Duration total_billed_time = 5;
  if (this->_internal_has_total_billed_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_billed_time_);
  }

  // .google.protobuf.Duration speech_event_time = 8;
  if (this->_internal_has_speech_event_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speech_event_time_);
  }

  // .google.cloud.speech.v1.SpeechAdaptationInfo speech_adaptation_info = 9;
  if (this->_internal_has_speech_adaptation_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speech_adaptation_info_);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->_internal_speech_event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_speech_event_type());
  }

  // int64 request_id = 10;
  if (this->_internal_request_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamingRecognizeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamingRecognizeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamingRecognizeResponse::GetClassData() const { return &_class_data_; }

void StreamingRecognizeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamingRecognizeResponse *>(to)->MergeFrom(
      static_cast<const StreamingRecognizeResponse &>(from));
}


void StreamingRecognizeResponse::MergeFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_error()) {
    _internal_mutable_error()->::google::rpc::Status::MergeFrom(from._internal_error());
  }
  if (from._internal_has_total_billed_time()) {
    _internal_mutable_total_billed_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_total_billed_time());
  }
  if (from._internal_has_speech_event_time()) {
    _internal_mutable_speech_event_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_speech_event_time());
  }
  if (from._internal_has_speech_adaptation_info()) {
    _internal_mutable_speech_adaptation_info()->::google::cloud::speech::v1::SpeechAdaptationInfo::MergeFrom(from._internal_speech_adaptation_info());
  }
  if (from._internal_speech_event_type() != 0) {
    _internal_set_speech_event_type(from._internal_speech_event_type());
  }
  if (from._internal_request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingRecognizeResponse::CopyFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeResponse::IsInitialized() const {
  return true;
}

void StreamingRecognizeResponse::InternalSwap(StreamingRecognizeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingRecognizeResponse, request_id_)
      + sizeof(StreamingRecognizeResponse::request_id_)
      - PROTOBUF_FIELD_OFFSET(StreamingRecognizeResponse, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[14]);
}

// ===================================================================

class StreamingRecognitionResult::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& result_end_time(const StreamingRecognitionResult* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
StreamingRecognitionResult::_Internal::result_end_time(const StreamingRecognitionResult* msg) {
  return *msg->result_end_time_;
}
void StreamingRecognitionResult::clear_result_end_time() {
  if (GetArenaForAllocation() == nullptr && result_end_time_ != nullptr) {
    delete result_end_time_;
  }
  result_end_time_ = nullptr;
}
StreamingRecognitionResult::StreamingRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  alternatives_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}
StreamingRecognitionResult::StreamingRecognitionResult(const StreamingRecognitionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alternatives_(from.alternatives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result_end_time()) {
    result_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.result_end_time_);
  } else {
    result_end_time_ = nullptr;
  }
  ::memcpy(&is_final_, &from.is_final_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_tag_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(channel_tag_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}

inline void StreamingRecognitionResult::SharedCtor() {
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_end_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_tag_) -
    reinterpret_cast<char*>(&result_end_time_)) + sizeof(channel_tag_));
}

StreamingRecognitionResult::~StreamingRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamingRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_end_time_;
}

void StreamingRecognitionResult::ArenaDtor(void* object) {
  StreamingRecognitionResult* _this = reinterpret_cast< StreamingRecognitionResult* >(object);
  (void)_this;
}
void StreamingRecognitionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognitionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  language_code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_end_time_ != nullptr) {
    delete result_end_time_;
  }
  result_end_time_ = nullptr;
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_tag_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(channel_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognitionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alternatives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_final = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float stability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          stability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration result_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          channel_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.StreamingRecognitionResult.language_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamingRecognitionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alternatives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_alternatives(i), target, stream);
  }

  // bool is_final = 2;
  if (this->_internal_is_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_final(), target);
  }

  // float stability = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stability = this->_internal_stability();
  uint32_t raw_stability;
  memcpy(&raw_stability, &tmp_stability, sizeof(tmp_stability));
  if (raw_stability != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_stability(), target);
  }

  // .google.protobuf.Duration result_end_time = 4;
  if (this->_internal_has_result_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result_end_time(this), target, stream);
  }

  // int32 channel_tag = 5;
  if (this->_internal_channel_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_channel_tag(), target);
  }

  // string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.StreamingRecognitionResult.language_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionResult)
  return target;
}

size_t StreamingRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  total_size += 1UL * this->_internal_alternatives_size();
  for (const auto& msg : this->alternatives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language_code = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // .google.protobuf.Duration result_end_time = 4;
  if (this->_internal_has_result_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_end_time_);
  }

  // bool is_final = 2;
  if (this->_internal_is_final() != 0) {
    total_size += 1 + 1;
  }

  // float stability = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stability = this->_internal_stability();
  uint32_t raw_stability;
  memcpy(&raw_stability, &tmp_stability, sizeof(tmp_stability));
  if (raw_stability != 0) {
    total_size += 1 + 4;
  }

  // int32 channel_tag = 5;
  if (this->_internal_channel_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamingRecognitionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamingRecognitionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamingRecognitionResult::GetClassData() const { return &_class_data_; }

void StreamingRecognitionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamingRecognitionResult *>(to)->MergeFrom(
      static_cast<const StreamingRecognitionResult &>(from));
}


void StreamingRecognitionResult::MergeFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from._internal_has_result_end_time()) {
    _internal_mutable_result_end_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_result_end_time());
  }
  if (from._internal_is_final() != 0) {
    _internal_set_is_final(from._internal_is_final());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stability = from._internal_stability();
  uint32_t raw_stability;
  memcpy(&raw_stability, &tmp_stability, sizeof(tmp_stability));
  if (raw_stability != 0) {
    _internal_set_stability(from._internal_stability());
  }
  if (from._internal_channel_tag() != 0) {
    _internal_set_channel_tag(from._internal_channel_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingRecognitionResult::CopyFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionResult::IsInitialized() const {
  return true;
}

void StreamingRecognitionResult::InternalSwap(StreamingRecognitionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  alternatives_.InternalSwap(&other->alternatives_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, lhs_arena,
      &other->language_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingRecognitionResult, channel_tag_)
      + sizeof(StreamingRecognitionResult::channel_tag_)
      - PROTOBUF_FIELD_OFFSET(StreamingRecognitionResult, result_end_time_)>(
          reinterpret_cast<char*>(&result_end_time_),
          reinterpret_cast<char*>(&other->result_end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognitionResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[15]);
}

// ===================================================================

class SpeechRecognitionResult::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& result_end_time(const SpeechRecognitionResult* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SpeechRecognitionResult::_Internal::result_end_time(const SpeechRecognitionResult* msg) {
  return *msg->result_end_time_;
}
void SpeechRecognitionResult::clear_result_end_time() {
  if (GetArenaForAllocation() == nullptr && result_end_time_ != nullptr) {
    delete result_end_time_;
  }
  result_end_time_ = nullptr;
}
SpeechRecognitionResult::SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  alternatives_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(const SpeechRecognitionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alternatives_(from.alternatives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_result_end_time()) {
    result_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.result_end_time_);
  } else {
    result_end_time_ = nullptr;
  }
  channel_tag_ = from.channel_tag_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}

inline void SpeechRecognitionResult::SharedCtor() {
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_end_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_tag_) -
    reinterpret_cast<char*>(&result_end_time_)) + sizeof(channel_tag_));
}

SpeechRecognitionResult::~SpeechRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechRecognitionResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeechRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_end_time_;
}

void SpeechRecognitionResult::ArenaDtor(void* object) {
  SpeechRecognitionResult* _this = reinterpret_cast< SpeechRecognitionResult* >(object);
  (void)_this;
}
void SpeechRecognitionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeechRecognitionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechRecognitionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  language_code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && result_end_time_ != nullptr) {
    delete result_end_time_;
  }
  result_end_time_ = nullptr;
  channel_tag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechRecognitionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alternatives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 channel_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration result_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.SpeechRecognitionResult.language_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechRecognitionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechRecognitionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alternatives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_alternatives(i), target, stream);
  }

  // int32 channel_tag = 2;
  if (this->_internal_channel_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel_tag(), target);
  }

  // .google.protobuf.Duration result_end_time = 4;
  if (this->_internal_has_result_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result_end_time(this), target, stream);
  }

  // string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_language_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechRecognitionResult.language_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechRecognitionResult)
  return target;
}

size_t SpeechRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechRecognitionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  total_size += 1UL * this->_internal_alternatives_size();
  for (const auto& msg : this->alternatives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language_code = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_language_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // .google.protobuf.Duration result_end_time = 4;
  if (this->_internal_has_result_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_end_time_);
  }

  // int32 channel_tag = 2;
  if (this->_internal_channel_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeechRecognitionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeechRecognitionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeechRecognitionResult::GetClassData() const { return &_class_data_; }

void SpeechRecognitionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeechRecognitionResult *>(to)->MergeFrom(
      static_cast<const SpeechRecognitionResult &>(from));
}


void SpeechRecognitionResult::MergeFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  if (!from._internal_language_code().empty()) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from._internal_has_result_end_time()) {
    _internal_mutable_result_end_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_result_end_time());
  }
  if (from._internal_channel_tag() != 0) {
    _internal_set_channel_tag(from._internal_channel_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeechRecognitionResult::CopyFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionResult::IsInitialized() const {
  return true;
}

void SpeechRecognitionResult::InternalSwap(SpeechRecognitionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  alternatives_.InternalSwap(&other->alternatives_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_code_, lhs_arena,
      &other->language_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeechRecognitionResult, channel_tag_)
      + sizeof(SpeechRecognitionResult::channel_tag_)
      - PROTOBUF_FIELD_OFFSET(SpeechRecognitionResult, result_end_time_)>(
          reinterpret_cast<char*>(&result_end_time_),
          reinterpret_cast<char*>(&other->result_end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechRecognitionResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[16]);
}

// ===================================================================

class SpeechRecognitionAlternative::_Internal {
 public:
};

SpeechRecognitionAlternative::SpeechRecognitionAlternative(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  words_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      words_(from.words_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transcript().empty()) {
    transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transcript(), 
      GetArenaForAllocation());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}

inline void SpeechRecognitionAlternative::SharedCtor() {
transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
confidence_ = 0;
}

SpeechRecognitionAlternative::~SpeechRecognitionAlternative() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeechRecognitionAlternative::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpeechRecognitionAlternative::ArenaDtor(void* object) {
  SpeechRecognitionAlternative* _this = reinterpret_cast< SpeechRecognitionAlternative* >(object);
  (void)_this;
}
void SpeechRecognitionAlternative::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeechRecognitionAlternative::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionAlternative::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  transcript_.ClearToEmpty();
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechRecognitionAlternative::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.WordInfo words = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechRecognitionAlternative::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (!this->_internal_transcript().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript().data(), static_cast<int>(this->_internal_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transcript(), target);
  }

  // float confidence = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_words_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_words(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechRecognitionAlternative)
  return target;
}

size_t SpeechRecognitionAlternative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  total_size += 1UL * this->_internal_words_size();
  for (const auto& msg : this->words_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string transcript = 1;
  if (!this->_internal_transcript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcript());
  }

  // float confidence = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeechRecognitionAlternative::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeechRecognitionAlternative::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeechRecognitionAlternative::GetClassData() const { return &_class_data_; }

void SpeechRecognitionAlternative::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeechRecognitionAlternative *>(to)->MergeFrom(
      static_cast<const SpeechRecognitionAlternative &>(from));
}


void SpeechRecognitionAlternative::MergeFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (!from._internal_transcript().empty()) {
    _internal_set_transcript(from._internal_transcript());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeechRecognitionAlternative::CopyFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionAlternative::IsInitialized() const {
  return true;
}

void SpeechRecognitionAlternative::InternalSwap(SpeechRecognitionAlternative* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  words_.InternalSwap(&other->words_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transcript_, lhs_arena,
      &other->transcript_, rhs_arena
  );
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechRecognitionAlternative::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[17]);
}

// ===================================================================

class WordInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& start_time(const WordInfo* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& end_time(const WordInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
WordInfo::_Internal::start_time(const WordInfo* msg) {
  return *msg->start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
WordInfo::_Internal::end_time(const WordInfo* msg) {
  return *msg->end_time_;
}
void WordInfo::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void WordInfo::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
WordInfo::WordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.WordInfo)
}
WordInfo::WordInfo(const WordInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_word().empty()) {
    word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_word(), 
      GetArenaForAllocation());
  }
  speaker_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    speaker_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_speaker_label().empty()) {
    speaker_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_speaker_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&speaker_tag_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(speaker_tag_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.WordInfo)
}

inline void WordInfo::SharedCtor() {
word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  word_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
speaker_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  speaker_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speaker_tag_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(speaker_tag_));
}

WordInfo::~WordInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.WordInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WordInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  speaker_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void WordInfo::ArenaDtor(void* object) {
  WordInfo* _this = reinterpret_cast< WordInfo* >(object);
  (void)_this;
}
void WordInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WordInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.WordInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmpty();
  speaker_label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speaker_tag_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(speaker_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WordInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string word = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.WordInfo.word"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          speaker_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string speaker_label = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_speaker_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.WordInfo.speaker_label"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WordInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.WordInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->_internal_has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->_internal_has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_time(this), target, stream);
  }

  // string word = 3;
  if (!this->_internal_word().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.WordInfo.word");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_word(), target);
  }

  // float confidence = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence(), target);
  }

  // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_speaker_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_speaker_tag(), target);
  }

  // string speaker_label = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_speaker_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_speaker_label().data(), static_cast<int>(this->_internal_speaker_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.WordInfo.speaker_label");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_speaker_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.WordInfo)
  return target;
}

size_t WordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.WordInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 3;
  if (!this->_internal_word().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }

  // string speaker_label = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (!this->_internal_speaker_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_speaker_label());
  }

  // .google.protobuf.Duration start_time = 1;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // float confidence = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 4;
  }

  // int32 speaker_tag = 5 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->_internal_speaker_tag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_speaker_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WordInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WordInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WordInfo::GetClassData() const { return &_class_data_; }

void WordInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WordInfo *>(to)->MergeFrom(
      static_cast<const WordInfo &>(from));
}


void WordInfo::MergeFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_word().empty()) {
    _internal_set_word(from._internal_word());
  }
  if (!from._internal_speaker_label().empty()) {
    _internal_set_speaker_label(from._internal_speaker_label());
  }
  if (from._internal_has_start_time()) {
    _internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_end_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from._internal_speaker_tag() != 0) {
    _internal_set_speaker_tag(from._internal_speaker_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WordInfo::CopyFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordInfo::IsInitialized() const {
  return true;
}

void WordInfo::InternalSwap(WordInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &word_, lhs_arena,
      &other->word_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &speaker_label_, lhs_arena,
      &other->speaker_label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WordInfo, speaker_tag_)
      + sizeof(WordInfo::speaker_tag_)
      - PROTOBUF_FIELD_OFFSET(WordInfo, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WordInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[18]);
}

// ===================================================================

class SpeechAdaptationInfo::_Internal {
 public:
};

SpeechAdaptationInfo::SpeechAdaptationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechAdaptationInfo)
}
SpeechAdaptationInfo::SpeechAdaptationInfo(const SpeechAdaptationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeout_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    timeout_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timeout_message().empty()) {
    timeout_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeout_message(), 
      GetArenaForAllocation());
  }
  adaptation_timeout_ = from.adaptation_timeout_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechAdaptationInfo)
}

inline void SpeechAdaptationInfo::SharedCtor() {
timeout_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  timeout_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
adaptation_timeout_ = false;
}

SpeechAdaptationInfo::~SpeechAdaptationInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechAdaptationInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeechAdaptationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  timeout_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpeechAdaptationInfo::ArenaDtor(void* object) {
  SpeechAdaptationInfo* _this = reinterpret_cast< SpeechAdaptationInfo* >(object);
  (void)_this;
}
void SpeechAdaptationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeechAdaptationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechAdaptationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechAdaptationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_message_.ClearToEmpty();
  adaptation_timeout_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechAdaptationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool adaptation_timeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          adaptation_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string timeout_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_timeout_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.SpeechAdaptationInfo.timeout_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechAdaptationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechAdaptationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool adaptation_timeout = 1;
  if (this->_internal_adaptation_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_adaptation_timeout(), target);
  }

  // string timeout_message = 4;
  if (!this->_internal_timeout_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timeout_message().data(), static_cast<int>(this->_internal_timeout_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechAdaptationInfo.timeout_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_timeout_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechAdaptationInfo)
  return target;
}

size_t SpeechAdaptationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechAdaptationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string timeout_message = 4;
  if (!this->_internal_timeout_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timeout_message());
  }

  // bool adaptation_timeout = 1;
  if (this->_internal_adaptation_timeout() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeechAdaptationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeechAdaptationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeechAdaptationInfo::GetClassData() const { return &_class_data_; }

void SpeechAdaptationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeechAdaptationInfo *>(to)->MergeFrom(
      static_cast<const SpeechAdaptationInfo &>(from));
}


void SpeechAdaptationInfo::MergeFrom(const SpeechAdaptationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechAdaptationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_timeout_message().empty()) {
    _internal_set_timeout_message(from._internal_timeout_message());
  }
  if (from._internal_adaptation_timeout() != 0) {
    _internal_set_adaptation_timeout(from._internal_adaptation_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeechAdaptationInfo::CopyFrom(const SpeechAdaptationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechAdaptationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechAdaptationInfo::IsInitialized() const {
  return true;
}

void SpeechAdaptationInfo::InternalSwap(SpeechAdaptationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timeout_message_, lhs_arena,
      &other->timeout_message_, rhs_arena
  );
  swap(adaptation_timeout_, other->adaptation_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechAdaptationInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_getter, &descriptor_table_CoreAI3D_2fcloud_5fspeech_2eproto_once,
      file_level_metadata_CoreAI3D_2fcloud_5fspeech_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognizeRequest* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::LongRunningRecognizeRequest* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::LongRunningRecognizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::LongRunningRecognizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::TranscriptOutputConfig* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::TranscriptOutputConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::TranscriptOutputConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognizeRequest* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognitionConfig_VoiceActivityTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognitionConfig* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognitionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognitionConfig* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognitionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::SpeakerDiarizationConfig* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::SpeakerDiarizationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::SpeakerDiarizationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognitionMetadata* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognitionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognitionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::SpeechContext* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::SpeechContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::SpeechContext >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognitionAudio* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognitionAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognitionAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognizeResponse* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::LongRunningRecognizeResponse* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::LongRunningRecognizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::LongRunningRecognizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::LongRunningRecognizeMetadata* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::LongRunningRecognizeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::LongRunningRecognizeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognizeResponse* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognitionResult* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognitionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognitionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::SpeechRecognitionResult* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::SpeechRecognitionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::SpeechRecognitionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::SpeechRecognitionAlternative* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::SpeechRecognitionAlternative >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::SpeechRecognitionAlternative >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::WordInfo* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::WordInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::WordInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::SpeechAdaptationInfo* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::SpeechAdaptationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::SpeechAdaptationInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
